{"version":3,"file":"angular.umd.js","sources":["~/@uirouter/angular/providers.ts","~/@uirouter/angular/index.ts","~/@uirouter/angular/location/locationConfig.ts","~/@uirouter/angular/location/locationService.ts","~/@uirouter/angular/statebuilders/lazyLoad.ts","~/@uirouter/angular/lazyLoad/lazyLoadNgModule.ts","~/@uirouter/angular/uiRouterNgModule.ts","~/@uirouter/angular/directives/directives.ts","~/@uirouter/angular/directives/uiSrefActive.ts","~/@uirouter/angular/directives/uiSrefStatus.ts","~/@uirouter/angular/directives/uiSref.ts","~/@uirouter/angular/uiRouterConfig.ts","~/@uirouter/angular/directives/uiView.ts","~/@uirouter/angular/mergeInjector.ts","~/@uirouter/angular/statebuilders/views.ts","~/@uirouter/angular/core/src/vanilla/baseLocationService.ts","~/@uirouter/angular/core/src/vanilla/utils.ts","~/@uirouter/angular/core/src/state/stateService.ts","~/@uirouter/angular/core/src/transition/transitionService.ts","~/@uirouter/angular/core/src/hooks/invalidTransition.ts","~/@uirouter/angular/core/src/hooks/ignoredTransition.ts","~/@uirouter/angular/core/src/transition/transitionEventType.ts","~/@uirouter/angular/core/src/hooks/lazyLoad.ts","~/@uirouter/angular/core/src/hooks/url.ts","~/@uirouter/angular/core/src/hooks/updateGlobals.ts","~/@uirouter/angular/core/src/hooks/views.ts","~/@uirouter/angular/core/src/hooks/resolve.ts","~/@uirouter/angular/core/src/hooks/onEnterExitRetain.ts","~/@uirouter/angular/core/src/hooks/redirectTo.ts","~/@uirouter/angular/core/src/hooks/coreResolvables.ts","~/@uirouter/angular/core/src/router.ts","~/@uirouter/angular/core/src/url/urlService.ts","~/@uirouter/angular/core/src/globals.ts","~/@uirouter/angular/core/src/view/view.ts","~/@uirouter/angular/core/src/url/urlRouter.ts","~/@uirouter/angular/core/src/url/urlRule.ts","~/@uirouter/angular/core/src/url/urlMatcherFactory.ts","~/@uirouter/angular/core/src/url/urlMatcher.ts","~/@uirouter/angular/core/src/state/stateRegistry.ts","~/@uirouter/angular/core/src/state/stateQueueManager.ts","~/@uirouter/angular/core/src/state/stateMatcher.ts","~/@uirouter/angular/core/src/state/stateBuilder.ts","~/@uirouter/angular/core/src/params/stateParams.ts","~/@uirouter/angular/core/src/params/paramTypes.ts","~/@uirouter/angular/core/src/common/strings.ts","~/@uirouter/angular/core/src/transition/transition.ts","~/@uirouter/angular/core/src/resolve/resolveContext.ts","~/@uirouter/angular/core/src/resolve/interface.ts","~/@uirouter/angular/core/src/resolve/resolvable.ts","~/@uirouter/angular/core/src/path/pathFactory.ts","~/@uirouter/angular/core/src/path/pathNode.ts","~/@uirouter/angular/core/src/params/param.ts","~/@uirouter/angular/core/src/params/paramType.ts","~/@uirouter/angular/core/src/transition/hookBuilder.ts","~/@uirouter/angular/core/src/transition/hookRegistry.ts","~/@uirouter/angular/core/src/transition/transitionHook.ts","~/@uirouter/angular/core/src/state/targetState.ts","~/@uirouter/angular/core/src/transition/interface.ts","~/@uirouter/angular/core/src/common/trace.ts","~/@uirouter/angular/core/src/transition/rejectFactory.ts","~/@uirouter/angular/core/src/common/queue.ts","~/@uirouter/angular/core/src/common/common.ts","~/@uirouter/angular/core/src/common/coreservices.ts","~/@uirouter/angular/core/src/common/predicates.ts","~/@uirouter/angular/core/src/state/stateObject.ts","~/@uirouter/angular/core/src/common/glob.ts","~/@uirouter/angular/core/src/common/hof.ts"],"sourcesContent":["/**\n * # UI-Router for Angular (v2+)\n *\n * - [@uirouter/angular home page](https://ui-router.github.io/ng2)\n * - [tutorials](https://ui-router.github.io/tutorial/ng2/helloworld)\n * - [quick start repository](http://github.com/ui-router/quickstart-ng2)\n *\n * Getting started:\n *\n * - Use npm. Add a dependency on latest `@uirouter/angular`\n * - Import UI-Router classes directly from `\"@uirouter/angular\"`\n *\n * ```js\n * import {StateRegistry} from \"@uirouter/angular\";\n * ```\n *\n * - Create application states (as defined by [[Ng2StateDeclaration]]).\n *\n * ```js\n * export let state1: Ng2StateDeclaration = {\n *   name: 'state1',\n *   component: State1Component,\n *   url: '/one'\n * }\n *\n * export let state2: Ng2StateDeclaration = {\n *   name: 'state2',\n *   component: State2Component,\n *   url: '/two'\n * }\n * ```\n *\n * - Import a [[UIRouterModule.forChild]] module into your feature `NgModule`s.\n *\n * ```js\n * @ NgModule({\n *   imports: [\n *     SharedModule,\n *     UIRouterModule.forChild({ states: [state1, state2 ] })\n *   ],\n *   declarations: [\n *     State1Component,\n *     State2Component,\n *   ]\n * })\n * export class MyFeatureModule {}\n * ```\n *\n * - Import a [[UIRouterModule.forRoot]] module into your application root `NgModule`\n * - Either bootstrap a [[UIView]] component, or add a `<ui-view></ui-view>` viewport to your root component.\n *\n * ```js\n * @ NgModule({\n *   imports: [\n *     BrowserModule,\n *     UIRouterModule.forRoot({ states: [ homeState ] }),\n *     MyFeatureModule,\n *   ],\n *   declarations: [\n *     HomeComponent\n *   ]\n *   bootstrap: [ UIView ]\n * })\n * class RootAppModule {}\n *\n * browserPlatformDynamic.bootstrapModule(RootAppModule);\n * ```\n *\n * - Optionally specify a configuration class [[ChildModule.configClass]] for any module\n * to perform any router configuration during bootstrap or lazyload.\n * Pass the class to [[UIRouterModule.forRoot]] or [[UIRouterModule.forChild]].\n *\n * ```js\n * import {UIRouter} from \"@uirouter/angular\";\n *\n * @ Injectable()\n * export class MyUIRouterConfig {\n *   // Constructor is injectable\n *   constructor(uiRouter: UIRouter) {\n *     uiRouter.urlMatcherFactory.type('datetime', myDateTimeParamType);\n *   }\n * }\n * ```\n *\n * @preferred @module ng2\n */\n/** */\n\nimport { Injector, Provider, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport {\n  UIRouter, PathNode, StateRegistry, StateService, TransitionService, UrlMatcherFactory, UrlRouter, ViewService,\n  UrlService, UIRouterGlobals, services, Resolvable, NATIVE_INJECTOR_TOKEN,\n} from '@uirouter/core/index';\nimport { UIView, ParentUIViewInject } from './directives/uiView';\nimport { ng2ViewsBuilder, Ng2ViewConfig } from './statebuilders/views';\nimport { Ng2ViewDeclaration } from './interface';\nimport { applyRootModuleConfig, applyModuleConfig } from './uiRouterConfig';\nimport { RootModule, StatesModule, UIROUTER_ROOT_MODULE, UIROUTER_MODULE_TOKEN } from './uiRouterNgModule';\nimport { servicesPlugin, ServicesPlugin } from '@uirouter/core/index';\nimport { ng2LazyLoadBuilder } from './statebuilders/lazyLoad';\nimport { UIRouterRx } from '@uirouter/rx/index';\nimport { LocationStrategy } from '@angular/common';\nimport { Ng2LocationServices } from './location/locationService';\nimport { Ng2LocationConfig } from './location/locationConfig';\n/**\n * This is a factory function for a UIRouter instance\n * \n * Creates a UIRouter instance and configures it for Angular, then invokes router bootstrap.\n * This function is used as an Angular `useFactory` Provider.\n * @param {?} locationStrategy\n * @param {?} rootModules\n * @param {?} modules\n * @param {?} injector\n * @return {?}\n */\nexport function uiRouterFactory(locationStrategy: LocationStrategy, rootModules: RootModule[], modules: StatesModule[], injector: Injector) {\n  if (rootModules.length !== 1) {\n    throw new Error(\"Exactly one UIRouterModule.forRoot() should be in the bootstrapped app module's imports: []\");\n  }\n\n  // ----------------- Create router -----------------\n  // Create a new ng2 UIRouter and configure it for ng2\n  let /** @type {?} */ router = new UIRouter();\n\n  // Add RxJS plugin\n  router.plugin(UIRouterRx);\n\n  // Add $q-like and $injector-like service APIs\n  router.plugin<ServicesPlugin>(servicesPlugin);\n\n\n  // ----------------- Monkey Patches ----------------\n  // Monkey patch the services.$injector to use the root ng2 Injector\n  services.$injector.get = injector.get.bind(injector);\n\n\n  // ----------------- Configure for ng2 -------------\n  router.locationService = /** @type {?} */(( <any>new Ng2LocationServices( /** @type {?} */((<any>router)), locationStrategy, isPlatformBrowser(injector.get(PLATFORM_ID)))));\n  router.locationConfig = new Ng2LocationConfig(router, locationStrategy);\n\n  // Apply ng2 ui-view handling code\n  let /** @type {?} */ viewConfigFactory = (path: PathNode[], config: Ng2ViewDeclaration) => new Ng2ViewConfig(path, config);\n  router.viewService._pluginapi._viewConfigFactory(\"ng2\", viewConfigFactory);\n\n  // Apply statebuilder decorator for ng2 NgModule registration\n  let /** @type {?} */ registry = router.stateRegistry;\n  registry.decorator('views', ng2ViewsBuilder);\n  registry.decorator('lazyLoad', ng2LazyLoadBuilder);\n\n  // Prep the tree of NgModule by placing the root NgModule's Injector on the root state.\n  let /** @type {?} */ ng2InjectorResolvable = Resolvable.fromData(NATIVE_INJECTOR_TOKEN, injector);\n  registry.root().resolvables.push(ng2InjectorResolvable);\n\n  // Auto-flush the parameter type queue\n  router.urlMatcherFactory.$get();\n\n  // ----------------- Initialize router -------------\n  rootModules.forEach(moduleConfig => applyRootModuleConfig(router, injector, moduleConfig));\n  modules.forEach(moduleConfig => applyModuleConfig(router, injector, moduleConfig));\n\n  // Start monitoring the URL\n  if (!router.urlRouter.interceptDeferred) {\n    router.urlService.listen();\n    router.urlService.sync();\n  }\n\n  return router;\n}\n/**\n * @param {?} r\n * @return {?}\n */\nexport function parentUIViewInjectFactory(r: StateRegistry) { return /** @type {?} */(( { fqn: null, context: r.root() } as ParentUIViewInject)); }\n\nexport const /** @type {?} */ _UIROUTER_INSTANCE_PROVIDERS: Provider[] =  [\n  { provide: UIRouter, useFactory: uiRouterFactory, deps: [LocationStrategy, UIROUTER_ROOT_MODULE, UIROUTER_MODULE_TOKEN, Injector] },\n  { provide: UIView.PARENT_INJECT, useFactory: parentUIViewInjectFactory, deps: [StateRegistry]},\n];\n/**\n * @param {?} r\n * @return {?}\n */\nexport function fnStateService(r: UIRouter) { return r.stateService; }\n/**\n * @param {?} r\n * @return {?}\n */\nexport function fnTransitionService(r: UIRouter) { return r.transitionService; }\n/**\n * @param {?} r\n * @return {?}\n */\nexport function fnUrlMatcherFactory(r: UIRouter) { return r.urlMatcherFactory; }\n/**\n * @param {?} r\n * @return {?}\n */\nexport function fnUrlRouter(r: UIRouter) { return r.urlRouter; }\n/**\n * @param {?} r\n * @return {?}\n */\nexport function fnUrlService(r: UIRouter) { return r.urlService; }\n/**\n * @param {?} r\n * @return {?}\n */\nexport function fnViewService(r: UIRouter) { return r.viewService; }\n/**\n * @param {?} r\n * @return {?}\n */\nexport function fnStateRegistry(r: UIRouter) { return r.stateRegistry; }\n/**\n * @param {?} r\n * @return {?}\n */\nexport function fnGlobals(r: any) { return r.globals; }\n\nexport const /** @type {?} */ _UIROUTER_SERVICE_PROVIDERS: Provider[] = [\n  { provide: StateService,      useFactory: fnStateService,       deps: [UIRouter]},\n  { provide: TransitionService, useFactory: fnTransitionService,  deps: [UIRouter]},\n  { provide: UrlMatcherFactory, useFactory: fnUrlMatcherFactory,  deps: [UIRouter]},\n  { provide: UrlRouter,         useFactory: fnUrlRouter,          deps: [UIRouter]},\n  { provide: UrlService,        useFactory: fnUrlService,         deps: [UIRouter]},\n  { provide: ViewService,       useFactory: fnViewService,        deps: [UIRouter]},\n  { provide: StateRegistry,     useFactory: fnStateRegistry,      deps: [UIRouter]},\n  { provide: UIRouterGlobals,   useFactory: fnGlobals,            deps: [UIRouter]},\n];\n/**\n * The UI-Router providers, for use in your application bootstrap\n * \n * @deprecated use [[UIRouterModule.forRoot]]\n */\nexport const UIROUTER_PROVIDERS: Provider[] = _UIROUTER_INSTANCE_PROVIDERS.concat(_UIROUTER_SERVICE_PROVIDERS);\n","/** @ng2api @module ng2 */ /** for typedoc */\n\nexport {Ng2StateDeclaration,Ng2ViewDeclaration,Ng2Component} from './interface';\nexport {uiRouterFactory,parentUIViewInjectFactory,_UIROUTER_INSTANCE_PROVIDERS,fnStateService,fnTransitionService,fnUrlMatcherFactory,fnUrlRouter,fnUrlService,fnViewService,fnStateRegistry,fnGlobals,_UIROUTER_SERVICE_PROVIDERS,UIROUTER_PROVIDERS} from './providers';\nexport {UIROUTER_ROOT_MODULE,UIROUTER_MODULE_TOKEN,UIROUTER_STATES,onTransitionReady,makeRootProviders,makeChildProviders,locationStrategy,UIRouterModule,RootModule,StatesModule} from './uiRouterNgModule';\nexport {applyModuleConfig,applyRootModuleConfig} from './uiRouterConfig';\nexport {_UIROUTER_DIRECTIVES,UIROUTER_DIRECTIVES,ParentUIViewInject,UIView,AnchorUISref,UISref,SrefStatus,UISrefStatus,UISrefActive} from './directives/directives';\nexport {ng2ViewsBuilder,Ng2ViewConfig} from './statebuilders/views';\nexport {ng2LazyLoadBuilder} from './statebuilders/lazyLoad';\nexport {ModuleTypeCallback,NgModuleToLoad,loadNgModule,loadModuleFactory,applyNgModule,multiProviderParentChildDelta} from './lazyLoad/lazyLoadNgModule';\n\nexport {fromJson,toJson,copy,forEach,extend,equals,identity,noop,Mapper,TypedMap,Predicate,IInjectable,Obj,createProxyFunctions,inherit,inArray,_inArray,removeFrom,_removeFrom,pushTo,_pushTo,deregAll,defaults,mergeR,ancestors,pick,omit,pluck,filter,find,mapObj,map,values,allTrueR,anyTrueR,unnestR,flattenR,pushR,uniqR,unnest,flatten,assertPredicate,assertMap,assertFn,pairs,arrayTuples,applyPairs,tail,_extend,sortfn,sortBy,composeSort,silenceUncaughtInPromise,silentRejection,notImplemented,$QLikeDeferred,$QLike,$InjectorLike,CoreServices,LocationServices,LocationConfig,services,Glob,curry,compose,pipe,prop,propEq,parse,not,and,or,all,any,is,eq,val,invoke,pattern,isUndefined,isDefined,isNull,isNullOrUndefined,isFunction,isNumber,isString,isObject,isArray,isDate,isRegExp,isState,isInjectable,isPromise,Queue,maxLength,padString,kebobString,functionToString,fnToString,stringify,beforeAfterSubstr,splitOnDelim,joinNeighborsR,Category,Trace,trace,RawParams,ParamsOrArray,ParamDeclaration,Replace,ParamTypeDefinition,DefType,Param,ParamTypes,StateParams,ParamType,PathNode,GetParamsFn,PathUtils,ProviderLike,ResolvableLiteral,ResolvePolicy,PolicyWhen,PolicyAsync,resolvePolicies,defaultResolvePolicy,Resolvable,NATIVE_INJECTOR_TOKEN,ResolveContext,StateOrName,TransitionPromise,TargetStateDef,ResolveTypes,_ViewDeclaration,RedirectToResult,StateDeclaration,LazyLoadResult,HrefOptions,_StateDeclaration,BuilderFunction,resolvablesBuilder,StateBuilder,StateObject,StateMatcher,StateQueueManager,StateRegistryListener,StateRegistry,OnInvalidCallback,StateService,TargetState,TransitionOptions,TransitionHookOptions,TreeChanges,IHookRegistration,TransitionHookFn,TransitionStateHookFn,TransitionCreateHookFn,HookFn,HookResult,HookRegOptions,IHookRegistry,IStateMatch,HookMatchCriteria,IMatchingNodes,RegisteredHooks,PathTypes,PathType,HookMatchCriterion,TransitionHookPhase,TransitionHookScope,HookBuilder,matchState,RegisteredHook,makeEvent,RejectType,Rejection,Transition,GetResultHandler,GetErrorHandler,ResultHandler,ErrorHandler,TransitionHook,TransitionEventType,defaultTransOpts,TransitionServicePluginAPI,TransitionService,ParamFactory,UrlConfigApi,UrlMatcherConfig,UrlSyncApi,UrlRulesApi,UrlParts,MatchResult,UrlRuleMatchFn,UrlRuleHandlerFn,UrlRuleType,UrlRule,MatcherUrlRule,StateRule,RegExpRule,UrlMatcher,UrlMatcherFactory,UrlRouter,UrlRuleFactory,BaseUrlRule,UrlService,ViewContext,ActiveUIView,ViewConfig,ViewConfigFactory,ViewServicePluginAPI,ViewService,UIRouterGlobals,UIRouter,PluginFactory,LocationPlugin,ServicesPlugin,LocationLike,HistoryLike,$q,$injector,BaseLocationServices,HashLocationService,MemoryLocationService,PushStateLocationService,MemoryLocationConfig,BrowserLocationConfig,splitHash,splitQuery,splitEqual,trimHashVal,keyValsToObjectR,getParams,parseUrl,buildUrl,locationPluginFactory,servicesPlugin,hashLocationPlugin,pushStateLocationPlugin,memoryLocationPlugin,UIInjector,UIRouterPlugin,UIRouterPluginBase,Disposable} from '@uirouter/core/index';\n","/** @module ng2 */\n/** */\n\n\nimport { UIRouter, is, BrowserLocationConfig } from '@uirouter/core/index';\nimport { LocationStrategy, PathLocationStrategy } from '@angular/common';\nexport class Ng2LocationConfig extends BrowserLocationConfig {\n/**\n * @param {?} router\n * @param {?} _locationStrategy\n */\nconstructor(router: UIRouter,\nprivate _locationStrategy: LocationStrategy) {\n    super(router, is(PathLocationStrategy)(_locationStrategy))\n  }\n/**\n * @param {?=} href\n * @return {?}\n */\nbaseHref(href?: string): string {\n    return this._locationStrategy.getBaseHref();\n  }\n}\n\nfunction Ng2LocationConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nNg2LocationConfig.prototype._locationStrategy;\n}\n\n","/** @module ng2 */\n/** */\n\nimport { BaseLocationServices, parseUrl, UIRouter } from '../core/src/index';\nimport { LocationStrategy } from '@angular/common';\n/**\n * A `LocationServices` that delegates to the Angular LocationStrategy\n */\nexport class Ng2LocationServices extends BaseLocationServices {\n/**\n * @param {?} router\n * @param {?} _locationStrategy\n * @param {?} isBrowser\n */\nconstructor(router: UIRouter,\nprivate _locationStrategy: LocationStrategy, isBrowser: boolean) {\n    super(router, isBrowser);\n\n    this._locationStrategy.onPopState((evt) => {\n      if (evt.type !== 'hashchange') {\n        this._listener(evt);\n      }\n    });\n  }\n/**\n * @return {?}\n */\n_get() {\n    return this._locationStrategy.path(true)\n      .replace(this._locationStrategy.getBaseHref().replace(/\\/$/, ''), '');\n  }\n/**\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @param {?} replace\n * @return {?}\n */\n_set(state: any, title: string, url: string, replace: boolean): any {\n    let { path, search, hash } = parseUrl(url);\n    let /** @type {?} */ urlWithHash = path + (hash ? \"#\" + hash : \"\");\n\n    if (replace) {\n      this._locationStrategy.replaceState(state, title, urlWithHash, search);\n    } else {\n      this._locationStrategy.pushState(state, title, urlWithHash, search);\n    }\n  }\n/**\n * @param {?} router\n * @return {?}\n */\ndispose(router: UIRouter) {\n    super.dispose(router);\n  }\n}\n\nfunction Ng2LocationServices_tsickle_Closure_declarations() {\n/** @type {?} */\nNg2LocationServices.prototype._locationStrategy;\n}\n\n","/** @module ng2 */\n/** */\n\nimport { LazyLoadResult, Transition, StateDeclaration } from '@uirouter/core/index'; // has or is using\n\nimport { BuilderFunction, StateObject } from '@uirouter/core/index';\nimport { loadNgModule } from '../lazyLoad/lazyLoadNgModule';\n/**\n * This is a [[StateBuilder.builder]] function for ngModule lazy loading in Angular.\n * \n * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n * decorates the `lazyLoad` property for states that have a [[Ng2StateDeclaration.ngModule]] declaration.\n * \n * If the state has a [[Ng2StateDeclaration.ngModule]], it will create a `lazyLoad` function\n * that in turn calls `loadNgModule(loadNgModuleFn)`.\n * \n * #### Example:\n * A state that has a `ngModule`\n * ```js\n * var decl = {\n *   ngModule: () => System.import('./childModule.ts')\n * }\n * ```\n * would build a state with a `lazyLoad` function like:\n * ```js\n * import { loadNgModule } from \"\\@uirouter/angular\";\n * var decl = {\n *   lazyLoad: loadNgModule(() => System.import('./childModule.ts')\n * }\n * ```\n * \n * If the state has both a `ngModule:` *and* a `lazyLoad`, then the `lazyLoad` is run first.\n * \n * #### Example:\n * ```js\n * var decl = {\n *   lazyLoad: () => System.import('third-party-library'),\n *   ngModule: () => System.import('./childModule.ts')\n * }\n * ```\n * would build a state with a `lazyLoad` function like:\n * ```js\n * import { loadNgModule } from \"\\@uirouter/angular\";\n * var decl = {\n *   lazyLoad: () => System.import('third-party-library')\n *       .then(() => loadNgModule(() => System.import('./childModule.ts'))\n * }\n * ```\n * \n * @param {?} state\n * @param {?} parent\n * @return {?}\n */\nexport function ng2LazyLoadBuilder(state: StateObject, parent: BuilderFunction) {\n  let /** @type {?} */ loadNgModuleFn = state['loadChildren'];\n  return loadNgModuleFn ? loadNgModule(loadNgModuleFn) : state.lazyLoad;\n}\n","/** @ng2api @module core */\n/** */\n\nimport { NgModuleRef, Injector, NgModuleFactory, Type, Compiler, NgModuleFactoryLoader } from '@angular/core';\nimport {\n  Transition, LazyLoadResult, UIRouter, Resolvable, NATIVE_INJECTOR_TOKEN, isString, unnestR, inArray, StateObject,\n  uniqR\n} from '@uirouter/core/index';\nimport { RootModule, UIROUTER_ROOT_MODULE, UIROUTER_MODULE_TOKEN, StatesModule } from '../uiRouterNgModule';\nimport { applyModuleConfig } from '../uiRouterConfig';\n\n/**\n * A function that returns an NgModule, or a promise for an NgModule\n *\n * #### Example:\n * ```js\n * export function loadFooModule() {\n *   return System.import('../foo/foo.module').then(result => result.FooModule);\n * }\n * ```\n */\nexport type ModuleTypeCallback = () => Type<any> | Promise<Type<any>>;\n/**\n * A string or a function which lazy loads a module\n *\n * If a string, should conform to the Angular Router `loadChildren` string.\n * #### Example:\n * ```\n * var ngModuleToLoad = './foo/foo.module#FooModule'\n * ```\n *\n * For functions, see: [[ModuleTypeCallback]]\n */\nexport type NgModuleToLoad = string | ModuleTypeCallback;\n/**\n * Returns a function which lazy loads a nested module\n * \n * This is primarily used by the [[ng2LazyLoadBuilder]] when processing [[Ng2StateDeclaration.loadChildren]].\n * \n * It could also be used manually as a [[StateDeclaration.lazyLoad]] property to lazy load an `NgModule` and its state(s).\n * \n * #### Example:\n * Using `System.import()` and named export of `HomeModule`\n * ```js\n * declare var System;\n * var futureState = {\n *   name: 'home.**',\n *   url: '/home',\n *   lazyLoad: loadNgModule(() => System.import('./home/home.module').then(result => result.HomeModule))\n * }\n * ```\n * \n * #### Example:\n * Using a path (string) to the module\n * ```js\n * var futureState = {\n *   name: 'home.**',\n *   url: '/home',\n *   lazyLoad: loadNgModule('./home/home.module#HomeModule')\n * }\n * ```\n * \n * \n * @param {?} moduleToLoad a path (string) to the NgModule to load.\n *    Or a function which loads the NgModule code which should\n *    return a reference to  the `NgModule` class being loaded (or a `Promise` for it).\n * \n * @return {?} A function which takes a transition, which:\n * - Gets the Injector (scoped properly for the destination state)\n * - Loads and creates the NgModule\n * - Finds the \"replacement state\" for the target state, and adds the new NgModule Injector to it (as a resolve)\n * - Returns the new states array\n */\nexport function loadNgModule(moduleToLoad: NgModuleToLoad): (transition: Transition) => Promise<LazyLoadResult> {\n  return (transition: Transition) => {\n    const /** @type {?} */ ng2Injector = transition.injector().get(NATIVE_INJECTOR_TOKEN);\n\n    const /** @type {?} */ createModule = (factory: NgModuleFactory<any>) =>\n        factory.create(ng2Injector);\n\n    const /** @type {?} */ applyModule = (moduleRef: NgModuleRef<any>) =>\n        applyNgModule(transition, moduleRef);\n\n    return loadModuleFactory(moduleToLoad, ng2Injector)\n        .then(createModule)\n        .then(applyModule);\n  };\n}\n/**\n * Returns the module factory that can be used to instantiate a module\n * \n * For strings this:\n * - Finds the correct NgModuleFactoryLoader\n * - Loads the new NgModuleFactory from the path string (async)\n * \n * For a Type<any> or Promise<Type<any>> this:\n * - Compiles the component type (if not running with AOT)\n * - Returns the NgModuleFactory resulting from compilation (or direct loading if using AOT) as a Promise\n * \n * \\@internalapi\n * @param {?} moduleToLoad\n * @param {?} ng2Injector\n * @return {?}\n */\nexport function loadModuleFactory(moduleToLoad: NgModuleToLoad, ng2Injector: Injector): Promise<NgModuleFactory<any>> {\n  if (isString(moduleToLoad)) {\n    return ng2Injector.get(NgModuleFactoryLoader).load(moduleToLoad);\n  }\n\n  const /** @type {?} */ compiler: Compiler = ng2Injector.get(Compiler);\n  const /** @type {?} */ offlineMode = compiler instanceof Compiler;\n\n  const /** @type {?} */ unwrapEsModuleDefault = x =>\n      x && x.__esModule && x['default'] ? x['default'] : x;\n  const /** @type {?} */ compileAsync = (moduleType: Type<any>) =>\n      compiler.compileModuleAsync(moduleType);\n\n  const /** @type {?} */ loadChildrenPromise = Promise.resolve(moduleToLoad()).then(unwrapEsModuleDefault);\n  return offlineMode ? loadChildrenPromise : loadChildrenPromise.then(compileAsync);\n}\n/**\n * Apply the UI-Router Modules found in the lazy loaded module.\n * \n * Apply the Lazy Loaded NgModule's newly created Injector to the right state in the state tree.\n * \n * Lazy loading uses a placeholder state which is removed (and replaced) after the module is loaded.\n * The NgModule should include a state with the same name as the placeholder.\n * \n * Find the *newly loaded state* with the same name as the *placeholder state*.\n * The NgModule's Injector (and ComponentFactoryResolver) will be added to that state.\n * The Injector/Factory are used when creating Components for the `replacement` state and all its children.\n * \n * \\@internalapi\n * @param {?} transition\n * @param {?} ng2Module\n * @return {?}\n */\nexport function applyNgModule(transition: Transition, ng2Module: NgModuleRef<any>): LazyLoadResult {\n  let /** @type {?} */ injector = ng2Module.injector;\n  let /** @type {?} */ parentInjector = /** @type {?} */(( <Injector> ng2Module.injector['parent'])) || ng2Module.injector['_parent'];\n  let /** @type {?} */ uiRouter: UIRouter = injector.get(UIRouter);\n  let /** @type {?} */ registry = uiRouter.stateRegistry;\n\n  let /** @type {?} */ originalName = transition.to().name;\n  let /** @type {?} */ originalState = registry.get(originalName);\n  // Check if it's a future state (ends with .**)\n  let /** @type {?} */ isFuture = /^(.*)\\.\\*\\*$/.exec(originalName);\n  // Final name (without the .**)\n  let /** @type {?} */ replacementName = isFuture && isFuture[1];\n\n  let /** @type {?} */ newRootModules = /** @type {?} */(( multiProviderParentChildDelta(parentInjector, injector, UIROUTER_ROOT_MODULE)\n      .reduce(uniqR, []) as RootModule[]));\n  let /** @type {?} */ newChildModules= /** @type {?} */(( multiProviderParentChildDelta(parentInjector, injector, UIROUTER_MODULE_TOKEN)\n      .reduce(uniqR, []) as StatesModule[]));\n\n  if (newRootModules.length) {\n    console.log(newRootModules);\n    throw new Error('Lazy loaded modules should not contain a UIRouterModule.forRoot() module');\n  }\n\n  let /** @type {?} */ newStateObjects: StateObject[] = newChildModules\n      .map(module => applyModuleConfig(uiRouter, injector, module))\n      .reduce(unnestR, [])\n      .reduce(uniqR, []);\n\n  let /** @type {?} */ replacementState = registry.get(replacementName);\n  if (!replacementState || replacementState === originalState) {\n    throw new Error(`The Future State named '${originalName}' lazy loaded an NgModule. ` +\n        `The lazy loaded NgModule must have a state named '${replacementName}' ` +\n        `which replaces the (placeholder) '${originalName}' Future State. ` +\n        `Add a '${replacementName}' state to the lazy loaded NgModule ` +\n        `using UIRouterModule.forChild({ states: CHILD_STATES }).`);\n  }\n\n  // Supply the newly loaded states with the Injector from the lazy loaded NgModule.\n  // If a tree of states is lazy loaded, only add the injector to the root of the lazy loaded tree.\n  // The children will get the injector by resolve inheritance.\n  let /** @type {?} */ newParentStates = newStateObjects.filter(state => !inArray(newStateObjects, state.parent));\n\n  // Add the Injector to the top of the lazy loaded state tree as a resolve\n  newParentStates.forEach(state => state.resolvables.push(Resolvable.fromData(NATIVE_INJECTOR_TOKEN, injector)));\n\n  return {};\n}\n/**\n * Returns the new dependency injection values from the Child Injector\n * \n * When a DI token is defined as multi: true, the child injector\n * can add new values for the token.\n * \n * This function returns the values added by the child injector,  and excludes all values from the parent injector.\n * \n * \\@internalapi\n * @param {?} parent\n * @param {?} child\n * @param {?} token\n * @return {?}\n */\nexport function multiProviderParentChildDelta(parent: Injector, child: Injector, token: any) {\n  let /** @type {?} */ childVals: RootModule[] = child.get(token, []);\n  let /** @type {?} */ parentVals: RootModule[] = parent.get(token, []);\n  return childVals.filter(val => parentVals.indexOf(val) === -1);\n}\n","/** @ng2api @module core */\n/** */\n\nimport { Ng2StateDeclaration } from './interface';\nimport {\n  NgModule, OpaqueToken, ModuleWithProviders, ANALYZE_FOR_ENTRY_COMPONENTS, Provider, Injector, APP_INITIALIZER, PLATFORM_ID,\n} from '@angular/core';\nimport { CommonModule, LocationStrategy, HashLocationStrategy, PathLocationStrategy, isPlatformServer } from '@angular/common';\nimport { _UIROUTER_DIRECTIVES } from './directives/directives';\nimport { UIView } from './directives/uiView';\nimport { UrlRuleHandlerFn, TargetState, TargetStateDef, UIRouter, TransitionService } from '@uirouter/core/index';\nimport { _UIROUTER_INSTANCE_PROVIDERS, _UIROUTER_SERVICE_PROVIDERS } from './providers';\n/**\n * @hidden\n */\nexport const UIROUTER_ROOT_MODULE  = new OpaqueToken(\"UIRouter Root Module\");\n/**\n * @hidden\n */\nexport const UIROUTER_MODULE_TOKEN = new OpaqueToken(\"UIRouter Module\");\n/**\n * @hidden\n */\nexport const UIROUTER_STATES       = new OpaqueToken(\"UIRouter States\");\n/**\n * @param {?} transitionService\n * @param {?} plateformId\n * @return {?}\n */\nexport function onTransitionReady(transitionService: TransitionService, plateformId) {\n    if (isPlatformServer(plateformId)) {\n       return () => Promise.resolve();\n    }\n\n    return () => new Promise(resolve => {\n        let /** @type {?} */ eventHooks = [];\n        ['onSuccess', 'onError'].map(hook => {\n            const /** @type {?} */ unsubscriberEventHook = transitionService[hook]({}, (transition) => {\n                eventHooks.map(unsubscriber => unsubscriber());\n                resolve();\n            });\n            eventHooks.push(unsubscriberEventHook);\n        });\n    });\n}\n/**\n * @param {?} module\n * @return {?}\n */\nexport function makeRootProviders(module: StatesModule): Provider[] {\n    return [\n        { provide: UIROUTER_ROOT_MODULE,         useValue: module,              multi: true},\n        { provide: UIROUTER_MODULE_TOKEN,        useValue: module,              multi: true },\n        // { provide: ROUTES,                       useValue: module.states || [], multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: module.states || [], multi: true },\n        { provide: APP_INITIALIZER, useFactory: onTransitionReady, deps: [TransitionService, PLATFORM_ID], multi: true },\n    ];\n}\n/**\n * @param {?} module\n * @return {?}\n */\nexport function makeChildProviders(module: StatesModule): Provider[] {\n    return [\n        { provide: UIROUTER_MODULE_TOKEN,        useValue: module,              multi: true },\n        // { provide: ROUTES,                       useValue: module.states || [], multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: module.states || [], multi: true },\n    ];\n}\n/**\n * @param {?} useHash\n * @return {?}\n */\nexport function locationStrategy(useHash) {\n    return { provide: LocationStrategy, useClass: useHash ? HashLocationStrategy : PathLocationStrategy };\n}\n/**\n * Creates UI-Router Modules\n * \n * This class has two static factory methods which create UIRouter Modules.\n * A UI-Router Module is an [Angular NgModule](https://angular.io/docs/ts/latest/guide/ngmodule.html)\n * with support for UI-Router.\n * \n * ### UIRouter Directives\n * \n * When a UI-Router Module is imported into a `NgModule`, that module's components\n * can use the UIRouter Directives such as [[UIView]], [[UISref]], [[UISrefActive]].\n * \n * ### State Definitions\n * \n * State definitions found in the `states:` property are provided to the Dependency Injector.\n * This enables UI-Router to automatically register the states with the [[StateRegistry]] at bootstrap (and during lazy load).\n * \n * ### Entry Components\n * \n * Any routed components are added as `entryComponents:` so they will get compiled.\n */\nexport class UIRouterModule {\n/**\n * Creates a UI-Router Module for the root (bootstrapped) application module to import\n * \n * This factory function creates an [Angular NgModule](https://angular.io/docs/ts/latest/guide/ngmodule.html)\n * with UI-Router support.\n * \n * The `forRoot` module should be added to the `imports:` of the `NgModule` being bootstrapped.\n * An application should only create and import a single `NgModule` using `forRoot()`.\n * All other modules should be created using [[UIRouterModule.forChild]].\n * \n * Unlike `forChild`, an `NgModule` returned by this factory provides the [[UIRouter]] singleton object.\n * This factory also accepts root-level router configuration.\n * These are the only differences between `forRoot` and `forChild`.\n * \n * Example:\n * ```js\n * let routerConfig = {\n *   otherwise: '/home',\n *   states: [homeState, aboutState]\n * };\n * \n * \\@ NgModule({\n *   imports: [\n *     BrowserModule,\n *     UIRouterModule.forRoot(routerConfig),\n *     FeatureModule1\n *   ]\n * })\n * class MyRootAppModule {}\n * \n * browserPlatformDynamic.bootstrapModule(MyRootAppModule);\n * ```\n * \n * @param {?=} config declarative UI-Router configuration\n * @return {?} an `NgModule` which provides the [[UIRouter]] singleton instance\n */\nstatic forRoot(config: RootModule = {}): ModuleWithProviders {\n    return {\n      ngModule: UIRouterModule,\n      providers: [\n        _UIROUTER_INSTANCE_PROVIDERS,\n        _UIROUTER_SERVICE_PROVIDERS,\n        locationStrategy(config.useHash),\n        ...makeRootProviders(config),\n      ]\n    };\n  }\n/**\n * Creates an `NgModule` for a UIRouter module\n * \n * This function creates an [Angular NgModule](https://angular.io/docs/ts/latest/guide/ngmodule.html)\n * with UI-Router support.\n * \n * #### Example:\n * ```js\n * var homeState = { name: 'home', url: '/home', component: Home };\n * var aboutState = { name: 'about', url: '/about', component: About };\n * \n * \\@ NgModule({\n *   imports: [\n *     UIRouterModule.forChild({ states: [ homeState, aboutState ] }),\n *     SharedModule,\n *   ],\n *   declarations: [ Home, About ],\n * })\n * export class AppModule {};\n * ```\n * \n * @param {?=} module UI-Router module options\n * @return {?} an `NgModule`\n */\nstatic forChild(module: StatesModule = {}): ModuleWithProviders {\n    return {\n      ngModule: UIRouterModule,\n      providers: makeChildProviders(module),\n    };\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule],\n  declarations: [_UIROUTER_DIRECTIVES],\n  exports: [_UIROUTER_DIRECTIVES],\n  entryComponents: [UIView],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction UIRouterModule_tsickle_Closure_declarations() {\n/** @type {?} */\nUIRouterModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUIRouterModule.ctorParameters;\n}\n\n\n/**\n * UI-Router declarative configuration which can be provided to [[UIRouterModule.forRoot]]\n */\nexport interface RootModule extends StatesModule {\n  /**\n   * Chooses a `LocationStrategy`.\n   *\n   * The location strategy enables either HTML5 Push State\n   * (Requires server-side support) or \"HashBang\" URLs.\n   *\n   * When `false`, uses [`PathLocationStrategy`](https://angular.io/docs/ts/latest/api/common/index/PathLocationStrategy-class.html)\n   * When `true`, uses [`HashLocationStrategy`](https://angular.io/docs/ts/latest/api/common/index/HashLocationStrategy-class.html)\n   *\n   * Defaults to `false`\n   */\n  useHash?: boolean;\n\n  /**\n   * Sets [[UrlRouterProvider.otherwise]].\n   */\n  otherwise?: (string | UrlRuleHandlerFn | TargetState | TargetStateDef);\n\n  /**\n   * Sets [[UrlRouterProvider.deferIntercept]]\n   */\n  deferIntercept?: boolean;\n}\n\n/**\n * UI-Router Module declarative configuration which can be passed to [[UIRouterModule.forChild]]\n */\nexport interface StatesModule {\n  /**\n   * The module's UI-Router states\n   *\n   * This list of [[Ng2StateDeclaration]] objects will be registered with the [[StateRegistry]].\n   * Also, the components that the states route to will be added to `entryComponents` so they will be compiled.\n   */\n  states?: Ng2StateDeclaration[];\n\n  /**\n   * A UI-Router Module's imperative configuration\n   *\n   * If a UI-Router Module needs to perform some configuration (such as registering\n   * parameter types or Transition Hooks) a `configFn` should be supplied.\n   * The function will be passed the `UIRouter` instance, the module's `Injector`,\n   * and the module object.\n   *\n   * #### Example:\n   * ```js\n   * import { Injector } from \"@angular/core\";\n   * import { UIRouter } from \"@uirouter/angular\";\n   * import { requireAuthHook } from \"./requireAuthHook\";\n   * import { MyService } from \"./myService\";\n   *\n   * export function configureMyModule(uiRouter: UIRouter, injector: Injector, module: StatesModule) {\n   *   // Get UIRouter services off the UIRouter object\n   *   let urlConfig = uiRouter.urlService.config;\n   *   let transitionService = uiRouter.transitionService;\n   *   uiRouter.trace.enable(\"TRANSITION\");\n   *\n   *   transitionService.onBefore({ to: (state) => state.requiresAuth }, requireAuthHook);\n   *\n   *   // Create a slug type based on the string type\n   *   let builtInStringType = urlConfig.type('string');\n   *   let slugType = Object.assign({}, builtInStringType, { encode: (str) => str, decode: (str) => str });\n   *   urlConfig.type('slug', slugType);\n   *\n   *   // Inject arbitrary services from DI using the Injector argument\n   *   let myService: MyService = injector.get(MyService)\n   *   myService.useFastMode();\n   * }\n   * ```\n   *\n   * ```js\n   * @NgModule({\n   *   imports: [\n   *     UIRouterModule.forChild({ states: STATES, config: configureMyModule });\n   *   ]\n   * })\n   * class MyModule {}\n   * ```\n   */\n  config?: (uiRouterInstance: UIRouter, injector: Injector, module: StatesModule) => any;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * The UI-Router for Angular directives:\n *\n * - [[UIView]]: A viewport for routed components\n * - [[UISref]]: A state ref to a target state; navigates when clicked\n * - [[UISrefActive]]: (and `UISrefActiveEq`) Adds a css class when a UISref's target state (or a child state) is active\n *\n * @ng2api\n * @preferred\n * @module directives\n */ /** */\n\nimport {UISref, AnchorUISref} from './uiSref';\nimport {UISrefActive} from './uiSrefActive';\nimport {UIView} from './uiView';\nimport {UISrefStatus} from './uiSrefStatus';\n\nexport {ParentUIViewInject,UIView} from './uiView';\nexport {AnchorUISref,UISref} from './uiSref';\nexport {SrefStatus,UISrefStatus} from './uiSrefStatus';\nexport {UISrefActive} from './uiSrefActive';\n/**\n * \\@internalapi\n */\nexport const _UIROUTER_DIRECTIVES = [UISref, AnchorUISref, UIView, UISrefActive, UISrefStatus];\n/**\n * References to the UI-Router directive classes, for use within a \\@Component's `directives:` property\n * @deprecated use [[UIRouterModule]]\n * \\@internalapi\n */\nexport const UIROUTER_DIRECTIVES = _UIROUTER_DIRECTIVES;\n","/** @ng2api @module directives */ /** */\n\nimport {Directive, Input, ElementRef, Host, Renderer} from '@angular/core';\nimport {UISrefStatus, SrefStatus} from './uiSrefStatus';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * A directive that adds a CSS class when its associated `uiSref` link is active.\n * \n * ### Purpose\n * \n * This directive should be paired with one (or more) [[UISref]] directives.\n * It will apply a CSS class to its element when the state the `uiSref` targets is activated.\n * \n * This can be used to create navigation UI where the active link is highlighted.\n * \n * ### Selectors\n * \n * - `[uiSrefActive]`: When this selector is used, the class is added when the target state or any\n * child of the target state is active\n * - `[uiSrefActiveEq]`: When this selector is used, the class is added when the target state is\n * exactly active (the class is not added if a child of the target state is active).\n * \n * ### Inputs\n * \n * - `uiSrefActive`/`uiSrefActiveEq`: one or more CSS classes to add to the element, when the `uiSref` is active\n * \n * #### Example:\n * The anchor tag has the `active` class added when the `foo` state is active.\n * ```html\n * <a uiSref=\"foo\" uiSrefActive=\"active\">Foo</a>\n * ```\n * \n * ### Matching parameters\n * \n * If the `uiSref` includes parameters, the current state must be active, *and* the parameter values must match.\n * \n * #### Example:\n * The first anchor tag has the `active` class added when the `foo.bar` state is active and the `id` parameter\n * equals 25.\n * The second anchor tag has the `active` class added when the `foo.bar` state is active and the `id` parameter\n * equals 32.\n * ```html\n * <a uiSref=\"foo.bar\" [uiParams]=\"{ id: 25 }\" uiSrefActive=\"active\">Bar #25</a>\n * <a uiSref=\"foo.bar\" [uiParams]=\"{ id: 32 }\" uiSrefActive=\"active\">Bar #32</a>\n * ```\n * \n * #### Example:\n * A list of anchor tags are created for a list of `bar` objects.\n * An anchor tag will have the `active` class when `foo.bar` state is active and the `id` parameter matches\n * that object's `id`.\n * ```html\n * <li *ngFor=\"let bar of bars\">\n *   <a uiSref=\"foo.bar\" [uiParams]=\"{ id: bar.id }\" uiSrefActive=\"active\">Bar #{{ bar.id }}</a>\n * </li>\n * ```\n * \n * ### Multiple uiSrefs\n * \n * A single `uiSrefActive` can be used for multiple `uiSref` links.\n * This can be used to create (for example) a drop down navigation menu, where the menui is highlighted\n * if *any* of its inner links are active.\n * \n * The `uiSrefActive` should be placed on an ancestor element of the `uiSref` list.\n * If anyof the `uiSref` links are activated, the class will be added to the ancestor element.\n * \n * #### Example:\n * This is a dropdown nagivation menu for \"Admin\" states.\n * When any of `admin.users`, `admin.groups`, `admin.settings` are active, the `<li>` for the dropdown\n * has the `dropdown-child-active` class applied.\n * Additionally, the active anchor tag has the `active` class applied.\n * ```html\n * <ul class=\"dropdown-menu\">\n *   <li uiSrefActive=\"dropdown-child-active\" class=\"dropdown admin\">\n *     Admin\n *     <ul>\n *       <li><a uiSref=\"admin.users\" uiSrefActive=\"active\">Users</a></li>\n *       <li><a uiSref=\"admin.groups\" uiSrefActive=\"active\">Groups</a></li>\n *       <li><a uiSref=\"admin.settings\" uiSrefActive=\"active\">Settings</a></li>\n *     </ul>\n *   </li>\n * </ul>\n * ```\n */\nexport class UISrefActive {\nprivate _classes: string[] = [];\n/**\n * @param {?} val\n * @return {?}\n */\nset active(val: string) { this._classes = val.split(\"\\s+\"); }\nprivate _classesEq: string[] = [];\n/**\n * @param {?} val\n * @return {?}\n */\nset activeEq(val: string) { this._classesEq = val.split(\"\\s+\"); }\nprivate _subscription: Subscription;\n/**\n * @param {?} uiSrefStatus\n * @param {?} rnd\n * @param {?} host\n */\nconstructor(uiSrefStatus: UISrefStatus, rnd: Renderer,  host: ElementRef) {\n    this._subscription = uiSrefStatus.uiSrefStatus.subscribe((next: SrefStatus) => {\n      this._classes.forEach(cls => rnd.setElementClass(host.nativeElement, cls, next.active));\n      this._classesEq.forEach(cls => rnd.setElementClass(host.nativeElement, cls, next.exact));\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._subscription.unsubscribe();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[uiSrefActive],[uiSrefActiveEq]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: UISrefStatus, },\n{type: Renderer, },\n{type: ElementRef, decorators: [{ type: Host }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'active': [{ type: Input, args: ['uiSrefActive', ] },],\n'activeEq': [{ type: Input, args: ['uiSrefActiveEq', ] },],\n};\n}\n\nfunction UISrefActive_tsickle_Closure_declarations() {\n/** @type {?} */\nUISrefActive.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUISrefActive.ctorParameters;\n/** @type {?} */\nUISrefActive.propDecorators;\n/** @type {?} */\nUISrefActive.prototype._classes;\n/** @type {?} */\nUISrefActive.prototype._classesEq;\n/** @type {?} */\nUISrefActive.prototype._subscription;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/** @ng2api @module directives */\n/** */\n\nimport { Directive, Output, EventEmitter, ContentChildren, QueryList } from '@angular/core';\nimport { UISref } from './uiSref';\nimport {\n  PathNode, Transition, TargetState, StateObject, anyTrueR, tail, unnestR, Predicate, UIRouterGlobals, Param, PathUtils,\n} from '../core/src/index';\n\nimport { Subscription } from 'rxjs/Subscription';\nimport { Observable } from 'rxjs/Observable';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nimport {of} from 'rxjs/observable/of';\nimport {fromPromise} from 'rxjs/observable/fromPromise';\nimport {combineLatest} from 'rxjs/observable/combineLatest';\nimport {switchMap} from 'rxjs/operator/switchMap';\nimport {map} from 'rxjs/operator/map';\nimport {concat} from 'rxjs/operator/concat';\n\n/** @internalapi */\ninterface TransEvt { evt: string; trans: Transition; }\n\n/**\n * UISref status emitted from [[UISrefStatus]]\n */\nexport interface SrefStatus {\n  /** The sref's target state (or one of its children) is currently active */\n  active: boolean;\n  /** The sref's target state is currently active */\n  exact: boolean;\n  /** A transition is entering the sref's target state */\n  entering: boolean;\n  /** A transition is exiting the sref's target state */\n  exiting: boolean;\n}\n/**\n * \\@internalapi\n */\nconst inactiveStatus: SrefStatus = {\n  active: false,\n  exact: false,\n  entering: false,\n  exiting: false,\n};\n/**\n * Returns a Predicate<PathNode[]>\n * \n * The predicate returns true when the target state (and param values)\n * match the (tail of) the path, and the path's param values\n * \n * \\@internalapi\n */\nconst pathMatches = (target: TargetState): Predicate<PathNode[]> => {\n  if (!target.exists()) return () => false;\n  let state: StateObject = target.$state();\n  let targetParamVals = target.params();\n  let targetPath: PathNode[] = PathUtils.buildPath(target);\n  let paramSchema: Param[] = targetPath.map(node => node.paramSchema)\n      .reduce(unnestR, [])\n      .filter((param: Param) => targetParamVals.hasOwnProperty(param.id));\n\n  return (path: PathNode[]) => {\n    let tailNode = tail(path);\n    if (!tailNode || tailNode.state !== state) return false;\n    let paramValues = PathUtils.paramValues(path);\n    return Param.equals(paramSchema, paramValues, targetParamVals);\n  };\n};\n/**\n * Given basePath: [a, b], appendPath: [c, d]),\n * Expands the path to [c], [c, d]\n * Then appends each to [a,b,] and returns: [a, b, c], [a, b, c, d]\n * \n * \\@internalapi\n * @param {?} basePath\n * @param {?} appendPath\n * @return {?}\n */\nfunction spreadToSubPaths(basePath: PathNode[], appendPath: PathNode[]): PathNode[][] {\n  return appendPath.map(node => basePath.concat(PathUtils.subPath(appendPath, n => n.state === node.state)));\n}\n/**\n * Given a TransEvt (Transition event: started, success, error)\n * and a UISref Target State, return a SrefStatus object\n * which represents the current status of that Sref:\n * active, activeEq (exact match), entering, exiting\n * \n * \\@internalapi\n * @param {?} event\n * @param {?} srefTarget\n * @return {?}\n */\nfunction getSrefStatus(event: TransEvt, srefTarget: TargetState): SrefStatus {\n  const /** @type {?} */ pathMatchesTarget = pathMatches(srefTarget);\n  const /** @type {?} */ tc = event.trans.treeChanges();\n\n  let /** @type {?} */ isStartEvent = event.evt === 'start';\n  let /** @type {?} */ isSuccessEvent = event.evt === 'success';\n  let /** @type {?} */ activePath: PathNode[] = isSuccessEvent ? tc.to : tc.from;\n\n  const /** @type {?} */ isActive = () =>\n      spreadToSubPaths([], activePath)\n          .map(pathMatchesTarget)\n          .reduce(anyTrueR, false);\n\n  const /** @type {?} */ isExact = () =>\n      pathMatchesTarget(activePath);\n\n  const /** @type {?} */ isEntering = () =>\n      spreadToSubPaths(tc.retained, tc.entering)\n          .map(pathMatchesTarget)\n          .reduce(anyTrueR, false);\n\n  const /** @type {?} */ isExiting = () =>\n      spreadToSubPaths(tc.retained, tc.exiting)\n          .map(pathMatchesTarget)\n          .reduce(anyTrueR, false);\n\n  return /** @type {?} */(( {\n    active: isActive(),\n    exact: isExact(),\n    entering: isStartEvent ? isEntering() : false,\n    exiting: isStartEvent ? isExiting() : false,\n  } as SrefStatus));\n}\n/**\n * \\@internalapi\n * @param {?} left\n * @param {?} right\n * @return {?}\n */\nfunction mergeSrefStatus(left: SrefStatus, right: SrefStatus) {\n  return {\n    active:   left.active   || right.active,\n    exact:    left.exact    || right.exact,\n    entering: left.entering || right.entering,\n    exiting:  left.exiting  || right.exiting,\n  };\n}\n/**\n * A directive which emits events when a paired [[UISref]] status changes.\n * \n * This directive is primarily used by the [[UISrefActive]] directives to monitor `UISref`(s).\n * \n * This directive shares two attribute selectors with `UISrefActive`:\n * \n * - `[uiSrefActive]`\n * - `[uiSrefActiveEq]`.\n * \n * Thus, whenever a `UISrefActive` directive is created, a `UISrefStatus` directive is also created.\n * \n * Most apps should simply use `UISrefActive`, but some advanced components may want to process the\n * [[SrefStatus]] events directly.\n * \n * ```js\n * <li (uiSrefStatus)=\"onSrefStatusChanged($event)\">\n *   <a uiSref=\"book\" [uiParams]=\"{ bookId: book.id }\">Book {{ book.name }}</a>\n * </li>\n * ```\n * \n * The `uiSrefStatus` event is emitted whenever an enclosed `uiSref`'s status changes.\n * The event emitted is of type [[SrefStatus]], and has boolean values for `active`, `exact`, `entering`, and `exiting`.\n * \n * The values from this event can be captured and stored on a component (then applied, e.g., using ngClass).\n * \n * ---\n * \n * A single `uiSrefStatus` can enclose multiple `uiSref`.\n * Each status boolean (`active`, `exact`, `entering`, `exiting`) will be true if *any of the enclosed `uiSref` status is true*.\n * In other words, all enclosed `uiSref` statuses  are merged to a single status using `||` (logical or).\n * \n * ```js\n * <li (uiSrefStatus)=\"onSrefStatus($event)\" uiSref=\"admin\">\n *   Home\n *   <ul>\n *     <li> <a uiSref=\"admin.users\">Users</a> </li>\n *     <li> <a uiSref=\"admin.groups\">Groups</a> </li>\n *   </ul>\n * </li>\n * ```\n * \n * In the above example, `$event.active === true` when either `admin.users` or `admin.groups` is active.\n * \n * ---\n * \n * This API is subject to change.\n */\nexport class UISrefStatus {\n/**\n * current statuses of the state/params the uiSref directive is linking to\n */\nuiSrefStatus = new EventEmitter<SrefStatus>(false);\n/**\n * Monitor all child components for UISref(s)\n */\nsrefs: QueryList<UISref>;\n/**\n * The current status\n */\nstatus: SrefStatus;\n/**\n * \\@internalapi\n */\nprivate _subscription: Subscription;\n/**\n * \\@internalapi\n */\nprivate _srefChangesSub: Subscription;\n/**\n * \\@internalapi\n */\nprivate _srefs$: BehaviorSubject<UISref[]>;\n/**\n * \\@internalapi\n */\nprivate _globals: UIRouterGlobals;\n/**\n * @param {?} _globals\n */\nconstructor(_globals: UIRouterGlobals) {\n    this._globals = _globals;\n    this.status = Object.assign({}, inactiveStatus);\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    // Map each transition start event to a stream of:\n    // start -> (success|error)\n    let /** @type {?} */ transEvents$: Observable<TransEvt> = switchMap.call(( /** @type {?} */((this._globals as any))).start$, (trans: Transition) => {\n      const /** @type {?} */ event = (evt: string) => ( /** @type {?} */(({evt, trans} as TransEvt)));\n\n      let /** @type {?} */ transStart$ = of(event(\"start\"));\n      let /** @type {?} */ transResult = trans.promise.then(() => event(\"success\"), () => event(\"error\"));\n      let /** @type {?} */ transFinish$ = fromPromise(transResult);\n\n      return concat.call(transStart$, transFinish$);\n    });\n\n    // Watch the @ContentChildren UISref[] components and get their target states\n\n    // let srefs$: Observable<UISref[]> = of(this.srefs.toArray()).concat(this.srefs.changes);\n    this._srefs$ = new BehaviorSubject(this.srefs.toArray());\n    this._srefChangesSub = this.srefs.changes.subscribe(srefs => this._srefs$.next(srefs));\n\n    let /** @type {?} */ targetStates$: Observable<TargetState[]> =\n        switchMap.call(this._srefs$, (srefs: UISref[]) =>\n            combineLatest<TargetState[]>(srefs.map(sref => sref.targetState$)));\n\n    // Calculate the status of each UISref based on the transition event.\n    // Reduce the statuses (if multiple) by or-ing each flag.\n    this._subscription = switchMap.call(transEvents$, (evt: TransEvt) => {\n      return map.call(targetStates$, (targets: TargetState[]) => {\n        let /** @type {?} */ statuses: SrefStatus[] = targets.map(target => getSrefStatus(evt, target));\n        return statuses.reduce(mergeSrefStatus);\n      });\n    }).subscribe(this._setStatus.bind(this));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._subscription) this._subscription.unsubscribe();\n    if (this._srefChangesSub) this._srefChangesSub.unsubscribe();\n    if (this._srefs$) this._srefs$.unsubscribe();\n    this._subscription = this._srefChangesSub = this._srefs$ = undefined;\n  }\n/**\n * @param {?} status\n * @return {?}\n */\nprivate _setStatus(status: SrefStatus) {\n    this.status = status;\n    this.uiSrefStatus.emit(status);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{ selector: '[uiSrefStatus],[uiSrefActive],[uiSrefActiveEq]' }, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: UIRouterGlobals, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'uiSrefStatus': [{ type: Output, args: [\"uiSrefStatus\", ] },],\n'srefs': [{ type: ContentChildren, args: [UISref, {descendants: true}, ] },],\n};\n}\n\nfunction UISrefStatus_tsickle_Closure_declarations() {\n/** @type {?} */\nUISrefStatus.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUISrefStatus.ctorParameters;\n/** @type {?} */\nUISrefStatus.propDecorators;\n/**\n * current statuses of the state/params the uiSref directive is linking to\n * @type {?}\n */\nUISrefStatus.prototype.uiSrefStatus;\n/**\n * Monitor all child components for UISref(s)\n * @type {?}\n */\nUISrefStatus.prototype.srefs;\n/**\n * The current status\n * @type {?}\n */\nUISrefStatus.prototype.status;\n/**\n * \\@internalapi\n * @type {?}\n */\nUISrefStatus.prototype._subscription;\n/**\n * \\@internalapi\n * @type {?}\n */\nUISrefStatus.prototype._srefChangesSub;\n/**\n * \\@internalapi\n * @type {?}\n */\nUISrefStatus.prototype._srefs$;\n/**\n * \\@internalapi\n * @type {?}\n */\nUISrefStatus.prototype._globals;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/** @ng2api @module directives */\n/** */\n\nimport { UIRouter, extend, Obj, TransitionOptions, TargetState } from '@uirouter/core/index';\nimport { Directive, Inject, Input, Optional, ElementRef, Renderer2 } from '@angular/core';\nimport { UIView, ParentUIViewInject } from './uiView';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\nimport { Subscription } from 'rxjs/Subscription';\n/**\n * \\@internalapi \n * # blah blah blah\n */\nexport class AnchorUISref {\n/**\n * @param {?} _el\n * @param {?} _renderer\n */\nconstructor(public _el: ElementRef,\npublic _renderer: Renderer2) { }\n/**\n * @return {?}\n */\nopenInNewTab() {\n    return this._el.nativeElement.target === '_blank';\n  }\n/**\n * @param {?} href\n * @return {?}\n */\nupdate(href: string) {\n    if (href && href !== '') {\n      this._renderer.setProperty(this._el.nativeElement, 'href', href);\n    } else {\n      this._renderer.removeAttribute(this._el.nativeElement, 'href');\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{ selector: 'a[uiSref]' }, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction AnchorUISref_tsickle_Closure_declarations() {\n/** @type {?} */\nAnchorUISref.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAnchorUISref.ctorParameters;\n/** @type {?} */\nAnchorUISref.prototype._el;\n/** @type {?} */\nAnchorUISref.prototype._renderer;\n}\n\n/**\n * A directive when clicked, initiates a [[Transition]] to a [[TargetState]].\n * \n * ### Purpose\n * \n * This directive is applied to anchor tags (`<a>`) or any other clickable element.  It is a state reference (or sref --\n * similar to an href).  When clicked, the directive will transition to that state by calling [[StateService.go]],\n * and optionally supply state parameter values and transition options.\n * \n * When this directive is on an anchor tag, it will also add an `href` attribute to the anchor.\n * \n * ### Selector\n * \n * - `[uiSref]`: The directive is created as an attribute on an element, e.g., `<a uiSref></a>`\n * \n * ### Inputs\n * \n * - `uiSref`: the target state's name, e.g., `uiSref=\"foostate\"`.  If a component template uses a relative `uiSref`,\n * e.g., `uiSref=\".child\"`, the reference is relative to that component's state.\n * \n * - `uiParams`: any target state parameter values, as an object, e.g., `[uiParams]=\"{ fooId: bar.fooId }\"`\n * \n * - `uiOptions`: [[TransitionOptions]], e.g., `[uiOptions]=\"{ inherit: false }\"`\n * \n * \\@example \n * ```html\n * \n * <!-- Targets bar state' -->\n * <a uiSref=\"bar\">Bar</a>\n * \n * <!-- Assume this component's state is \"foo\".\n *      Relatively targets \"foo.child\" -->\n * <a uiSref=\".child\">Foo Child</a>\n * \n * <!-- Targets \"bar\" state and supplies parameter value -->\n * <a uiSref=\"bar\" [uiParams]=\"{ barId: foo.barId }\">Bar {{foo.barId}}</a>\n * \n * <!-- Targets \"bar\" state and parameter, doesn't inherit existing parameters-->\n * <a uiSref=\"bar\" [uiParams]=\"{ barId: foo.barId }\" [uiOptions]=\"{ inherit: false }\">Bar {{foo.barId}}</a>\n * ```\n */\nexport class UISref {\n/**\n * `\\@Input('uiSref')` The name of the state to link to\n * \n * ```html\n * <a uiSref=\"hoome\">Home</a>\n * ```\n */\nstate: string;\n/**\n * `\\@Input('uiParams')` The parameter values to use (as key/values)\n * \n * ```html\n * <a uiSref=\"book\" [uiParams]=\"{ bookId: book.id }\">Book {{ book.name }}</a>\n * ```\n */\nparams: any;\n/**\n * `\\@Input('uiOptions')` The transition options\n * \n * ```html\n * <a uiSref=\"books\" [uiOptions]=\"{ reload: true }\">Book {{ book.name }}</a>\n * ```\n */\noptions: TransitionOptions;\n/**\n * An observable (ReplaySubject) of the state this UISref is targeting.\n * When the UISref is clicked, it will transition to this [[TargetState]].\n */\npublic targetState$ = new ReplaySubject<TargetState>(1);\n/**\n * \\@internalapi\n */\nprivate _emit: boolean = false;\n/**\n * \\@internalapi\n */\nprivate _statesSub: Subscription;\n/**\n * \\@internalapi\n */\nprivate _router: UIRouter;\n/**\n * \\@internalapi\n */\nprivate _anchorUISref: AnchorUISref;\n/**\n * \\@internalapi\n */\npublic parent: ParentUIViewInject;\n/**\n * @param {?} _router\n * @param {?} _anchorUISref\n * @param {?} parent\n */\nconstructor(\n      _router: UIRouter,\n       _anchorUISref: AnchorUISref,\n       parent: ParentUIViewInject,\n  ) {\n    this._router = _router;\n    this._anchorUISref = _anchorUISref;\n    this.parent = parent;\n\n    this._statesSub = _router.globals.states$.subscribe(() => this.update());\n  }\n/**\n * \\@internalapi\n * @param {?} val\n * @return {?}\n */\nset \"uiSref\"(val: string) { this.state = val; this.update(); }\n/**\n * \\@internalapi\n * @param {?} val\n * @return {?}\n */\nset \"uiParams\"(val: Obj) { this.params = val; this.update(); }\n/**\n * \\@internalapi\n * @param {?} val\n * @return {?}\n */\nset \"uiOptions\"(val: TransitionOptions) { this.options = val; this.update(); }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._emit = true;\n    this.update();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._emit = false;\n    this._statesSub.unsubscribe();\n    this.targetState$.unsubscribe();\n  }\n/**\n * @return {?}\n */\nupdate() {\n    let /** @type {?} */ $state = this._router.stateService;\n    if (this._emit) {\n      let /** @type {?} */ newTarget = $state.target(this.state, this.params, this.getOptions());\n      this.targetState$.next(newTarget);\n    }\n\n    if (this._anchorUISref) {\n      let /** @type {?} */ href = $state.href(this.state, this.params, this.getOptions());\n      this._anchorUISref.update(href);\n    }\n  }\n/**\n * @return {?}\n */\ngetOptions() {\n    let /** @type {?} */ defaultOpts: TransitionOptions = {\n      relative: this.parent && this.parent.context && this.parent.context.name,\n      inherit: true ,\n      source: \"sref\"\n    };\n    return extend(defaultOpts, this.options || {});\n  }\n/**\n * When triggered by a (click) event, this function transitions to the UISref's target state\n * @return {?}\n */\ngo() {\n    if (this._anchorUISref && this._anchorUISref.openInNewTab()) {\n      return ;\n    }\n\n    this._router.stateService.go(this.state, this.params, this.getOptions());\n    return false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[uiSref]',\n  host: { '(click)': 'go()' }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: UIRouter, },\n{type: AnchorUISref, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [UIView.PARENT_INJECT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'state': [{ type: Input, args: ['uiSref', ] },],\n'params': [{ type: Input, args: ['uiParams', ] },],\n'options': [{ type: Input, args: ['uiOptions', ] },],\n};\n}\n\nfunction UISref_tsickle_Closure_declarations() {\n/** @type {?} */\nUISref.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUISref.ctorParameters;\n/** @type {?} */\nUISref.propDecorators;\n/**\n * `\\@Input('uiSref')` The name of the state to link to\n * \n * ```html\n * <a uiSref=\"hoome\">Home</a>\n * ```\n * @type {?}\n */\nUISref.prototype.state;\n/**\n * `\\@Input('uiParams')` The parameter values to use (as key/values)\n * \n * ```html\n * <a uiSref=\"book\" [uiParams]=\"{ bookId: book.id }\">Book {{ book.name }}</a>\n * ```\n * @type {?}\n */\nUISref.prototype.params;\n/**\n * `\\@Input('uiOptions')` The transition options\n * \n * ```html\n * <a uiSref=\"books\" [uiOptions]=\"{ reload: true }\">Book {{ book.name }}</a>\n * ```\n * @type {?}\n */\nUISref.prototype.options;\n/**\n * An observable (ReplaySubject) of the state this UISref is targeting.\n * When the UISref is clicked, it will transition to this [[TargetState]].\n * @type {?}\n */\nUISref.prototype.targetState$;\n/**\n * \\@internalapi\n * @type {?}\n */\nUISref.prototype._emit;\n/**\n * \\@internalapi\n * @type {?}\n */\nUISref.prototype._statesSub;\n/**\n * \\@internalapi\n * @type {?}\n */\nUISref.prototype._router;\n/**\n * \\@internalapi\n * @type {?}\n */\nUISref.prototype._anchorUISref;\n/**\n * \\@internalapi\n * @type {?}\n */\nUISref.prototype.parent;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/** @module ng2 */ /** */\n\nimport { UIRouter, isFunction, StateObject } from '@uirouter/core/index';\nimport {StatesModule, RootModule} from './uiRouterNgModule';\nimport {Injector} from '@angular/core';\nimport {isDefined} from '@uirouter/core/index';\n/**\n * @param {?} uiRouter\n * @param {?} injector\n * @param {?=} module\n * @return {?}\n */\nexport function applyModuleConfig(uiRouter: UIRouter, injector: Injector, module: StatesModule = {}): StateObject[] {\n  if (isFunction(module.config)) {\n    module.config(uiRouter, injector, module);\n  }\n\n  let /** @type {?} */ states = module.states || [];\n  return states.map(state => uiRouter.stateRegistry.register(state));\n}\n/**\n * @param {?} uiRouter\n * @param {?} injector\n * @param {?} module\n * @return {?}\n */\nexport function applyRootModuleConfig(uiRouter: UIRouter, injector: Injector, module: RootModule) {\n  isDefined(module.deferIntercept) && uiRouter.urlService.deferIntercept(module.deferIntercept);\n  isDefined(module.otherwise)      && uiRouter.urlService.rules.otherwise(module.otherwise);\n}\n\n\n","/** @ng2api @module directives */\n/** */\n\nimport {\n  Component, ComponentFactoryResolver, ViewContainerRef, Input, ComponentRef, Type, ReflectiveInjector, ViewChild,\n  Injector, Inject, ComponentFactory,\n} from '@angular/core';\n\nimport {\n  UIRouter, isFunction, Transition, parse, TransitionHookFn, StateDeclaration, inArray, trace, ViewContext, ViewConfig,\n  ActiveUIView, ResolveContext, NATIVE_INJECTOR_TOKEN, flattenR,\n} from '../core/src/index';\nimport { Ng2ViewConfig } from '../statebuilders/views';\nimport { MergeInjector } from '../mergeInjector';\n/**\n * @hidden\n */\nlet id = 0;\n\n/** @internalapi These are provide()d as the string UIView.PARENT_INJECT */\nexport interface ParentUIViewInject {\n  context: ViewContext;\n  fqn: string;\n}\n\n/** @internalapi */\ninterface InputMapping {\n  token: string;\n  prop: string;\n}\n/**\n * Given a component class, gets the inputs of styles:\n * \n * - \\@Input('foo') _foo\n * - `inputs: ['foo']`\n * \n * \\@internalapi\n */\nconst ng2ComponentInputs = (factory: ComponentFactory<any>): InputMapping[] => {\n  return factory.inputs.map(input => ({ prop: input.propName, token: input.templateName }));\n};\n/**\n * A UI-Router viewport directive, which is filled in by a view (component) on a state.\n * \n * ### Selector\n * \n * A `ui-view` directive can be created as an element: `<ui-view></ui-view>` or as an attribute: `<div ui-view></div>`.\n * \n * ### Purpose\n * \n * This directive is used in a Component template (or as the root component) to create a viewport.  The viewport\n * is filled in by a view (as defined by a [[Ng2ViewDeclaration]] inside a [[Ng2StateDeclaration]]) when the view's\n * state has been activated.\n * \n * #### Example:\n * ```js\n * // This app has two states, 'foo' and 'bar'\n * stateRegistry.register({ name: 'foo', url: '/foo', component: FooComponent });\n * stateRegistry.register({ name: 'bar', url: '/bar', component: BarComponent });\n * ```\n * ```html\n * <!-- This ui-view will be filled in by the foo state's component or\n *      the bar state's component when the foo or bar state is activated -->\n * <ui-view></ui-view>\n * ```\n * \n * ### Named ui-views\n * \n * A `ui-view` may optionally be given a name via the attribute value: `<div ui-view='header'></div>`.  *Note:\n * an unnamed `ui-view` is internally named `$default`*.   When a `ui-view` has a name, it will be filled in\n * by a matching named view.\n * \n * #### Example:\n * ```js\n * stateRegistry.register({\n *   name: 'foo',\n *   url: '/foo',\n *   views: { header: HeaderComponent, $default: FooComponent });\n * ```\n * ```html\n * <!-- When 'foo' state is active, filled by HeaderComponent -->\n * <div ui-view=\"header\"></div>\n * \n * <!-- When 'foo' state is active, filled by FooComponent -->\n * <ui-view></ui-view>\n * ```\n */\nexport class UIView {\n   componentTarget: ViewContainerRef;\n   name: string;\n/**\n * @param {?} val\n * @return {?}\n */\nset _name(val: string) { this.name = val; }\n/**\n * The reference to the component currently inside the viewport\n */\ncomponentRef: ComponentRef<any>;\n/**\n * Deregisters the ui-view from the view service\n */\nderegisterUIView: Function;\n/**\n * Deregisters the master uiCanExit transition hook\n */\nderegisterHook: Function;\n/**\n * Data about the this UIView\n */\nuiViewData: ActiveUIView = <any> {};\n  parent: ParentUIViewInject;\n\n  static PARENT_INJECT = \"UIView.PARENT_INJECT\";\n/**\n * @param {?} router\n * @param {?} parent\n * @param {?} viewContainerRef\n */\nconstructor(\npublic router: UIRouter,\n       parent,\npublic viewContainerRef: ViewContainerRef,\n  ) {\n    this.parent = parent;\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    const /** @type {?} */ router = this.router;\n    const /** @type {?} */ parentFqn = this.parent.fqn;\n    const /** @type {?} */ name = this.name || '$default';\n\n    this.uiViewData = {\n      $type: 'ng2',\n      id: id++,\n      name: name,\n      fqn: parentFqn ? parentFqn + \".\" + name : name,\n      creationContext: this.parent.context,\n      configUpdated: this.viewConfigUpdated.bind(this),\n      config: undefined,\n    };\n\n    this.deregisterHook = router.transitionService.onBefore({}, trans => this.applyUiCanExitHook(trans));\n    this.deregisterUIView = router.viewService.registerUIView(this.uiViewData);\n  }\n/**\n * For each transition, checks the component loaded in the ui-view for:\n * \n * - has a uiCanExit() component hook\n * - is being exited\n * \n * If both are true, adds the uiCanExit component function as a hook to that singular Transition.\n * @param {?} trans\n * @return {?}\n */\napplyUiCanExitHook(trans: Transition) {\n    const /** @type {?} */ instance = this.componentRef && this.componentRef.instance;\n    const /** @type {?} */ uiCanExitFn: TransitionHookFn = instance && instance.uiCanExit;\n\n    if (isFunction(uiCanExitFn)) {\n      const /** @type {?} */ state: StateDeclaration = parse(\"uiViewData.config.viewDecl.$context.self\")(this);\n\n      if (trans.exiting().indexOf(state) !== -1) {\n        trans.onStart({}, function() {\n          return uiCanExitFn.call(instance, trans);\n        });\n      }\n    }\n  }\n/**\n * @return {?}\n */\ndisposeLast() {\n    if (this.componentRef) this.componentRef.destroy();\n    this.componentRef = null;\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this.deregisterUIView) this.deregisterUIView();\n    if (this.deregisterHook) this.deregisterHook();\n    this.disposeLast();\n  }\n/**\n * The view service is informing us of an updated ViewConfig\n * (usually because a transition activated some state and its views)\n * @param {?} config\n * @return {?}\n */\nviewConfigUpdated(config: ViewConfig) {\n    // The config may be undefined if there is nothing currently targeting this UIView.\n    // Dispose the current component, if there is one\n    if (!config) return this.disposeLast();\n\n    // Only care about Ng2 configs\n    if (!(config instanceof Ng2ViewConfig)) return;\n\n    // The \"new\" viewconfig is already applied, so exit early\n    if (this.uiViewData.config === config) return;\n\n    // This is a new ViewConfig.  Dispose the previous component\n    this.disposeLast();\n    trace.traceUIViewConfigUpdated(this.uiViewData, config && config.viewDecl.$context);\n\n    this.applyUpdatedConfig(config);\n  }\n/**\n * @param {?} config\n * @return {?}\n */\napplyUpdatedConfig(config: Ng2ViewConfig) {\n    ( /** @type {?} */((this.uiViewData as any))).config = config;\n    // Create the Injector for the routed component\n    let /** @type {?} */ context = new ResolveContext( /** @type {?} */((<any>config.path)));\n    let /** @type {?} */ componentInjector = this.getComponentInjector(context);\n\n    // Get the component class from the view declaration. TODO: allow promises?\n    let /** @type {?} */ componentClass = config.viewDecl.component;\n\n    // Create the component\n    let /** @type {?} */ compFactoryResolver = componentInjector.get(ComponentFactoryResolver);\n    let /** @type {?} */ compFactory = compFactoryResolver.resolveComponentFactory(componentClass);\n    this.componentRef = this.componentTarget.createComponent(compFactory, undefined, componentInjector);\n\n    // Wire resolves to @Input()s\n    this.applyInputBindings(compFactory, this.componentRef, context, componentClass);\n  }\n/**\n * Creates a new Injector for a routed component.\n * \n * Adds resolve values to the Injector\n * Adds providers from the NgModule for the state\n * Adds providers from the parent Component in the component tree\n * Adds a PARENT_INJECT view context object\n * \n * @param {?} context\n * @return {?} an Injector\n */\ngetComponentInjector(context: ResolveContext): Injector {\n    // Map resolves to \"useValue: providers\"\n    let /** @type {?} */ resolvables = context.getTokens().map(token => context.getResolvable(token)).filter(r => r.resolved);\n    let /** @type {?} */ newProviders = resolvables.map(r => ({ provide: r.token, useValue: r.data }));\n\n    let /** @type {?} */ parentInject = { context: this.uiViewData.config.viewDecl.$context, fqn: this.uiViewData.fqn };\n    newProviders.push({ provide: UIView.PARENT_INJECT, useValue: parentInject });\n\n    let /** @type {?} */ parentComponentInjector = this.viewContainerRef.injector;\n    let /** @type {?} */ moduleInjector = context.getResolvable(NATIVE_INJECTOR_TOKEN).data;\n    let /** @type {?} */ mergedParentInjector = new MergeInjector(moduleInjector, parentComponentInjector);\n\n    return ReflectiveInjector.resolveAndCreate(newProviders, mergedParentInjector);\n  }\n/**\n * Supplies component inputs with resolve data\n * \n * Finds component inputs which match resolves (by name) and sets the input value\n * to the resolve data.\n * @param {?} factory\n * @param {?} ref\n * @param {?} context\n * @param {?} componentClass\n * @return {?}\n */\napplyInputBindings(factory: ComponentFactory<any>, ref: ComponentRef<any>, context: ResolveContext, componentClass) {\n    const /** @type {?} */ component = ref.instance;\n    const /** @type {?} */ bindings = this.uiViewData.config.viewDecl['bindings'] || {};\n    const /** @type {?} */ explicitBoundProps = Object.keys(bindings);\n\n    // Returns the actual component property for a renamed an input renamed using `@Input('foo') _foo`.\n    // return the `_foo` property\n    const /** @type {?} */ renamedInputProp = (prop: string) => {\n      const /** @type {?} */ input = factory.inputs.find(i => i.templateName === prop);\n      return input && input.propName || prop;\n    };\n\n    // Supply resolve data to component as specified in the state's `bindings: {}`\n    const /** @type {?} */ explicitInputTuples = explicitBoundProps\n        .reduce((acc, key) => acc.concat([{ prop: renamedInputProp(key), token: bindings[key] }]), []);\n\n    // Supply resolve data to matching @Input('prop') or inputs: ['prop']\n    const /** @type {?} */ implicitInputTuples = ng2ComponentInputs(factory)\n        .filter(tuple => !inArray(explicitBoundProps, tuple.prop));\n\n    const /** @type {?} */ addResolvable = (tuple: InputMapping) => ({\n      prop: tuple.prop,\n      resolvable: context.getResolvable(tuple.token),\n    });\n\n    explicitInputTuples.concat(implicitInputTuples)\n        .map(addResolvable)\n        .map(tuple => {\n          if (tuple.resolvable && !tuple.resolvable.resolved && tuple.resolvable.policy && tuple.resolvable.policy.async === 'NOWAIT') {\n            tuple.resolvable.promise.then(\n              () => ref.instance[tuple.prop] = tuple.resolvable.data,\n            );\n          }\n\n          return tuple;\n        })\n        .filter(tuple => tuple.resolvable && tuple.resolvable.resolved)\n        .forEach(tuple => { component[tuple.prop] = tuple.resolvable.data; });\n\n    // Initiate change detection for the newly created component\n    ref.changeDetectorRef.detectChanges();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ui-view, [ui-view]',\n  template: `\n    <ng-template #componentTarget></ng-template>\n    <ng-content *ngIf=\"!componentRef\"></ng-content>\n  `,\n  // styles: [`\n  //   .done-true {\n  //     text-decoration: line-through;\n  //     color: grey;\n  //   }`\n  // ],\n  // template: `\n  // <div style=\"padding: 1em; border: 1px solid lightgrey;\">\n  //\n  //   <div #content style=\"color: lightgrey; font-size: smaller;\">\n  //     <div>ui-view #{{uiViewData?.id}} created by '{{ parentContext?.name || \"(root)\" }}' state</div>\n  //     <div>name: (absolute) '{{uiViewData?.fqn}}' (contextual) '{{uiViewData?.name}}@{{parentContext?.name}}' </div>\n  //     <div>currently filled by: '{{(uiViewData?.config && uiViewData?.config?.viewDecl?.$context) || 'empty...'}}'</div>\n  //   </div>\n  //\n  // </div>`\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: UIRouter, },\n{type: undefined, decorators: [{ type: Inject, args: [UIView.PARENT_INJECT, ] }, ]},\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'componentTarget': [{ type: ViewChild, args: ['componentTarget', {read: ViewContainerRef}, ] },],\n'name': [{ type: Input, args: ['name', ] },],\n'_name': [{ type: Input, args: ['ui-view', ] },],\n};\n}\n\nfunction UIView_tsickle_Closure_declarations() {\n/** @type {?} */\nUIView.PARENT_INJECT;\n/** @type {?} */\nUIView.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUIView.ctorParameters;\n/** @type {?} */\nUIView.propDecorators;\n/** @type {?} */\nUIView.prototype.componentTarget;\n/** @type {?} */\nUIView.prototype.name;\n/**\n * The reference to the component currently inside the viewport\n * @type {?}\n */\nUIView.prototype.componentRef;\n/**\n * Deregisters the ui-view from the view service\n * @type {?}\n */\nUIView.prototype.deregisterUIView;\n/**\n * Deregisters the master uiCanExit transition hook\n * @type {?}\n */\nUIView.prototype.deregisterHook;\n/**\n * Data about the this UIView\n * @type {?}\n */\nUIView.prototype.uiViewData;\n/** @type {?} */\nUIView.prototype.parent;\n/** @type {?} */\nUIView.prototype.router;\n/** @type {?} */\nUIView.prototype.viewContainerRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/** @module ng2 */ /** */\n\nimport {Injector} from '@angular/core';\n/**\n * Merge two injectors\n * \n * This class implements the Injector ng2 interface but delegates\n * to the Injectors provided in the constructor.\n */\nexport class MergeInjector implements Injector {\n  static NOT_FOUND = {};\nprivate injectors: Injector[];\n/**\n * @param {...?} injectors\n */\nconstructor(...injectors: Injector[]) {\n    if (injectors.length < 2) throw new Error(\"pass at least two injectors\");\n    this.injectors = injectors;\n  }\n/**\n * Get the token from the first injector which contains it.\n * \n * Delegates to the first Injector.get().\n * If not found, then delegates to the second Injector (and so forth).\n * If no Injector contains the token, return the `notFoundValue`, or throw.\n * \n * @param {?} token the DI token\n * @param {?=} notFoundValue the value to return if none of the Injectors contains the token.\n * @return {?}\n */\nget(token: any, notFoundValue?: any): any {\n    for (let /** @type {?} */ i = 0; i < this.injectors.length; i++) {\n      let /** @type {?} */ val = this.injectors[i].get(token, MergeInjector.NOT_FOUND);\n      if (val !== MergeInjector.NOT_FOUND) return val;\n    }\n\n    if (arguments.length >= 2) return notFoundValue;\n\n    // This will throw the DI Injector error\n    this.injectors[0].get(token);\n  }\n}\n\nfunction MergeInjector_tsickle_Closure_declarations() {\n/** @type {?} */\nMergeInjector.NOT_FOUND;\n/** @type {?} */\nMergeInjector.prototype.injectors;\n}\n","/** @module ng2 */ /** */\n\nimport { isFunction, StateObject } from '@uirouter/core/index';\nimport {PathNode} from '@uirouter/core/index';\nimport {pick, forEach} from '@uirouter/core/index';\nimport {ViewConfig} from '@uirouter/core/index';\nimport {Ng2ViewDeclaration} from '../interface';\nimport {services} from '@uirouter/core/index';\nimport {ViewService} from '@uirouter/core/index';\n/**\n * This is a [[StateBuilder.builder]] function for Angular `views`.\n * \n * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n * handles the `views` property with logic specific to \\@uirouter/angular.\n * \n * If no `views: {}` property exists on the [[StateDeclaration]], then it creates the `views` object and\n * applies the state-level configuration to a view named `$default`.\n * @param {?} state\n * @return {?}\n */\nexport function ng2ViewsBuilder(state: StateObject) {\n  let /** @type {?} */ views: { [key: string]: Ng2ViewDeclaration } = {}, /** @type {?} */\n      viewsObject = state.views || {\"$default\": pick(state, [\"component\", \"bindings\"])};\n\n  forEach(viewsObject, function (config: Ng2ViewDeclaration, name: string) {\n    name = name || \"$default\"; // Account for views: { \"\": { template... } }\n    if (isFunction(config)) config = { component: /** @type {?} */(( config as any)) };\n    if (Object.keys(config).length == 0) return;\n\n    config.$type = \"ng2\";\n    config.$context = state;\n    config.$name = name;\n\n    let /** @type {?} */ normalized = ViewService.normalizeUIViewTarget(config.$context, config.$name);\n    config.$uiViewName = normalized.uiViewName;\n    config.$uiViewContextAnchor = normalized.uiViewContextAnchor;\n\n    views[name] = config;\n  });\n  return views;\n}\n\nlet /** @type {?} */ id = 0;\nexport class Ng2ViewConfig implements ViewConfig {\n  $id: number = id++;\n  loaded: boolean = true;\n/**\n * @param {?} path\n * @param {?} viewDecl\n */\nconstructor(public path: PathNode[],\npublic viewDecl: Ng2ViewDeclaration) { }\n/**\n * @return {?}\n */\nload() {\n    return services.$q.when(this);\n  }\n}\n\nfunction Ng2ViewConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nNg2ViewConfig.prototype.$id;\n/** @type {?} */\nNg2ViewConfig.prototype.loaded;\n/** @type {?} */\nNg2ViewConfig.prototype.path;\n/** @type {?} */\nNg2ViewConfig.prototype.viewDecl;\n}\n\n","/**\n * @internalapi\n * @module vanilla\n */ /** */\n\n\nimport { LocationServices } from '../common/coreservices';\nimport { Disposable } from '../interface';\nimport { UIRouter } from '../router';\nimport { LocationLike, HistoryLike } from './interface';\nimport { parseUrl, getParams, buildUrl } from './utils';\nimport { isDefined } from '../common/predicates';\nimport { extend, deregAll, removeFrom } from '../common/common';\n/**\n * A base `LocationServices`\n * @abstract\n */\nexport abstract class BaseLocationServices implements LocationServices, Disposable {\n/**\n * @param {?} router\n * @param {?} fireAfterUpdate\n */\nconstructor(router: UIRouter,\npublic fireAfterUpdate: boolean) {\n    this._location = window && window.location;\n    this._history = window && window.history;\n  }\n\n  _listener = evt => this._listeners.forEach(cb => cb(evt));\nprivate _listeners: Function[] = [];\n  _location: LocationLike;\n  _history: HistoryLike;\n/**\n * This should return the current internal URL representation.\n * \n * The internal URL includes only the portion that UI-Router matches.\n * It does not include:\n * - protocol\n * - server\n * - port\n * - base href or hash\n * @abstract\n * @return {?}\n */\n_get() {}\n/**\n * This should set the current URL.\n * \n * The `url` param should include only the portion that UI-Router matches on.\n * It should not include:\n * - protocol\n * - server\n * - port\n * - base href or hash\n * \n * However, after this function completes, the browser URL should reflect the entire (fully qualified)\n * HREF including those data.\n * @abstract\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @param {?} replace\n * @return {?}\n */\n_set(state: any, title: string, url: string, replace: boolean) {}\n\n  hash   = () => parseUrl(this._get()).hash;\n  path   = () => parseUrl(this._get()).path;\n  search = () => getParams(parseUrl(this._get()).search);\n/**\n * @param {?=} url\n * @param {?=} replace\n * @return {?}\n */\nurl(url?: string, replace: boolean = true): string {\n    if (isDefined(url) && url !== this._get()) {\n      this._set(null, null, url, replace);\n\n      if (this.fireAfterUpdate) {\n        let /** @type {?} */ evt = extend(new Event(\"locationchange\"), { url });\n        this._listeners.forEach(cb => cb(evt));\n      }\n    }\n\n    return buildUrl(this);\n  }\n/**\n * @param {?} cb\n * @return {?}\n */\nonChange(cb: EventListener) {\n    this._listeners.push(cb);\n    return () => removeFrom(this._listeners, cb);\n  }\n/**\n * @param {?} router\n * @return {?}\n */\ndispose(router: UIRouter) {\n    deregAll(this._listeners);\n  }\n}\n\nfunction BaseLocationServices_tsickle_Closure_declarations() {\n/** @type {?} */\nBaseLocationServices.prototype._listener;\n/** @type {?} */\nBaseLocationServices.prototype._listeners;\n/** @type {?} */\nBaseLocationServices.prototype._location;\n/** @type {?} */\nBaseLocationServices.prototype._history;\n/** @type {?} */\nBaseLocationServices.prototype.hash;\n/** @type {?} */\nBaseLocationServices.prototype.path;\n/** @type {?} */\nBaseLocationServices.prototype.search;\n/** @type {?} */\nBaseLocationServices.prototype.fireAfterUpdate;\n}\n\n","/**\n * @internalapi\n * @module vanilla\n */\n/** */\n\nimport { isArray } from '../common/index';\nimport { LocationServices, LocationConfig } from '../common/coreservices';\nimport { UIRouter } from '../router';\nimport { identity, unnestR, removeFrom, deregAll, extend } from '../common/common';\nimport { LocationLike, HistoryLike } from './interface';\nimport { isDefined } from '../common/predicates';\nimport { Disposable } from '../interface';\n\nconst /** @type {?} */ beforeAfterSubstr = (char: string) => (str: string): string[] => {\n  if (!str) return [\"\", \"\"];\n  let /** @type {?} */ idx = str.indexOf(char);\n  if (idx === -1) return [str, \"\"];\n  return [str.substr(0, idx), str.substr(idx + 1)];\n};\n\nexport const /** @type {?} */ splitHash = beforeAfterSubstr(\"#\");\nexport const /** @type {?} */ splitQuery = beforeAfterSubstr(\"?\");\nexport const /** @type {?} */ splitEqual = beforeAfterSubstr(\"=\");\nexport const /** @type {?} */ trimHashVal = (str) => str ? str.replace(/^#/, \"\") : \"\";\n\nexport const /** @type {?} */ keyValsToObjectR = (accum, [key, val]) => {\n  if (!accum.hasOwnProperty(key)) {\n    accum[key] = val;\n  } else if (isArray(accum[key])) {\n    accum[key].push(val);\n  } else {\n    accum[key] = [accum[key], val]\n  }\n  return accum;\n};\n\nexport const /** @type {?} */ getParams = (queryString: string): any =>\n    queryString.split(\"&\").filter(identity).map(splitEqual).reduce(keyValsToObjectR, {});\n/**\n * @param {?} url\n * @return {?}\n */\nexport function parseUrl(url: string) {\n  const /** @type {?} */ orEmptyString = x => x || \"\";\n  let [beforehash, hash] = splitHash(url).map(orEmptyString);\n  let [path, search] = splitQuery(beforehash).map(orEmptyString);\n\n  return { path, search, hash, url };\n}\n\nexport const /** @type {?} */ buildUrl = (loc: LocationServices) => {\n  let /** @type {?} */ path = loc.path();\n  let /** @type {?} */ searchObject = loc.search();\n  let /** @type {?} */ hash = loc.hash();\n\n  let /** @type {?} */ search = Object.keys(searchObject).map(key => {\n    let /** @type {?} */ param = searchObject[key];\n    let /** @type {?} */ vals = isArray(param) ? param : [param];\n    return vals.map(val => key + \"=\" + val);\n  }).reduce(unnestR, []).join(\"&\");\n\n  return path + (search ? \"?\" + search : \"\") + (hash ? \"#\" + hash : \"\");\n};\n/**\n * @param {?} name\n * @param {?} isHtml5\n * @param {?} serviceClass\n * @param {?} configurationClass\n * @return {?}\n */\nexport function locationPluginFactory(\n    name: string,\n    isHtml5: boolean,\n    serviceClass: { new(router?: UIRouter): LocationServices },\n    configurationClass: { new(router?: UIRouter, isHtml5?: boolean): LocationConfig }\n) {\n  return function(router: UIRouter) {\n    let /** @type {?} */ service       = router.locationService = new serviceClass(router);\n    let /** @type {?} */ configuration = router.locationConfig  = new configurationClass(router, isHtml5);\n/**\n * @param {?} router\n * @return {?}\n */\nfunction dispose(router: UIRouter) {\n      router.dispose(service);\n      router.dispose(configuration);\n    }\n\n    return { name, service, configuration, dispose };\n  };\n}\n\n","/**\n * @coreapi\n * @module state\n */\n/** */\n\nimport { createProxyFunctions, defaults, extend, inArray, noop, removeFrom, silenceUncaughtInPromise, silentRejection } from '../common/common';\nimport { isDefined, isObject, isString } from '../common/predicates';\nimport { Queue } from '../common/queue';\nimport { services } from '../common/coreservices';\n\nimport { PathUtils } from '../path/pathFactory';\nimport { PathNode } from '../path/pathNode';\n\nimport { HookResult, TransitionOptions } from '../transition/interface';\nimport { defaultTransOpts } from '../transition/transitionService';\nimport { Rejection, RejectType } from '../transition/rejectFactory';\nimport { Transition } from '../transition/transition';\n\nimport { HrefOptions, LazyLoadResult, StateDeclaration, StateOrName, TransitionPromise } from './interface';\nimport { StateObject } from './stateObject';\nimport { TargetState } from './targetState';\n\nimport { ParamsOrArray, RawParams } from '../params/interface';\nimport { Param } from '../params/param';\nimport { Glob } from '../common/glob';\nimport { UIRouter } from '../router';\nimport { UIInjector } from '../interface';\nimport { ResolveContext } from '../resolve/resolveContext';\nimport { lazyLoadState } from '../hooks/lazyLoad';\nimport { not, val } from '../common/hof';\nimport { StateParams } from '../params/stateParams';\n\nexport type OnInvalidCallback =\n    (toState?: TargetState, fromState?: TargetState, injector?: UIInjector) => HookResult;\n/**\n * Provides state related service functions\n * \n * This class provides services related to ui-router states.\n * An instance of this class is located on the global [[UIRouter]] object.\n */\nexport class StateService {\n/**\n * \\@internalapi\n */\ninvalidCallbacks: OnInvalidCallback[] = [];\n/**\n * The [[Transition]] currently in progress (or null)\n * \n * This is a passthrough through to [[UIRouterGlobals.transition]]\n * @return {?}\n */\nget transition() { return this.router.globals.transition; }\n/**\n * The latest successful state parameters\n * \n * This is a passthrough through to [[UIRouterGlobals.params]]\n * @return {?}\n */\nget params(): StateParams { return this.router.globals.params; }\n/**\n * The current [[StateDeclaration]]\n * \n * This is a passthrough through to [[UIRouterGlobals.current]]\n * @return {?}\n */\nget current() { return this.router.globals.current; }\n/**\n * The current [[StateObject]]\n * \n * This is a passthrough through to [[UIRouterGlobals.$current]]\n * @return {?}\n */\nget $current() { return this.router.globals.$current; }\n/**\n * \\@internalapi\n * @param {?} router\n */\nconstructor(private router: UIRouter) {\n    let getters = ['current', '$current', 'params', 'transition'];\n    let boundFns = Object.keys(StateService.prototype).filter(not(inArray(getters)));\n    createProxyFunctions(val(StateService.prototype), this, val(this), boundFns);\n  }\n/**\n * \\@internalapi\n * @return {?}\n */\ndispose() {\n    this.defaultErrorHandler(noop);\n    this.invalidCallbacks = [];\n  }\n/**\n * Handler for when [[transitionTo]] is called with an invalid state.\n * \n * Invokes the [[onInvalid]] callbacks, in natural order.\n * Each callback's return value is checked in sequence until one of them returns an instance of TargetState.\n * The results of the callbacks are wrapped in $q.when(), so the callbacks may return promises.\n * \n * If a callback returns an TargetState, then it is used as arguments to $state.transitionTo() and the result returned.\n * \n * \\@internalapi\n * @param {?} fromPath\n * @param {?} toState\n * @return {?}\n */\nprivate _handleInvalidTargetState(fromPath: PathNode[], toState: TargetState) {\n    let /** @type {?} */ fromState = PathUtils.makeTargetState(fromPath);\n    let /** @type {?} */ globals = this.router.globals;\n    const /** @type {?} */ latestThing = () => globals.transitionHistory.peekTail();\n    let /** @type {?} */ latest = latestThing();\n    let /** @type {?} */ callbackQueue = new Queue<OnInvalidCallback>(this.invalidCallbacks.slice());\n    let /** @type {?} */ injector = new ResolveContext(fromPath).injector();\n\n    const /** @type {?} */ checkForRedirect = (result: HookResult) => {\n      if (!(result instanceof TargetState)) {\n        return;\n      }\n\n      let /** @type {?} */ target = /** @type {?} */(( <TargetState> result));\n      // Recreate the TargetState, in case the state is now defined.\n      target = this.target(target.identifier(), target.params(), target.options());\n\n      if (!target.valid()) {\n        return Rejection.invalid(target.error()).toPromise();\n      }\n\n      if (latestThing() !== latest) {\n        return Rejection.superseded().toPromise();\n      }\n\n      return this.transitionTo(target.identifier(), target.params(), target.options());\n    };\n/**\n * @return {?}\n */\nfunction invokeNextCallback() {\n      let /** @type {?} */ nextCallback = callbackQueue.dequeue();\n      if (nextCallback === undefined) return Rejection.invalid(toState.error()).toPromise();\n\n      let /** @type {?} */ callbackResult = services.$q.when(nextCallback(toState, fromState, injector));\n      return callbackResult.then(checkForRedirect).then(result => result || invokeNextCallback());\n    }\n\n    return invokeNextCallback();\n  }\n/**\n * Registers an Invalid State handler\n * \n * Registers a [[OnInvalidCallback]] function to be invoked when [[StateService.transitionTo]]\n * has been called with an invalid state reference parameter\n * \n * Example:\n * ```js\n * stateService.onInvalid(function(to, from, injector) {\n *   if (to.name() === 'foo') {\n *     let lazyLoader = injector.get('LazyLoadService');\n *     return lazyLoader.load('foo')\n *         .then(() => stateService.target('foo'));\n *   }\n * });\n * ```\n * \n *   This function receives the (invalid) toState, the fromState, and an injector.\n *   The function may optionally return a [[TargetState]] or a Promise for a TargetState.\n *   If one is returned, it is treated as a redirect.\n * \n * @param {?} callback\n * @return {?} a function which deregisters the callback\n */\nonInvalid(callback: OnInvalidCallback): Function {\n    this.invalidCallbacks.push(callback);\n    return function deregisterListener() {\n      removeFrom(this.invalidCallbacks)(callback);\n    }.bind(this);\n  }\n/**\n * Reloads the current state\n * \n * A method that force reloads the current state, or a partial state hierarchy.\n * All resolves are re-resolved, and components reinstantiated.\n * \n * #### Example:\n * ```js\n * let app angular.module('app', ['ui.router']);\n * \n * app.controller('ctrl', function ($scope, $state) {\n *   $scope.reload = function(){\n *     $state.reload();\n *   }\n * });\n * ```\n * \n * Note: `reload()` is just an alias for:\n * \n * ```js\n * $state.transitionTo($state.current, $state.params, {\n *   reload: true, inherit: false\n * });\n * ```\n * \n * @param {?=} reloadState A state name or a state object.\n *    If present, this state and all its children will be reloaded, but ancestors will not reload.\n * \n * #### Example:\n * ```js\n * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item'\n * //and current state is 'contacts.detail.item'\n * let app angular.module('app', ['ui.router']);\n * \n * app.controller('ctrl', function ($scope, $state) {\n *   $scope.reload = function(){\n *     //will reload 'contact.detail' and nested 'contact.detail.item' states\n *     $state.reload('contact.detail');\n *   }\n * });\n * ```\n * \n * @return {?} A promise representing the state of the new transition. See [[StateService.go]]\n */\nreload(reloadState?: StateOrName): Promise<StateObject> {\n    return this.transitionTo(this.current, this.params, {\n      reload: isDefined(reloadState) ? reloadState : true,\n      inherit: false,\n      notify: false,\n    });\n  };\n/**\n * Transition to a different state and/or parameters\n * \n * Convenience method for transitioning to a new state.\n * \n * `$state.go` calls `$state.transitionTo` internally but automatically sets options to\n * `{ location: true, inherit: true, relative: router.globals.$current, notify: true }`.\n * This allows you to use either an absolute or relative `to` argument (because of `relative: router.globals.$current`).\n * It also allows you to specify * only the parameters you'd like to update, while letting unspecified parameters\n * inherit from the current parameter values (because of `inherit: true`).\n * \n * #### Example:\n * ```js\n * let app = angular.module('app', ['ui.router']);\n * \n * app.controller('ctrl', function ($scope, $state) {\n *   $scope.changeState = function () {\n *     $state.go('contact.detail');\n *   };\n * });\n * ```\n * \n * @param {?} to Absolute state name, state object, or relative state path (relative to current state).\n * \n * Some examples:\n * \n * - `$state.go('contact.detail')` - will go to the `contact.detail` state\n * - `$state.go('^')` - will go to the parent state\n * - `$state.go('^.sibling')` - if current state is `home.child`, will go to the `home.sibling` state\n * - `$state.go('.child.grandchild')` - if current state is home, will go to the `home.child.grandchild` state\n * \n * @param {?=} params A map of the parameters that will be sent to the state, will populate $stateParams.\n * \n *    Any parameters that are not specified will be inherited from current parameter values (because of `inherit: true`).\n *    This allows, for example, going to a sibling state that shares parameters defined by a parent state.\n * \n * @param {?=} options Transition options\n * \n * @return {?}\n */\ngo(to: StateOrName, params?: RawParams, options?: TransitionOptions): TransitionPromise {\n    let /** @type {?} */ defautGoOpts = { relative: this.$current, inherit: true };\n    let /** @type {?} */ transOpts = defaults(options, defautGoOpts, defaultTransOpts);\n    return this.transitionTo(to, params, transOpts);\n  };\n/**\n * Creates a [[TargetState]]\n * \n * This is a factory method for creating a TargetState\n * \n * This may be returned from a Transition Hook to redirect a transition, for example.\n * @param {?} identifier\n * @param {?=} params\n * @param {?=} options\n * @return {?}\n */\ntarget(identifier: StateOrName, params?: ParamsOrArray, options: TransitionOptions = {}): TargetState {\n    // If we're reloading, find the state object to reload from\n    if (isObject(options.reload) && !( /** @type {?} */((<any>options.reload))).name)\n      throw new Error('Invalid reload state object');\n    let /** @type {?} */ reg = this.router.stateRegistry;\n    options.reloadState = options.reload === true ? reg.root() : reg.matcher.find( /** @type {?} */((<any> options.reload)), options.relative);\n\n    if (options.reload && !options.reloadState)\n      throw new Error(`No such reload state '${(isString(options.reload) ? options.reload : ( /** @type {?} */((<any>options.reload))).name)}'`);\n\n    let /** @type {?} */ stateDefinition = reg.matcher.find(identifier, options.relative);\n    return new TargetState(identifier, stateDefinition, params, options);\n  };\n/**\n * @return {?}\n */\nprivate getCurrentPath(): PathNode[] {\n    let /** @type {?} */ globals = this.router.globals;\n    let /** @type {?} */ latestSuccess: Transition = globals.successfulTransitions.peekTail();\n    const /** @type {?} */ rootPath = () => [ new PathNode(this.router.stateRegistry.root()) ];\n    return latestSuccess ? latestSuccess.treeChanges().to : rootPath();\n  }\n/**\n * Low-level method for transitioning to a new state.\n * \n * The [[go]] method (which uses `transitionTo` internally) is recommended in most situations.\n * \n * #### Example:\n * ```js\n * let app = angular.module('app', ['ui.router']);\n * \n * app.controller('ctrl', function ($scope, $state) {\n *   $scope.changeState = function () {\n *     $state.transitionTo('contact.detail');\n *   };\n * });\n * ```\n * \n * @param {?} to State name or state object.\n * @param {?=} toParams A map of the parameters that will be sent to the state,\n *      will populate $stateParams.\n * @param {?=} options Transition options\n * \n * @return {?} A promise representing the state of the new transition. See [[go]]\n */\ntransitionTo(to: StateOrName, toParams: RawParams = {}, options: TransitionOptions = {}): TransitionPromise {\n    let /** @type {?} */ router = this.router;\n    let /** @type {?} */ globals = router.globals;\n    options = defaults(options, defaultTransOpts);\n    const /** @type {?} */ getCurrent = () =>\n        globals.transition;\n    options = extend(options, { current: getCurrent });\n\n    let /** @type {?} */ ref: TargetState = this.target(to, toParams, options);\n    let /** @type {?} */ currentPath = this.getCurrentPath();\n\n    if (!ref.exists())\n      return this._handleInvalidTargetState(currentPath, ref);\n\n    if (!ref.valid())\n      return /** @type {?} */(( <TransitionPromise> silentRejection(ref.error())));\n/**\n * Special handling for Ignored, Aborted, and Redirected transitions\n * \n * The semantics for the transition.run() promise and the StateService.transitionTo()\n * promise differ. For instance, the run() promise may be rejected because it was\n * IGNORED, but the transitionTo() promise is resolved because from the user perspective\n * no error occurred.  Likewise, the transition.run() promise may be rejected because of\n * a Redirect, but the transitionTo() promise is chained to the new Transition's promise.\n */\nconst rejectedTransitionHandler = (transition: Transition) => (error: any): Promise<any> => {\n      if (error instanceof Rejection) {\n        const isLatest = router.globals.lastStartedTransitionId === transition.$id;\n\n        if (error.type === RejectType.IGNORED) {\n          isLatest && router.urlRouter.update();\n          // Consider ignored `Transition.run()` as a successful `transitionTo`\n          return services.$q.when(globals.current);\n        }\n\n        const detail: any = error.detail;\n        if (error.type === RejectType.SUPERSEDED && error.redirected && detail instanceof TargetState) {\n          // If `Transition.run()` was redirected, allow the `transitionTo()` promise to resolve successfully\n          // by returning the promise for the new (redirect) `Transition.run()`.\n          let redirect: Transition = transition.redirect(detail);\n          return redirect.run().catch(rejectedTransitionHandler(redirect));\n        }\n\n        if (error.type === RejectType.ABORTED) {\n          isLatest && router.urlRouter.update();\n          return services.$q.reject(error);\n        }\n      }\n\n      let errorHandler = this.defaultErrorHandler();\n      errorHandler(error);\n\n      return services.$q.reject(error);\n    };\n\n    let /** @type {?} */ transition = this.router.transitionService.create(currentPath, ref);\n    let /** @type {?} */ transitionToPromise = transition.run().catch(rejectedTransitionHandler(transition));\n    silenceUncaughtInPromise(transitionToPromise); // issue #2676\n\n    // Return a promise for the transition, which also has the transition object on it.\n    return extend(transitionToPromise, { transition });\n  };\n/**\n * Checks if the current state *is* the provided state\n * \n * Similar to [[includes]] but only checks for the full state name.\n * If params is supplied then it will be tested for strict equality against the current\n * active params object, so all params must match with none missing and no extras.\n * \n * #### Example:\n * ```js\n * $state.$current.name = 'contacts.details.item';\n * \n * // absolute name\n * $state.is('contact.details.item'); // returns true\n * $state.is(contactDetailItemStateObject); // returns true\n * ```\n * \n * // relative name (. and ^), typically from a template\n * // E.g. from the 'contacts.details' template\n * ```html\n * <div ng-class=\"{highlighted: $state.is('.item')}\">Item</div>\n * ```\n * \n * @param {?} stateOrName The state name (absolute or relative) or state object you'd like to check.\n * @param {?=} params A param object, e.g. `{sectionId: section.id}`, that you'd like\n * to test against the current active state.\n * @param {?=} options An options object. The options are:\n *   - `relative`: If `stateOrName` is a relative state name and `options.relative` is set, .is will\n *     test relative to `options.relative` state (or name).\n * \n * @return {?} Returns true if it is the state.\n */\nis(stateOrName: StateOrName, params?: RawParams, options?: { relative?: StateOrName }): boolean {\n    options = defaults(options, { relative: this.$current });\n    let /** @type {?} */ state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);\n    if (!isDefined(state)) return undefined;\n    if (this.$current !== state) return false;\n    if (!params) return true;\n\n    let /** @type {?} */ schema: Param[] = state.parameters({ inherit: true, matchingKeys: params });\n    return Param.equals(schema, Param.values(schema, params), this.params);\n  };\n/**\n * Checks if the current state *includes* the provided state\n * \n * A method to determine if the current active state is equal to or is the child of the\n * state stateName. If any params are passed then they will be tested for a match as well.\n * Not all the parameters need to be passed, just the ones you'd like to test for equality.\n * \n * #### Example when `$state.$current.name === 'contacts.details.item'`\n * ```js\n * // Using partial names\n * $state.includes(\"contacts\"); // returns true\n * $state.includes(\"contacts.details\"); // returns true\n * $state.includes(\"contacts.details.item\"); // returns true\n * $state.includes(\"contacts.list\"); // returns false\n * $state.includes(\"about\"); // returns false\n * ```\n * \n * #### Glob Examples when `* $state.$current.name === 'contacts.details.item.url'`:\n * ```js\n * $state.includes(\"*.details.*.*\"); // returns true\n * $state.includes(\"*.details.**\"); // returns true\n * $state.includes(\"**.item.**\"); // returns true\n * $state.includes(\"*.details.item.url\"); // returns true\n * $state.includes(\"*.details.*.url\"); // returns true\n * $state.includes(\"*.details.*\"); // returns false\n * $state.includes(\"item.**\"); // returns false\n * ```\n * \n * @param {?} stateOrName A partial name, relative name, glob pattern,\n *   or state object to be searched for within the current state name.\n * @param {?=} params A param object, e.g. `{sectionId: section.id}`,\n *   that you'd like to test against the current active state.\n * @param {?=} options An options object. The options are:\n *   - `relative`: If `stateOrName` is a relative state name and `options.relative` is set, .is will\n *     test relative to `options.relative` state (or name).\n * \n * @return {?}\n */\nincludes(stateOrName: StateOrName, params?: RawParams, options?: TransitionOptions): boolean {\n    options = defaults(options, { relative: this.$current });\n    let /** @type {?} */ glob = isString(stateOrName) && Glob.fromString( /** @type {?} */((<string> stateOrName)));\n\n    if (glob) {\n      if (!glob.matches(this.$current.name)) return false;\n      stateOrName = this.$current.name;\n    }\n    let /** @type {?} */ state = this.router.stateRegistry.matcher.find(stateOrName, options.relative), /** @type {?} */ include = this.$current.includes;\n\n    if (!isDefined(state)) return undefined;\n    if (!isDefined(include[state.name])) return false;\n    if (!params) return true;\n\n    let /** @type {?} */ schema: Param[] = state.parameters({ inherit: true, matchingKeys: params });\n    return Param.equals(schema, Param.values(schema, params), this.params);\n  };\n/**\n * Generates a URL for a state and parameters\n * \n * Returns the url for the given state populated with the given params.\n * \n * #### Example:\n * ```js\n * expect($state.href(\"about.person\", { person: \"bob\" })).toEqual(\"/about/bob\");\n * ```\n * \n * @param {?} stateOrName The state name or state object you'd like to generate a url from.\n * @param {?} params An object of parameter values to fill the state's required parameters.\n * @param {?=} options Options object. The options are:\n * \n * @return {?}\n */\nhref(stateOrName: StateOrName, params: RawParams, options?: HrefOptions): string {\n    let /** @type {?} */ defaultHrefOpts = {\n      lossy:    true,\n      inherit:  true,\n      absolute: false,\n      relative: this.$current,\n    };\n    options = defaults(options, defaultHrefOpts);\n    params = params || {};\n\n    let /** @type {?} */ state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);\n\n    if (!isDefined(state)) return null;\n    if (options.inherit) params = /** @type {?} */(( <any> this.params.$inherit(params, this.$current, state)));\n\n    let /** @type {?} */ nav = (state && options.lossy) ? state.navigable : state;\n\n    if (!nav || nav.url === undefined || nav.url === null) {\n      return null;\n    }\n    return this.router.urlRouter.href(nav.url, params, {\n      absolute: options.absolute,\n    });\n  };\n/**\n * @hidden\n */\nprivate _defaultErrorHandler: ((_error: any) => void) = function $defaultErrorHandler($error$) {\n    if ($error$ instanceof Error && $error$.stack) {\n      console.error($error$);\n      console.error($error$.stack);\n    } else if ($error$ instanceof Rejection) {\n      console.error($error$.toString());\n      if ($error$.detail && $error$.detail.stack)\n        console.error($error$.detail.stack);\n    } else {\n      console.error($error$);\n    }\n  };\n/**\n * Sets or gets the default [[transitionTo]] error handler.\n * \n * The error handler is called when a [[Transition]] is rejected or when any error occurred during the Transition.\n * This includes errors caused by resolves and transition hooks.\n * \n * Note:\n * This handler does not receive certain Transition rejections.\n * Redirected and Ignored Transitions are not considered to be errors by [[StateService.transitionTo]].\n * \n * The built-in default error handler logs the error to the console.\n * \n * You can provide your own custom handler.\n * \n * #### Example:\n * ```js\n * stateService.defaultErrorHandler(function() {\n *   // Do not log transitionTo errors\n * });\n * ```\n * \n * @param {?=} handler a global error handler function\n * @return {?} the current global error handler\n */\ndefaultErrorHandler(handler?: (error: any) => void): (error: any) => void {\n    return this._defaultErrorHandler = handler || this._defaultErrorHandler;\n  }\n\n  /**\n   * Gets a registered [[StateDeclaration]] object\n   *\n   * Returns the state declaration object for any specific state, or for all registered states.\n   *\n   * @param stateOrName (absolute or relative) If provided, will only get the declaration object for the requested state.\n   * If not provided, returns an array of ALL states.\n   * @param base When `stateOrName` is a relative state reference (such as `.bar.baz`), the state will be retrieved relative to this state.\n   *\n   * @returns a [[StateDeclaration]] object (or array of all registered [[StateDeclaration]] objects.)\n   */\n  get(stateOrName: StateOrName, base: StateOrName): StateDeclaration;\n  get(stateOrName: StateOrName): StateDeclaration;\n  get(): StateDeclaration[];\n/**\n * @param {?=} stateOrName\n * @param {?=} base\n * @return {?}\n */\nget(stateOrName?: StateOrName, base?: StateOrName): any {\n    let /** @type {?} */ reg = this.router.stateRegistry;\n    if (arguments.length === 0) return reg.get();\n    return reg.get(stateOrName, base || this.$current);\n  }\n/**\n * Lazy loads a state\n * \n * Explicitly runs a state's [[StateDeclaration.lazyLoad]] function.\n * \n * @param {?} stateOrName the state that should be lazy loaded\n * @param {?=} transition the optional Transition context to use (if the lazyLoad function requires an injector, etc)\n * Note: If no transition is provided, a noop transition is created using the from the current state to the current state.\n * This noop transition is not actually run.\n * \n * @return {?} a promise to lazy load\n */\nlazyLoad(stateOrName: StateOrName, transition?: Transition): Promise<LazyLoadResult> {\n    let /** @type {?} */ state: StateDeclaration = this.get(stateOrName);\n    if (!state || !state.lazyLoad) throw new Error(\"Can not lazy load \" + stateOrName);\n\n    let /** @type {?} */ currentPath = this.getCurrentPath();\n    let /** @type {?} */ target = PathUtils.makeTargetState(currentPath);\n    transition = transition || this.router.transitionService.create(currentPath, target);\n\n    return lazyLoadState(transition, state);\n  }\n}\n\nfunction StateService_tsickle_Closure_declarations() {\n/**\n * \\@internalapi\n * @type {?}\n */\nStateService.prototype.invalidCallbacks;\n/**\n * @hidden\n * @type {?}\n */\nStateService.prototype._defaultErrorHandler;\n/** @type {?} */\nStateService.prototype.router;\n}\n\n","/**\n * @coreapi\n * @module transition\n */\n/** for typedoc */\n\nimport {\n  IHookRegistry, TransitionOptions, TransitionHookScope, TransitionHookPhase, TransitionCreateHookFn, HookMatchCriteria,\n  HookRegOptions, PathTypes, PathType, RegisteredHooks, TransitionHookFn, TransitionStateHookFn\n} from './interface';\nimport { Transition } from './transition';\nimport { makeEvent, RegisteredHook } from './hookRegistry';\nimport { TargetState } from '../state/targetState';\nimport { PathNode } from '../path/pathNode';\nimport { ViewService } from '../view/view';\nimport { UIRouter } from '../router';\nimport { registerAddCoreResolvables } from '../hooks/coreResolvables';\nimport { registerRedirectToHook } from '../hooks/redirectTo';\nimport { registerOnExitHook, registerOnRetainHook, registerOnEnterHook } from '../hooks/onEnterExitRetain';\nimport { registerEagerResolvePath, registerLazyResolveState } from '../hooks/resolve';\nimport { registerLoadEnteringViews, registerActivateViews } from '../hooks/views';\nimport { registerUpdateGlobalState } from '../hooks/updateGlobals';\nimport { registerUpdateUrl } from '../hooks/url';\nimport { registerLazyLoadHook } from '../hooks/lazyLoad';\nimport { TransitionEventType } from './transitionEventType';\nimport { TransitionHook, GetResultHandler, GetErrorHandler } from './transitionHook';\nimport { isDefined } from '../common/predicates';\nimport { removeFrom, values, createProxyFunctions } from '../common/common';\nimport { Disposable } from '../interface'; // has or is using\n\nimport { val } from '../common/hof';\nimport { registerIgnoredTransitionHook } from '../hooks/ignoredTransition';\nimport { registerInvalidTransitionHook } from '../hooks/invalidTransition';\n/**\n * The default [[Transition]] options.\n * \n * Include this object when applying custom defaults:\n * let reloadOpts = { reload: true, notify: true }\n * let options = defaults(theirOpts, customDefaults, defaultOptions);\n */\nexport let defaultTransOpts: TransitionOptions = {\n  location    : true,\n  relative    : null,\n  inherit     : false,\n  notify      : true,\n  reload      : false,\n  custom      : {},\n  current     : () => null,\n  source      : \"unknown\"\n};\n\n\n/**\n * Plugin API for Transition Service\n * @internalapi\n */\nexport interface TransitionServicePluginAPI {\n  /**\n   * Adds a Path to be used as a criterion against a TreeChanges path\n   *\n   * For example: the `exiting` path in [[HookMatchCriteria]] is a STATE scoped path.\n   * It was defined by calling `defineTreeChangesCriterion('exiting', TransitionHookScope.STATE)`\n   * Each state in the exiting path is checked against the criteria and returned as part of the match.\n   *\n   * Another example: the `to` path in [[HookMatchCriteria]] is a TRANSITION scoped path.\n   * It was defined by calling `defineTreeChangesCriterion('to', TransitionHookScope.TRANSITION)`\n   * Only the tail of the `to` path is checked against the criteria and returned as part of the match.\n   */\n  _definePathType(name: string, hookScope: TransitionHookScope);\n\n  /**\n   * Gets a Path definition used as a criterion against a TreeChanges path\n   */\n  _getPathTypes(): PathTypes;\n\n  /**\n   * Defines a transition hook type and returns a transition hook registration\n   * function (which can then be used to register hooks of this type).\n   */\n  _defineEvent(name: string,\n               hookPhase: TransitionHookPhase,\n               hookOrder: number,\n               criteriaMatchPath: PathType,\n               reverseSort?: boolean,\n               getResultHandler?: GetResultHandler,\n               getErrorHandler?: GetErrorHandler,\n               rejectIfSuperseded?: boolean);\n\n  /**\n   * Returns the known event types, such as `onBefore`\n   * If a phase argument is provided, returns only events for the given phase.\n   */\n  _getEvents(phase?: TransitionHookPhase): TransitionEventType[];\n\n  /** Returns the hooks registered for the given hook name */\n  getHooks(hookName: string): RegisteredHook[];\n}\n/**\n * This class provides services related to Transitions.\n * \n * - Most importantly, it allows global Transition Hooks to be registered.\n * - It allows the default transition error handler to be set.\n * - It also has a factory function for creating new [[Transition]] objects, (used internally by the [[StateService]]).\n * \n * At bootstrap, [[UIRouter]] creates a single instance (singleton) of this class.\n */\nexport class TransitionService implements IHookRegistry, Disposable {\n/**\n * @hidden\n */\n_transitionCount = 0;\n/**\n * Registers a [[TransitionHookFn]], called *while a transition is being constructed*.\n * \n * Registers a transition lifecycle hook, which is invoked during transition construction.\n * \n * This low level hook should only be used by plugins.\n * This can be a useful time for plugins to add resolves or mutate the transition as needed.\n * The Sticky States plugin uses this hook to modify the treechanges.\n * \n * ### Lifecycle\n * \n * `onCreate` hooks are invoked *while a transition is being constructed*.\n * \n * ### Return value\n * \n * The hook's return value is ignored\n * \n * \\@internalapi\n * @param {?} criteria defines which Transitions the Hook should be invoked for.\n * @param {?} callback the hook function which will be invoked.\n * @param {?=} options the registration options\n * @return {?} a function which deregisters the hook.\n */\nonCreate(criteria: HookMatchCriteria, callback: TransitionCreateHookFn, options?: HookRegOptions): Function { return }\n/**\n * \\@inheritdoc\n * @param {?} criteria\n * @param {?} callback\n * @param {?=} options\n * @return {?}\n */\nonBefore(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function { return }\n/**\n * \\@inheritdoc\n * @param {?} criteria\n * @param {?} callback\n * @param {?=} options\n * @return {?}\n */\nonStart(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function { return }\n/**\n * \\@inheritdoc\n * @param {?} criteria\n * @param {?} callback\n * @param {?=} options\n * @return {?}\n */\nonExit(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function { return }\n/**\n * \\@inheritdoc\n * @param {?} criteria\n * @param {?} callback\n * @param {?=} options\n * @return {?}\n */\nonRetain(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function { return }\n/**\n * \\@inheritdoc\n * @param {?} criteria\n * @param {?} callback\n * @param {?=} options\n * @return {?}\n */\nonEnter(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function { return }\n/**\n * \\@inheritdoc\n * @param {?} criteria\n * @param {?} callback\n * @param {?=} options\n * @return {?}\n */\nonFinish(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function { return }\n/**\n * \\@inheritdoc\n * @param {?} criteria\n * @param {?} callback\n * @param {?=} options\n * @return {?}\n */\nonSuccess(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function { return }\n/**\n * \\@inheritdoc\n * @param {?} criteria\n * @param {?} callback\n * @param {?=} options\n * @return {?}\n */\nonError(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function { return }\n/**\n * @hidden\n */\npublic $view: ViewService;\n/**\n * @hidden The transition hook types, such as `onEnter`, `onStart`, etc\n */\nprivate _eventTypes: TransitionEventType[] = [];\n/**\n * @hidden The registered transition hooks\n */\n_registeredHooks = { } as RegisteredHooks;\n/**\n * @hidden The  paths on a criteria object\n */\nprivate _criteriaPaths = { } as PathTypes;\n/**\n * @hidden\n */\nprivate _router: UIRouter;\n/**\n * \\@internalapi\n */\n_pluginapi: TransitionServicePluginAPI;\n/**\n * This object has hook de-registration functions for the built-in hooks.\n * This can be used by third parties libraries that wish to customize the behaviors\n * \n * @hidden\n */\n_deregisterHookFns: {\n    addCoreResolves: Function;\n    ignored: Function;\n    invalid: Function;\n    redirectTo: Function;\n    onExit: Function;\n    onRetain: Function;\n    onEnter: Function;\n    eagerResolve: Function;\n    lazyResolve: Function;\n    loadViews: Function;\n    activateViews: Function;\n    updateGlobals: Function;\n    updateUrl: Function;\n    lazyLoad: Function;\n  };\n/**\n * @hidden\n * @param {?} _router\n */\nconstructor(_router: UIRouter) {\n    this._router = _router;\n    this.$view = _router.viewService;\n    this._deregisterHookFns = <any> {};\n    this._pluginapi = <TransitionServicePluginAPI> createProxyFunctions(val(this), {}, val(this), [\n      '_definePathType',\n      '_defineEvent',\n      '_getPathTypes',\n      '_getEvents',\n      'getHooks',\n    ]);\n\n    this._defineCorePaths();\n    this._defineCoreEvents();\n    this._registerCoreTransitionHooks();\n  }\n/**\n * dispose\n * \\@internalapi\n * @param {?} router\n * @return {?}\n */\ndispose(router: UIRouter) {\n    values(this._registeredHooks).forEach((hooksArray: RegisteredHook[]) => hooksArray.forEach(hook => {\n      hook._deregistered = true;\n      removeFrom(hooksArray, hook);\n    }));\n  }\n/**\n * Creates a new [[Transition]] object\n * \n * This is a factory function for creating new Transition objects.\n * It is used internally by the [[StateService]] and should generally not be called by application code.\n * \n * @param {?} fromPath the path to the current state (the from state)\n * @param {?} targetState the target state (destination)\n * @return {?} a Transition\n */\ncreate(fromPath: PathNode[], targetState: TargetState): Transition {\n    return new Transition(fromPath, targetState, this._router);\n  }\n/**\n * @hidden\n * @return {?}\n */\nprivate _defineCoreEvents() {\n    const /** @type {?} */ Phase = TransitionHookPhase;\n    const /** @type {?} */ TH = TransitionHook;\n    const /** @type {?} */ paths = this._criteriaPaths;\n    const /** @type {?} */ NORMAL_SORT = false, /** @type {?} */ REVERSE_SORT = true;\n    const /** @type {?} */ ASYNCHRONOUS = false, /** @type {?} */ SYNCHRONOUS = true;\n\n    this._defineEvent(\"onCreate\",  Phase.CREATE,  0,   paths.to, NORMAL_SORT, TH.LOG_REJECTED_RESULT, TH.THROW_ERROR, SYNCHRONOUS);\n\n    this._defineEvent(\"onBefore\",  Phase.BEFORE,  0,   paths.to);\n\n    this._defineEvent(\"onStart\",   Phase.RUN,     0,   paths.to);\n    this._defineEvent(\"onExit\",    Phase.RUN,     100, paths.exiting, REVERSE_SORT);\n    this._defineEvent(\"onRetain\",  Phase.RUN,     200, paths.retained);\n    this._defineEvent(\"onEnter\",   Phase.RUN,     300, paths.entering);\n    this._defineEvent(\"onFinish\",  Phase.RUN,     400, paths.to);\n\n    this._defineEvent(\"onSuccess\", Phase.SUCCESS, 0,   paths.to, NORMAL_SORT, TH.LOG_REJECTED_RESULT, TH.LOG_ERROR, SYNCHRONOUS);\n    this._defineEvent(\"onError\",   Phase.ERROR,   0,   paths.to, NORMAL_SORT, TH.LOG_REJECTED_RESULT, TH.LOG_ERROR, SYNCHRONOUS);\n  }\n/**\n * @hidden\n * @return {?}\n */\nprivate _defineCorePaths() {\n    const { STATE, TRANSITION } = TransitionHookScope;\n\n    this._definePathType(\"to\", TRANSITION);\n    this._definePathType(\"from\", TRANSITION);\n    this._definePathType(\"exiting\", STATE);\n    this._definePathType(\"retained\", STATE);\n    this._definePathType(\"entering\", STATE);\n  }\n/**\n * @hidden\n * @param {?} name\n * @param {?} hookPhase\n * @param {?} hookOrder\n * @param {?} criteriaMatchPath\n * @param {?=} reverseSort\n * @param {?=} getResultHandler\n * @param {?=} getErrorHandler\n * @param {?=} synchronous\n * @return {?}\n */\n_defineEvent(name: string,\n               hookPhase: TransitionHookPhase,\n               hookOrder: number,\n               criteriaMatchPath: PathType,\n               reverseSort: boolean = false,\n               getResultHandler: GetResultHandler = TransitionHook.HANDLE_RESULT,\n               getErrorHandler: GetErrorHandler = TransitionHook.REJECT_ERROR,\n               synchronous: boolean = false)\n  {\n    let /** @type {?} */ eventType = new TransitionEventType(name, hookPhase, hookOrder, criteriaMatchPath, reverseSort, getResultHandler, getErrorHandler, synchronous);\n\n    this._eventTypes.push(eventType);\n    makeEvent(this, this, eventType);\n  };\n/**\n * @hidden\n * @param {?=} phase\n * @return {?}\n */\nprivate _getEvents(phase?: TransitionHookPhase): TransitionEventType[] {\n    let /** @type {?} */ transitionHookTypes = isDefined(phase) ?\n        this._eventTypes.filter(type => type.hookPhase === phase) :\n        this._eventTypes.slice();\n\n    return transitionHookTypes.sort((l, r) => {\n      let /** @type {?} */ cmpByPhase = l.hookPhase - r.hookPhase;\n      return cmpByPhase === 0 ? l.hookOrder - r.hookOrder : cmpByPhase;\n    })\n  }\n/**\n * Adds a Path to be used as a criterion against a TreeChanges path\n * \n * For example: the `exiting` path in [[HookMatchCriteria]] is a STATE scoped path.\n * It was defined by calling `defineTreeChangesCriterion('exiting', TransitionHookScope.STATE)`\n * Each state in the exiting path is checked against the criteria and returned as part of the match.\n * \n * Another example: the `to` path in [[HookMatchCriteria]] is a TRANSITION scoped path.\n * It was defined by calling `defineTreeChangesCriterion('to', TransitionHookScope.TRANSITION)`\n * Only the tail of the `to` path is checked against the criteria and returned as part of the match.\n * \n * @hidden\n * @param {?} name\n * @param {?} hookScope\n * @return {?}\n */\nprivate _definePathType(name: string, hookScope: TransitionHookScope) {\n    this._criteriaPaths[name] = { name, scope: hookScope };\n  }\n/**\n * @hidden\n * @return {?}\n */\nprivate _getPathTypes(): PathTypes {\n    return this._criteriaPaths;\n  }\n/**\n * @hidden\n * @param {?} hookName\n * @return {?}\n */\npublic getHooks(hookName: string): RegisteredHook[] {\n    return this._registeredHooks[hookName];\n  }\n/**\n * @hidden\n * @return {?}\n */\nprivate _registerCoreTransitionHooks() {\n    let /** @type {?} */ fns = this._deregisterHookFns;\n\n    fns.addCoreResolves = registerAddCoreResolvables(this);\n    fns.ignored         = registerIgnoredTransitionHook(this);\n    fns.invalid         = registerInvalidTransitionHook(this);\n\n    // Wire up redirectTo hook\n    fns.redirectTo      = registerRedirectToHook(this);\n    \n    // Wire up onExit/Retain/Enter state hooks\n    fns.onExit          = registerOnExitHook(this);\n    fns.onRetain        = registerOnRetainHook(this);\n    fns.onEnter         = registerOnEnterHook(this);\n\n    // Wire up Resolve hooks\n    fns.eagerResolve    = registerEagerResolvePath(this);\n    fns.lazyResolve     = registerLazyResolveState(this);\n                                 \n    // Wire up the View management hooks\n    fns.loadViews       = registerLoadEnteringViews(this);\n    fns.activateViews   = registerActivateViews(this);\n\n    // Updates global state after a transition\n    fns.updateGlobals   = registerUpdateGlobalState(this);\n\n    // After globals.current is updated at priority: 10000\n    fns.updateUrl       = registerUpdateUrl(this);\n\n    // Lazy load state trees\n    fns.lazyLoad        = registerLazyLoadHook(this);\n  }\n}\n\nfunction TransitionService_tsickle_Closure_declarations() {\n/**\n * @hidden\n * @type {?}\n */\nTransitionService.prototype._transitionCount;\n/**\n * @hidden\n * @type {?}\n */\nTransitionService.prototype.$view;\n/**\n * @hidden The transition hook types, such as `onEnter`, `onStart`, etc\n * @type {?}\n */\nTransitionService.prototype._eventTypes;\n/**\n * @hidden The registered transition hooks\n * @type {?}\n */\nTransitionService.prototype._registeredHooks;\n/**\n * @hidden The  paths on a criteria object\n * @type {?}\n */\nTransitionService.prototype._criteriaPaths;\n/**\n * @hidden\n * @type {?}\n */\nTransitionService.prototype._router;\n/**\n * \\@internalapi\n * @type {?}\n */\nTransitionService.prototype._pluginapi;\n/**\n * This object has hook de-registration functions for the built-in hooks.\n * This can be used by third parties libraries that wish to customize the behaviors\n * \n * @hidden\n * @type {?}\n */\nTransitionService.prototype._deregisterHookFns;\n}\n\n","/** @module hooks */ /** */\n\n\nimport { TransitionService } from '../transition/transitionService';\nimport { Transition } from '../transition/transition';\n/**\n * A [[TransitionHookFn]] that rejects the Transition if it is invalid\n * \n * This hook is invoked at the end of the onBefore phase.\n * If the transition is invalid (for example, param values do not validate)\n * then the transition is rejected.\n * @param {?} trans\n * @return {?}\n */\nfunction invalidTransitionHook(trans: Transition) {\n  if (!trans.valid()) {\n    throw new Error(trans.error());\n  }\n}\n\nexport const /** @type {?} */ registerInvalidTransitionHook = (transitionService: TransitionService) =>\n    transitionService.onBefore({}, invalidTransitionHook, { priority: -10000 });\n","/** @module hooks */ /** */\n\n\nimport { trace } from '../common/trace';\nimport { Rejection } from '../transition/rejectFactory';\nimport { TransitionService } from '../transition/transitionService';\nimport { Transition } from '../transition/transition';\n/**\n * A [[TransitionHookFn]] that skips a transition if it should be ignored\n * \n * This hook is invoked at the end of the onBefore phase.\n * \n * If the transition should be ignored (because no parameter or states changed)\n * then the transition is ignored and not processed.\n * @param {?} trans\n * @return {?}\n */\nfunction ignoredHook(trans: Transition) {\n  const /** @type {?} */ ignoredReason = trans._ignoredReason();\n  if (!ignoredReason) return;\n\n  trace.traceTransitionIgnored(trans);\n\n  const /** @type {?} */ pending = trans.router.globals.transition;\n\n  // The user clicked a link going back to the *current state* ('A')\n  // However, there is also a pending transition in flight (to 'B')\n  // Abort the transition to 'B' because the user now wants to be back at 'A'.\n  if (ignoredReason === 'SameAsCurrent' && pending) {\n    pending.abort();\n  }\n\n  return Rejection.ignored().toPromise();\n}\n\nexport const /** @type {?} */ registerIgnoredTransitionHook = (transitionService: TransitionService) =>\n    transitionService.onBefore({}, ignoredHook, { priority: -9999 });\n","/** @module transition */ /** */\n\nimport { TransitionHookPhase, PathType } from './interface';\nimport { GetErrorHandler, GetResultHandler, TransitionHook } from './transitionHook';\n/**\n * This class defines a type of hook, such as `onBefore` or `onEnter`.\n * Plugins can define custom hook types, such as sticky states does for `onInactive`.\n * \n * \\@interalapi\n */\nexport class TransitionEventType {\n/**\n * @param {?} name\n * @param {?} hookPhase\n * @param {?} hookOrder\n * @param {?} criteriaMatchPath\n * @param {?=} reverseSort\n * @param {?=} getResultHandler\n * @param {?=} getErrorHandler\n * @param {?=} synchronous\n */\nconstructor(public name:               string,\npublic hookPhase:          TransitionHookPhase,\npublic hookOrder:          number,\npublic criteriaMatchPath:  PathType,\npublic reverseSort:        boolean = false,\npublic getResultHandler:   GetResultHandler = TransitionHook.HANDLE_RESULT,\npublic getErrorHandler:    GetErrorHandler = TransitionHook.REJECT_ERROR,\npublic synchronous:        boolean = false,\n  ) { }\n}\n\nfunction TransitionEventType_tsickle_Closure_declarations() {\n/** @type {?} */\nTransitionEventType.prototype.name;\n/** @type {?} */\nTransitionEventType.prototype.hookPhase;\n/** @type {?} */\nTransitionEventType.prototype.hookOrder;\n/** @type {?} */\nTransitionEventType.prototype.criteriaMatchPath;\n/** @type {?} */\nTransitionEventType.prototype.reverseSort;\n/** @type {?} */\nTransitionEventType.prototype.getResultHandler;\n/** @type {?} */\nTransitionEventType.prototype.getErrorHandler;\n/** @type {?} */\nTransitionEventType.prototype.synchronous;\n}\n\n","/** @module hooks */ /** */\n\nimport {Transition} from '../transition/transition';\nimport {TransitionService} from '../transition/transitionService';\nimport {TransitionHookFn} from '../transition/interface';\nimport {StateDeclaration, LazyLoadResult} from '../state/interface';\nimport {services} from '../common/coreservices';\nimport { StateRule } from '../url/interface';\n/**\n * A [[TransitionHookFn]] that performs lazy loading\n * \n * When entering a state \"abc\" which has a `lazyLoad` function defined:\n * - Invoke the `lazyLoad` function (unless it is already in process)\n *   - Flag the hook function as \"in process\"\n *   - The function should return a promise (that resolves when lazy loading is complete)\n * - Wait for the promise to settle\n *   - If the promise resolves to a [[LazyLoadResult]], then register those states\n *   - Flag the hook function as \"not in process\"\n * - If the hook was successful\n *   - Remove the `lazyLoad` function from the state declaration\n * - If all the hooks were successful\n *   - Retry the transition (by returning a TargetState)\n * \n * ```\n * .state('abc', {\n *   component: 'fooComponent',\n *   lazyLoad: () => System.import('./fooComponent')\n *   });\n * ```\n * \n * See [[StateDeclaration.lazyLoad]]\n */\nconst lazyLoadHook: TransitionHookFn = (transition: Transition) => {\n  let router = transition.router;\n\n  function retryTransition() {\n    if (transition.originalTransition().options().source !== 'url') {\n      // The original transition was not triggered via url sync\n      // The lazy state should be loaded now, so re-try the original transition\n      let orig = transition.targetState();\n      return router.stateService.target(orig.identifier(), orig.params(), orig.options());\n    }\n\n    // The original transition was triggered via url sync\n    // Run the URL rules and find the best match\n    let $url = router.urlService;\n    let result = $url.match($url.parts());\n    let rule = result && result.rule;\n\n    // If the best match is a state, redirect the transition (instead\n    // of calling sync() which supersedes the current transition)\n    if (rule && rule.type === \"STATE\") {\n      let state = (rule as StateRule).state;\n      let params = result.match;\n      return router.stateService.target(state, params, transition.options());\n    }\n\n    // No matching state found, so let .sync() choose the best non-state match/otherwise\n    router.urlService.sync();\n  }\n\n  let promises = transition.entering()\n      .filter(state => !!state.$$state().lazyLoad)\n      .map(state => lazyLoadState(transition, state));\n\n  return services.$q.all(promises).then(retryTransition);\n};\n\nexport const /** @type {?} */ registerLazyLoadHook = (transitionService: TransitionService) =>\n    transitionService.onBefore({ entering: (state) => !!state.lazyLoad }, lazyLoadHook);\n/**\n * Invokes a state's lazy load function\n * \n * @param {?} transition a Transition context\n * @param {?} state the state to lazy load\n * @return {?} A promise for the lazy load result\n */\nexport function lazyLoadState(transition: Transition, state: StateDeclaration): Promise<LazyLoadResult> {\n  let /** @type {?} */ lazyLoadFn = state.$$state().lazyLoad;\n\n  // Store/get the lazy load promise on/from the hookfn so it doesn't get re-invoked\n  let /** @type {?} */ promise = lazyLoadFn['_promise'];\n  if (!promise) {\n    const /** @type {?} */ success = (result) => {\n      delete state.lazyLoad;\n      delete state.$$state().lazyLoad;\n      delete lazyLoadFn['_promise'];\n      return result;\n    };\n\n    const /** @type {?} */ error = (err) => {\n      delete lazyLoadFn['_promise'];\n      return services.$q.reject(err);\n    };\n\n    promise = lazyLoadFn['_promise'] =\n        services.$q.when(lazyLoadFn(transition, state))\n            .then(updateStateRegistry)\n            .then(success, error);\n  }\n/**\n * Register any lazy loaded state definitions\n * @param {?} result\n * @return {?}\n */\nfunction updateStateRegistry(result: LazyLoadResult) {\n    if (result && Array.isArray(result.states)) {\n      result.states.forEach(state => transition.router.stateRegistry.register(state));\n    }\n    return result;\n  }\n\n  return promise;\n}\n","/** @module hooks */ /** */\n\nimport {UrlRouter} from '../url/urlRouter';\nimport {StateService} from '../state/stateService';\nimport {Transition} from '../transition/transition';\nimport {TransitionHookFn} from '../transition/interface';\nimport {TransitionService} from '../transition/transitionService';\n/**\n * A [[TransitionHookFn]] which updates the URL after a successful transition\n * \n * Registered using `transitionService.onSuccess({}, updateUrl);`\n */\nconst updateUrl: TransitionHookFn = (transition: Transition) => {\n  let options = transition.options();\n  let $state: StateService = transition.router.stateService;\n  let $urlRouter: UrlRouter = transition.router.urlRouter;\n\n  // Dont update the url in these situations:\n  // The transition was triggered by a URL sync (options.source === 'url')\n  // The user doesn't want the url to update (options.location === false)\n  // The destination state, and all parents have no navigable url\n  if (options.source !== 'url' && options.location && $state.$current.navigable) {\n    var urlOptions = {replace: options.location === 'replace'};\n    $urlRouter.push($state.$current.navigable.url, $state.params, urlOptions);\n  }\n\n  $urlRouter.update(true);\n};\n\nexport const /** @type {?} */ registerUpdateUrl = (transitionService: TransitionService) =>\n    transitionService.onSuccess({}, updateUrl, {priority: 9999});\n","/** @module hooks */\n/** for typedoc */\n\nimport { Transition } from '../transition/transition';\nimport { copy } from '../common/common';\nimport { TransitionService } from '../transition/transitionService';\n/**\n * A [[TransitionHookFn]] which updates global UI-Router state\n * \n * Registered using `transitionService.onBefore({}, updateGlobalState);`\n * \n * Before a [[Transition]] starts, updates the global value of \"the current transition\" ([[Globals.transition]]).\n * After a successful [[Transition]], updates the global values of \"the current state\"\n * ([[Globals.current]] and [[Globals.$current]]) and \"the current param values\" ([[Globals.params]]).\n * \n * See also the deprecated properties:\n * [[StateService.transition]], [[StateService.current]], [[StateService.params]]\n */\nconst updateGlobalState = (trans: Transition) => {\n  let globals = trans.router.globals;\n\n  const transitionSuccessful = () => {\n    globals.successfulTransitions.enqueue(trans);\n    globals.$current = trans.$to();\n    globals.current = globals.$current.self;\n\n    copy(trans.params(), globals.params);\n  };\n\n  const clearCurrentTransition = () => {\n    // Do not clear globals.transition if a different transition has started in the meantime\n    if (globals.transition === trans) globals.transition = null;\n  };\n\n  trans.onSuccess({}, transitionSuccessful, { priority: 10000 });\n  trans.promise.then(clearCurrentTransition, clearCurrentTransition);\n};\n\nexport const /** @type {?} */ registerUpdateGlobalState = (transitionService: TransitionService) =>\n    transitionService.onCreate({}, updateGlobalState);\n","/** @module hooks */ /** for typedoc */\n\nimport {noop} from '../common/common';\nimport {services} from '../common/coreservices';\nimport {Transition} from '../transition/transition';\nimport {ViewService} from '../view/view';\nimport {ViewConfig} from '../view/interface';\nimport {TransitionHookFn} from '../transition/interface';\nimport {TransitionService} from '../transition/transitionService';\n/**\n * A [[TransitionHookFn]] which waits for the views to load\n * \n * Registered using `transitionService.onStart({}, loadEnteringViews);`\n * \n * Allows the views to do async work in [[ViewConfig.load]] before the transition continues.\n * In angular 1, this includes loading the templates.\n */\nconst loadEnteringViews: TransitionHookFn = (transition: Transition) => {\n  let $q = services.$q;\n  let enteringViews = transition.views(\"entering\");\n  if (!enteringViews.length) return;\n  return $q.all(enteringViews.map(view => $q.when(view.load()))).then(noop);\n};\n\nexport const /** @type {?} */ registerLoadEnteringViews = (transitionService: TransitionService) =>\n    transitionService.onFinish({}, loadEnteringViews);\n/**\n * A [[TransitionHookFn]] which activates the new views when a transition is successful.\n * \n * Registered using `transitionService.onSuccess({}, activateViews);`\n * \n * After a transition is complete, this hook deactivates the old views from the previous state,\n * and activates the new views from the destination state.\n * \n * See [[ViewService]]\n */\nconst activateViews: TransitionHookFn = (transition: Transition) => {\n  let enteringViews = transition.views(\"entering\");\n  let exitingViews = transition.views(\"exiting\");\n  if (!enteringViews.length && !exitingViews.length) return;\n\n  let $view: ViewService = transition.router.viewService;\n\n  exitingViews.forEach((vc: ViewConfig) => $view.deactivateViewConfig(vc));\n  enteringViews.forEach((vc: ViewConfig) => $view.activateViewConfig(vc));\n\n  $view.sync();\n};\n\nexport const /** @type {?} */ registerActivateViews = (transitionService: TransitionService) =>\n    transitionService.onSuccess({}, activateViews);\n","/** @module hooks */\n/** for typedoc */\n\nimport { noop } from '../common/common';\nimport { Transition } from '../transition/transition';\nimport { ResolveContext } from '../resolve/resolveContext';\nimport { TransitionStateHookFn, TransitionHookFn } from '../transition/interface';\nimport { TransitionService } from '../transition/transitionService';\nimport { val } from '../common/hof';\nimport { StateDeclaration } from '../state/interface';\n/**\n * A [[TransitionHookFn]] which resolves all EAGER Resolvables in the To Path\n * \n * Registered using `transitionService.onStart({}, eagerResolvePath);`\n * \n * When a Transition starts, this hook resolves all the EAGER Resolvables, which the transition then waits for.\n * \n * See [[StateDeclaration.resolve]]\n */\nconst eagerResolvePath: TransitionHookFn = (trans: Transition) =>\n    new ResolveContext(trans.treeChanges().to)\n        .resolvePath(\"EAGER\", trans)\n        .then(noop);\n\nexport const /** @type {?} */ registerEagerResolvePath = (transitionService: TransitionService) =>\n    transitionService.onStart({}, eagerResolvePath, {priority: 1000});\n/**\n * A [[TransitionHookFn]] which resolves all LAZY Resolvables for the state (and all its ancestors) in the To Path\n * \n * Registered using `transitionService.onEnter({ entering: () => true }, lazyResolveState);`\n * \n * When a State is being entered, this hook resolves all the Resolvables for this state, which the transition then waits for.\n * \n * See [[StateDeclaration.resolve]]\n */\nconst lazyResolveState: TransitionStateHookFn = (trans: Transition, state: StateDeclaration) =>\n    new ResolveContext(trans.treeChanges().to)\n        .subContext(state.$$state())\n        .resolvePath(\"LAZY\", trans)\n        .then(noop);\n\nexport const /** @type {?} */ registerLazyResolveState = (transitionService: TransitionService) =>\n    transitionService.onEnter({ entering: val(true) }, lazyResolveState, {priority: 1000});\n\n","/** @module hooks */\n/** for typedoc */\n\nimport { TransitionStateHookFn } from '../transition/interface';\nimport { Transition } from '../transition/transition';\nimport { TransitionService } from '../transition/transitionService';\nimport { StateDeclaration } from '../state/interface';\nimport { StateObject } from '../state/stateObject';\n/**\n * A factory which creates an onEnter, onExit or onRetain transition hook function\n * \n * The returned function invokes the (for instance) state.onEnter hook when the\n * state is being entered.\n * \n * @hidden\n * @param {?} hookName\n * @return {?}\n */\nfunction makeEnterExitRetainHook(hookName: string): TransitionStateHookFn {\n  return (transition: Transition, state: StateDeclaration) => {\n    let /** @type {?} */ _state: StateObject = state.$$state();\n    let /** @type {?} */ hookFn: TransitionStateHookFn = _state[hookName];\n    return hookFn(transition, state);\n  }\n}\n/**\n * The [[TransitionStateHookFn]] for onExit\n * \n * When the state is being exited, the state's .onExit function is invoked.\n * \n * Registered using `transitionService.onExit({ exiting: (state) => !!state.onExit }, onExitHook);`\n * \n * See: [[IHookRegistry.onExit]]\n */\nconst onExitHook: TransitionStateHookFn = makeEnterExitRetainHook('onExit');\nexport const /** @type {?} */ registerOnExitHook = (transitionService: TransitionService) =>\n    transitionService.onExit({exiting: state => !!state.onExit}, onExitHook);\n/**\n * The [[TransitionStateHookFn]] for onRetain\n * \n * When the state was already entered, and is not being exited or re-entered, the state's .onRetain function is invoked.\n * \n * Registered using `transitionService.onRetain({ retained: (state) => !!state.onRetain }, onRetainHook);`\n * \n * See: [[IHookRegistry.onRetain]]\n */\nconst onRetainHook: TransitionStateHookFn = makeEnterExitRetainHook('onRetain');\nexport const /** @type {?} */ registerOnRetainHook = (transitionService: TransitionService) =>\n    transitionService.onRetain({retained: state => !!state.onRetain}, onRetainHook);\n/**\n * The [[TransitionStateHookFn]] for onEnter\n * \n * When the state is being entered, the state's .onEnter function is invoked.\n * \n * Registered using `transitionService.onEnter({ entering: (state) => !!state.onEnter }, onEnterHook);`\n * \n * See: [[IHookRegistry.onEnter]]\n */\nconst onEnterHook: TransitionStateHookFn = makeEnterExitRetainHook('onEnter');\nexport const /** @type {?} */ registerOnEnterHook = (transitionService: TransitionService) =>\n    transitionService.onEnter({entering: state => !!state.onEnter}, onEnterHook);\n\n","/** @module hooks */ /** */\n\nimport {isString, isFunction} from '../common/predicates';\nimport {Transition} from '../transition/transition';\nimport {services} from '../common/coreservices';\nimport {TargetState} from '../state/targetState';\nimport {TransitionService} from '../transition/transitionService';\nimport {TransitionHookFn} from '../transition/interface';\n/**\n * A [[TransitionHookFn]] that redirects to a different state or params\n * \n * Registered using `transitionService.onStart({ to: (state) => !!state.redirectTo }, redirectHook);`\n * \n * See [[StateDeclaration.redirectTo]]\n */\nconst redirectToHook: TransitionHookFn = (trans: Transition) => {\n  let redirect = trans.to().redirectTo;\n  if (!redirect) return;\n\n  let $state = trans.router.stateService;\n\n  function handleResult(result: any) {\n    if (!result) return;\n    if (result instanceof TargetState) return result;\n    if (isString(result)) return $state.target(<any> result, trans.params(), trans.options());\n    if (result['state'] || result['params'])\n      return $state.target(result['state'] || trans.to(), result['params'] || trans.params(), trans.options());\n  }\n\n  if (isFunction(redirect)) {\n    return services.$q.when(redirect(trans)).then(handleResult);\n  }\n  return handleResult(redirect);\n};\n\nexport const /** @type {?} */ registerRedirectToHook = (transitionService: TransitionService) =>\n    transitionService.onStart({to: (state) => !!state.redirectTo}, redirectToHook);\n","/** @module hooks */ /** */\n\nimport { Transition } from '../transition/transition';\nimport { UIRouter } from '../router';\nimport { TransitionService } from '../transition/transitionService';\n/**\n * @param {?} trans\n * @return {?}\n */\nfunction addCoreResolvables(trans: Transition) {\n  trans.addResolvable({ token: UIRouter,       deps: [], resolveFn: () => trans.router,   data: trans.router },   \"\");\n  trans.addResolvable({ token: Transition,     deps: [], resolveFn: () => trans,          data: trans },          \"\");\n  trans.addResolvable({ token: '$transition$', deps: [], resolveFn: () => trans,          data: trans },          \"\");\n  trans.addResolvable({ token: '$stateParams', deps: [], resolveFn: () => trans.params(), data: trans.params() }, \"\");\n\n  trans.entering().forEach(state => {\n    trans.addResolvable({ token: '$state$',    deps: [], resolveFn: () => state,          data: state },       state);\n  });\n}\n\nexport const /** @type {?} */ registerAddCoreResolvables = (transitionService: TransitionService) =>\n    transitionService.onCreate({}, addCoreResolvables);\n","/**\n * @coreapi\n * @module core\n */ /** */\n\nimport { UrlMatcherFactory } from './url/urlMatcherFactory';\nimport { UrlRouter } from './url/urlRouter';\nimport { TransitionService } from './transition/transitionService';\nimport { ViewService } from './view/view';\nimport { StateRegistry } from './state/stateRegistry';\nimport { StateService } from './state/stateService';\nimport { UIRouterGlobals } from './globals';\nimport { UIRouterPlugin, Disposable } from './interface';\nimport { values, removeFrom } from './common/common';\nimport { isFunction } from './common/predicates';\nimport { UrlService } from './url/urlService';\nimport { LocationServices, LocationConfig } from './common/coreservices';\nimport { Trace, trace } from './common/trace';\n/**\n * @hidden\n */\nlet _routerInstance = 0;\n/**\n * The master class used to instantiate an instance of UI-Router.\n * \n * UI-Router (for each specific framework) will create an instance of this class during bootstrap.\n * This class instantiates and wires the UI-Router services together.\n * \n * After a new instance of the UIRouter class is created, it should be configured for your app.\n * For instance, app states should be registered with the [[UIRouter.stateRegistry]].\n * \n * ---\n * \n * Normally the framework code will bootstrap UI-Router.\n * If you are bootstrapping UIRouter manually, tell it to monitor the URL by calling\n * [[UrlService.listen]] then [[UrlService.sync]].\n */\nexport class UIRouter {\n/**\n * @hidden\n */\n$id = _routerInstance++;\n/**\n * @hidden\n */\n_disposed = false;\n/**\n * @hidden\n */\nprivate _disposables: Disposable[] = [];\n/**\n * Provides trace information to the console\n */\ntrace: Trace = trace;\n/**\n * Provides services related to ui-view synchronization\n */\nviewService = new ViewService();\n/**\n * Provides services related to Transitions\n */\ntransitionService: TransitionService = new TransitionService(this);\n/**\n * Global router state\n */\nglobals: UIRouterGlobals = new UIRouterGlobals();\n/**\n * Deprecated for public use. Use [[urlService]] instead.\n * @deprecated Use [[urlService]] instead\n */\nurlMatcherFactory: UrlMatcherFactory = new UrlMatcherFactory();\n/**\n * Deprecated for public use. Use [[urlService]] instead.\n * @deprecated Use [[urlService]] instead\n */\nurlRouter: UrlRouter = new UrlRouter(this);\n/**\n * Provides a registry for states, and related registration services\n */\nstateRegistry: StateRegistry = new StateRegistry(this);\n/**\n * Provides services related to states\n */\nstateService = new StateService(this);\n/**\n * Provides services related to the URL\n */\nurlService: UrlService = new UrlService(this);\n/**\n * Registers an object to be notified when the router is disposed\n * @param {?} disposable\n * @return {?}\n */\ndisposable(disposable: Disposable) {\n    this._disposables.push(disposable);\n  }\n/**\n * Disposes this router instance\n * \n * When called, clears resources retained by the router by calling `dispose(this)` on all\n * registered [[disposable]] objects.\n * \n * Or, if a `disposable` object is provided, calls `dispose(this)` on that object only.\n * \n * @param {?=} disposable (optional) the disposable to dispose\n * @return {?}\n */\ndispose(disposable?: any): void {\n    if (disposable && isFunction(disposable.dispose)) {\n      disposable.dispose(this);\n      return undefined;\n    }\n\n    this._disposed = true;\n    this._disposables.slice().forEach(d => {\n      try {\n        typeof d.dispose === 'function' && d.dispose(this);\n        removeFrom(this._disposables, d);\n      } catch ( /** @type {?} */ignored) {}\n    });\n  }\n/**\n * Creates a new `UIRouter` object\n * \n * \\@internalapi\n * @param {?=} locationService a [[LocationServices]] implementation\n * @param {?=} locationConfig a [[LocationConfig]] implementation\n */\nconstructor(\npublic locationService: LocationServices = UrlService.locationServiceStub,\npublic locationConfig: LocationConfig = UrlService.locationConfigStub\n  ) {\n\n    this.viewService._pluginapi._rootViewContext(this.stateRegistry.root());\n    this.globals.$current = this.stateRegistry.root();\n    this.globals.current = this.globals.$current.self;\n\n    this.disposable(this.globals);\n    this.disposable(this.stateService);\n    this.disposable(this.stateRegistry);\n    this.disposable(this.transitionService);\n    this.disposable(this.urlRouter);\n    this.disposable(locationService);\n    this.disposable(locationConfig);\n  }\n/**\n * @hidden\n */\nprivate _plugins: { [key: string]: UIRouterPlugin } = {};\n\n  /** Add plugin (as ES6 class) */\n  plugin<T extends UIRouterPlugin>(plugin: { new(router: UIRouter, options?: any): T }, options?: any): T;\n  /** Add plugin (as javascript constructor function) */\n  plugin<T extends UIRouterPlugin>(plugin: { (router: UIRouter, options?: any): void }, options?: any): T;\n  /** Add plugin (as javascript factory function) */\n  plugin<T extends UIRouterPlugin>(plugin: PluginFactory<T>, options?: any): T;\n/**\n * Adds a plugin to UI-Router\n * \n * This method adds a UI-Router Plugin.\n * A plugin can enhance or change UI-Router behavior using any public API.\n * \n * #### Example:\n * ```js\n * import { MyCoolPlugin } from \"ui-router-cool-plugin\";\n * \n * var plugin = router.addPlugin(MyCoolPlugin);\n * ```\n * \n * ### Plugin authoring\n * \n * A plugin is simply a class (or constructor function) which accepts a [[UIRouter]] instance and (optionally) an options object.\n * \n * The plugin can implement its functionality using any of the public APIs of [[UIRouter]].\n * For example, it may configure router options or add a Transition Hook.\n * \n * The plugin can then be published as a separate module.\n * \n * #### Example:\n * ```js\n * export class MyAuthPlugin implements UIRouterPlugin {\n *   constructor(router: UIRouter, options: any) {\n *     this.name = \"MyAuthPlugin\";\n *     let $transitions = router.transitionService;\n *     let $state = router.stateService;\n * \n *     let authCriteria = {\n *       to: (state) => state.data && state.data.requiresAuth\n *     };\n * \n *     function authHook(transition: Transition) {\n *       let authService = transition.injector().get('AuthService');\n *       if (!authService.isAuthenticated()) {\n *         return $state.target('login');\n *       }\n *     }\n * \n *     $transitions.onStart(authCriteria, authHook);\n *   }\n * }\n * ```\n * \n * @template T\n * @param {?} plugin one of:\n *        - a plugin class which implements [[UIRouterPlugin]]\n *        - a constructor function for a [[UIRouterPlugin]] which accepts a [[UIRouter]] instance\n *        - a factory function which accepts a [[UIRouter]] instance and returns a [[UIRouterPlugin]] instance\n * @param {?=} options options to pass to the plugin class/factory\n * @return {?} the registered plugin instance\n */\nplugin<T extends UIRouterPlugin>(plugin: any, options: any = {}): T {\n    let /** @type {?} */ pluginInstance = new plugin(this, options);\n    if (!pluginInstance.name) throw new Error(\"Required property `name` missing on plugin: \" + pluginInstance);\n    this._disposables.push(pluginInstance);\n    return this._plugins[pluginInstance.name] = pluginInstance;\n  }\n\n  /**\n   * Returns registered plugins\n   *\n   * Returns the registered plugin of the given `pluginName`.\n   * If no `pluginName` is given, returns all registered plugins\n   *\n   * @param pluginName (optional) the name of the plugin to get\n   * @return the named plugin (undefined if not found), or all plugins (if `pluginName` is omitted)\n   */\n  getPlugin(pluginName: string): UIRouterPlugin;\n  getPlugin(): UIRouterPlugin[];\n/**\n * @param {?=} pluginName\n * @return {?}\n */\ngetPlugin(pluginName?: string): UIRouterPlugin|UIRouterPlugin[] {\n    return pluginName ? this._plugins[pluginName] : values(this._plugins);\n  }\n}\n\nfunction UIRouter_tsickle_Closure_declarations() {\n/**\n * @hidden\n * @type {?}\n */\nUIRouter.prototype.$id;\n/**\n * @hidden\n * @type {?}\n */\nUIRouter.prototype._disposed;\n/**\n * @hidden\n * @type {?}\n */\nUIRouter.prototype._disposables;\n/**\n * Provides trace information to the console\n * @type {?}\n */\nUIRouter.prototype.trace;\n/**\n * Provides services related to ui-view synchronization\n * @type {?}\n */\nUIRouter.prototype.viewService;\n/**\n * Provides services related to Transitions\n * @type {?}\n */\nUIRouter.prototype.transitionService;\n/**\n * Global router state\n * @type {?}\n */\nUIRouter.prototype.globals;\n/**\n * Deprecated for public use. Use [[urlService]] instead.\n * @deprecated Use [[urlService]] instead\n * @type {?}\n */\nUIRouter.prototype.urlMatcherFactory;\n/**\n * Deprecated for public use. Use [[urlService]] instead.\n * @deprecated Use [[urlService]] instead\n * @type {?}\n */\nUIRouter.prototype.urlRouter;\n/**\n * Provides a registry for states, and related registration services\n * @type {?}\n */\nUIRouter.prototype.stateRegistry;\n/**\n * Provides services related to states\n * @type {?}\n */\nUIRouter.prototype.stateService;\n/**\n * Provides services related to the URL\n * @type {?}\n */\nUIRouter.prototype.urlService;\n/**\n * @hidden\n * @type {?}\n */\nUIRouter.prototype._plugins;\n/** @type {?} */\nUIRouter.prototype.locationService;\n/** @type {?} */\nUIRouter.prototype.locationConfig;\n}\n\n\n/** @internalapi */\nexport type PluginFactory<T> = (router: UIRouter, options?: any) => T;\n","/**\n * @coreapi\n * @module url\n */ /** */\n\n\nimport { UIRouter } from '../router';\nimport { LocationServices, notImplemented, LocationConfig } from '../common/coreservices';\nimport { noop, createProxyFunctions } from '../common/common';\nimport { UrlConfigApi, UrlSyncApi, UrlRulesApi, UrlParts, MatchResult } from './interface';\n/**\n * @hidden\n */\nconst makeStub = (keys: string[]): any =>\n    keys.reduce((acc, key) => (acc[key] = notImplemented(key), acc), { dispose: noop });\n/**\n * @hidden\n */\nconst locationServicesFns = [\"url\", \"path\", \"search\", \"hash\", \"onChange\"];\n/**\n * @hidden\n */\nconst locationConfigFns = [\"port\", \"protocol\", \"host\", \"baseHref\", \"html5Mode\", \"hashPrefix\"];\n/**\n * @hidden\n */\nconst umfFns = [\"type\", \"caseInsensitive\", \"strictMode\", \"defaultSquashPolicy\"];\n/**\n * @hidden\n */\nconst rulesFns = [\"sort\", \"when\", \"initial\", \"otherwise\", \"rules\", \"rule\", \"removeRule\"];\n/**\n * @hidden\n */\nconst syncFns = [\"deferIntercept\", \"listen\", \"sync\", \"match\"];\n/**\n * API for URL management\n */\nexport class UrlService implements LocationServices, UrlSyncApi {\n/**\n * @hidden\n */\nstatic locationServiceStub: LocationServices = makeStub(locationServicesFns);\n/**\n * @hidden\n */\nstatic locationConfigStub: LocationConfig = makeStub(locationConfigFns);\n\n  /** @inheritdoc */\n  url(): string;\n  /** @inheritdoc */\n  url(newurl: string, replace?: boolean, state?): void;\n/**\n * @param {?=} newurl\n * @param {?=} replace\n * @param {?=} state\n * @return {?}\n */\nurl(newurl?, replace?, state?): any { return };\n/**\n * \\@inheritdoc\n * @return {?}\n */\npath(): string { return };\n/**\n * \\@inheritdoc\n * @return {?}\n */\nsearch(): { [key: string]: any } { return };\n/**\n * \\@inheritdoc\n * @return {?}\n */\nhash(): string { return };\n/**\n * \\@inheritdoc\n * @param {?} callback\n * @return {?}\n */\nonChange(callback: Function): Function { return };\n/**\n * Returns the current URL parts\n * \n * This method returns the current URL components as a [[UrlParts]] object.\n * \n * @return {?} the current url parts\n */\nparts(): UrlParts {\n    return { path: this.path(), search: this.search(), hash: this.hash() }\n  }\n/**\n * @return {?}\n */\ndispose() { }\n/**\n * \\@inheritdoc\n * @param {?=} evt\n * @return {?}\n */\nsync(evt?) { return }\n/**\n * \\@inheritdoc\n * @param {?=} enabled\n * @return {?}\n */\nlisten(enabled?: boolean): Function { return };\n/**\n * \\@inheritdoc\n * @param {?=} defer\n * @return {?}\n */\ndeferIntercept(defer?: boolean) { return }\n/**\n * \\@inheritdoc\n * @param {?} urlParts\n * @return {?}\n */\nmatch(urlParts: UrlParts): MatchResult { return }\n/**\n * A nested API for managing URL rules and rewrites\n * \n * See: [[UrlRulesApi]] for details\n */\nrules: UrlRulesApi;\n/**\n * A nested API to configure the URL and retrieve URL information\n * \n * See: [[UrlConfigApi]] for details\n */\nconfig: UrlConfigApi;\n/**\n * @hidden\n */\nprivate router: UIRouter;\n/**\n * @hidden\n * @param {?} router\n * @param {?=} lateBind\n */\nconstructor(router: UIRouter, lateBind = true) {\n    this.router = router;\n    this.rules = {} as any;\n    this.config = {} as any;\n\n    // proxy function calls from UrlService to the LocationService/LocationConfig\n    const locationServices = () => router.locationService;\n    createProxyFunctions(locationServices, this, locationServices, locationServicesFns, lateBind);\n\n    const locationConfig = () => router.locationConfig;\n    createProxyFunctions(locationConfig, this.config, locationConfig, locationConfigFns, lateBind);\n\n    const umf = () => router.urlMatcherFactory;\n    createProxyFunctions(umf, this.config, umf, umfFns);\n\n    const urlRouter = () => router.urlRouter;\n    createProxyFunctions(urlRouter, this.rules, urlRouter, rulesFns);\n    createProxyFunctions(urlRouter, this, urlRouter, syncFns);\n  }\n}\n\nfunction UrlService_tsickle_Closure_declarations() {\n/**\n * @hidden\n * @type {?}\n */\nUrlService.locationServiceStub;\n/**\n * @hidden\n * @type {?}\n */\nUrlService.locationConfigStub;\n/**\n * A nested API for managing URL rules and rewrites\n * \n * See: [[UrlRulesApi]] for details\n * @type {?}\n */\nUrlService.prototype.rules;\n/**\n * A nested API to configure the URL and retrieve URL information\n * \n * See: [[UrlConfigApi]] for details\n * @type {?}\n */\nUrlService.prototype.config;\n/**\n * @hidden\n * @type {?}\n */\nUrlService.prototype.router;\n}\n\n","/**\n * @coreapi\n * @module core\n */ /** */\n\nimport {StateParams} from './params/stateParams';\nimport {StateDeclaration} from './state/interface';\nimport {StateObject} from './state/stateObject';\nimport {Transition} from './transition/transition';\nimport {Queue} from './common/queue';\nimport {TransitionService} from './transition/transitionService';\nimport {copy} from './common/common';\nimport { Disposable } from './interface';\n/**\n * Global router state\n * \n * This is where we hold the global mutable state such as current state, current\n * params, current transition, etc.\n */\nexport class UIRouterGlobals implements Disposable {\n/**\n * Current parameter values\n * \n * The parameter values from the latest successful transition\n */\nparams: StateParams = new StateParams();\n/**\n * Current state\n * \n * The to-state from the latest successful transition\n */\ncurrent: StateDeclaration;\n/**\n * Current state (internal object)\n * \n * The to-state from the latest successful transition\n * \\@internalapi\n */\n$current: StateObject;\n/**\n * The current started/running transition.\n * This transition has reached at least the onStart phase, but is not yet complete\n */\ntransition: Transition;\n/**\n * \\@internalapi\n */\nlastStartedTransitionId: number = -1;\n/**\n * \\@internalapi\n */\ntransitionHistory = new Queue<Transition>([], 1);\n/**\n * \\@internalapi\n */\nsuccessfulTransitions = new Queue<Transition>([], 1);\n/**\n * @return {?}\n */\ndispose() {\n    this.transitionHistory.clear();\n    this.successfulTransitions.clear();\n    this.transition = null;\n  }\n}\n\nfunction UIRouterGlobals_tsickle_Closure_declarations() {\n/**\n * Current parameter values\n * \n * The parameter values from the latest successful transition\n * @type {?}\n */\nUIRouterGlobals.prototype.params;\n/**\n * Current state\n * \n * The to-state from the latest successful transition\n * @type {?}\n */\nUIRouterGlobals.prototype.current;\n/**\n * Current state (internal object)\n * \n * The to-state from the latest successful transition\n * \\@internalapi\n * @type {?}\n */\nUIRouterGlobals.prototype.$current;\n/**\n * The current started/running transition.\n * This transition has reached at least the onStart phase, but is not yet complete\n * @type {?}\n */\nUIRouterGlobals.prototype.transition;\n/**\n * \\@internalapi\n * @type {?}\n */\nUIRouterGlobals.prototype.lastStartedTransitionId;\n/**\n * \\@internalapi\n * @type {?}\n */\nUIRouterGlobals.prototype.transitionHistory;\n/**\n * \\@internalapi\n * @type {?}\n */\nUIRouterGlobals.prototype.successfulTransitions;\n}\n\n","/**\n * @coreapi\n * @module view\n */ /** for typedoc */\n\nimport {equals, applyPairs, removeFrom, TypedMap} from '../common/common';\nimport {curry, prop} from '../common/hof';\nimport {isString, isArray} from '../common/predicates';\nimport {trace} from '../common/trace';\nimport {PathNode} from '../path/pathNode';\n\nimport {ActiveUIView, ViewContext, ViewConfig} from './interface';\nimport {_ViewDeclaration} from '../state/interface';\n\nexport type ViewConfigFactory = (path: PathNode[], decl: _ViewDeclaration) => ViewConfig|ViewConfig[];\n\nexport interface ViewServicePluginAPI {\n  _rootViewContext(context?: ViewContext): ViewContext;\n  _viewConfigFactory(viewType: string, factory: ViewConfigFactory);\n  _registeredUIViews(): ActiveUIView[];\n  _activeViewConfigs(): ViewConfig[];\n}\n/**\n * The View service\n * \n * This service pairs existing `ui-view` components (which live in the DOM)\n * with view configs (from the state declaration objects: [[StateDeclaration.views]]).\n * \n * - After a successful Transition, the views from the newly entered states are activated via [[activateViewConfig]].\n *   The views from exited states are deactivated via [[deactivateViewConfig]].\n *   (See: the [[registerActivateViews]] Transition Hook)\n * \n * - As `ui-view` components pop in and out of existence, they register themselves using [[registerUIView]].\n * \n * - When the [[sync]] function is called, the registered `ui-view`(s) ([[ActiveUIView]])\n * are configured with the matching [[ViewConfig]](s)\n * \n */\nexport class ViewService {\nprivate _uiViews: ActiveUIView[] = [];\nprivate _viewConfigs: ViewConfig[] = [];\nprivate _rootContext: ViewContext;\nprivate _viewConfigFactories: { [key: string]: ViewConfigFactory } = {};\nconstructor() { }\npublic _pluginapi: ViewServicePluginAPI = {\n    _rootViewContext: this._rootViewContext.bind(this),\n    _viewConfigFactory: this._viewConfigFactory.bind(this),\n    _registeredUIViews: () => this._uiViews,\n    _activeViewConfigs: () => this._viewConfigs,\n  };\n/**\n * @param {?=} context\n * @return {?}\n */\nprivate _rootViewContext(context?: ViewContext): ViewContext {\n    return this._rootContext = context || this._rootContext;\n  };\n/**\n * @param {?} viewType\n * @param {?} factory\n * @return {?}\n */\nprivate _viewConfigFactory(viewType: string, factory: ViewConfigFactory) {\n    this._viewConfigFactories[viewType] = factory;\n  }\n/**\n * @param {?} path\n * @param {?} decl\n * @return {?}\n */\ncreateViewConfig(path: PathNode[], decl: _ViewDeclaration): ViewConfig[] {\n    let /** @type {?} */ cfgFactory = this._viewConfigFactories[decl.$type];\n    if (!cfgFactory) throw new Error(\"ViewService: No view config factory registered for type \" + decl.$type);\n    let /** @type {?} */ cfgs = cfgFactory(path, decl);\n    return isArray(cfgs) ? cfgs : [cfgs];\n  }\n/**\n * Deactivates a ViewConfig.\n * \n * This function deactivates a `ViewConfig`.\n * After calling [[sync]], it will un-pair from any `ui-view` with which it is currently paired.\n * \n * @param {?} viewConfig The ViewConfig view to deregister.\n * @return {?}\n */\ndeactivateViewConfig(viewConfig: ViewConfig) {\n    trace.traceViewServiceEvent(\"<- Removing\", viewConfig);\n    removeFrom(this._viewConfigs, viewConfig);\n  }\n/**\n * @param {?} viewConfig\n * @return {?}\n */\nactivateViewConfig(viewConfig: ViewConfig) {\n    trace.traceViewServiceEvent(\"-> Registering\", /** @type {?} */(( <any> viewConfig)));\n    this._viewConfigs.push(viewConfig);\n  }\n/**\n * Given a ui-view and a ViewConfig, determines if they \"match\".\n * \n * A ui-view has a fully qualified name (fqn) and a context object.  The fqn is built from its overall location in\n * the DOM, describing its nesting relationship to any parent ui-view tags it is nested inside of.\n * \n * A ViewConfig has a target ui-view name and a context anchor.  The ui-view name can be a simple name, or\n * can be a segmented ui-view path, describing a portion of a ui-view fqn.\n * \n * In order for a ui-view to match ViewConfig, ui-view's $type must match the ViewConfig's $type\n * \n * If the ViewConfig's target ui-view name is a simple name (no dots), then a ui-view matches if:\n * - the ui-view's name matches the ViewConfig's target name\n * - the ui-view's context matches the ViewConfig's anchor\n * \n * If the ViewConfig's target ui-view name is a segmented name (with dots), then a ui-view matches if:\n * - There exists a parent ui-view where:\n *    - the parent ui-view's name matches the first segment (index 0) of the ViewConfig's target name\n *    - the parent ui-view's context matches the ViewConfig's anchor\n * - And the remaining segments (index 1..n) of the ViewConfig's target name match the tail of the ui-view's fqn\n * \n * Example:\n * \n * DOM:\n * <ui-view>                        <!-- created in the root context (name: \"\") -->\n *   <ui-view name=\"foo\">                <!-- created in the context named: \"A\"      -->\n *     <ui-view>                    <!-- created in the context named: \"A.B\"    -->\n *       <ui-view name=\"bar\">            <!-- created in the context named: \"A.B.C\"  -->\n *       </ui-view>\n *     </ui-view>\n *   </ui-view>\n * </ui-view>\n * \n * uiViews: [\n *  { fqn: \"$default\",                  creationContext: { name: \"\" } },\n *  { fqn: \"$default.foo\",              creationContext: { name: \"A\" } },\n *  { fqn: \"$default.foo.$default\",     creationContext: { name: \"A.B\" } }\n *  { fqn: \"$default.foo.$default.bar\", creationContext: { name: \"A.B.C\" } }\n * ]\n * \n * These four view configs all match the ui-view with the fqn: \"$default.foo.$default.bar\":\n * \n * - ViewConfig1: { uiViewName: \"bar\",                       uiViewContextAnchor: \"A.B.C\" }\n * - ViewConfig2: { uiViewName: \"$default.bar\",              uiViewContextAnchor: \"A.B\" }\n * - ViewConfig3: { uiViewName: \"foo.$default.bar\",          uiViewContextAnchor: \"A\" }\n * - ViewConfig4: { uiViewName: \"$default.foo.$default.bar\", uiViewContextAnchor: \"\" }\n * \n * Using ViewConfig3 as an example, it matches the ui-view with fqn \"$default.foo.$default.bar\" because:\n * - The ViewConfig's segmented target name is: [ \"foo\", \"$default\", \"bar\" ]\n * - There exists a parent ui-view (which has fqn: \"$default.foo\") where:\n *    - the parent ui-view's name \"foo\" matches the first segment \"foo\" of the ViewConfig's target name\n *    - the parent ui-view's context \"A\" matches the ViewConfig's anchor context \"A\"\n * - And the remaining segments [ \"$default\", \"bar\" ].join(\".\"_ of the ViewConfig's target name match\n *   the tail of the ui-view's fqn \"default.bar\"\n * \n * \\@internalapi\n */\nstatic matches = (uiViewsByFqn: TypedMap<ActiveUIView>, uiView: ActiveUIView) => (viewConfig: ViewConfig) => {\n    // Don't supply an ng1 ui-view with an ng2 ViewConfig, etc\n    if (uiView.$type !== viewConfig.viewDecl.$type) return false;\n\n    // Split names apart from both viewConfig and uiView into segments\n    let vc = viewConfig.viewDecl;\n    let vcSegments = vc.$uiViewName.split(\".\");\n    let uivSegments = uiView.fqn.split(\".\");\n\n    // Check if the tails of the segment arrays match. ex, these arrays' tails match:\n    // vc: [\"foo\", \"bar\"], uiv fqn: [\"$default\", \"foo\", \"bar\"]\n    if (!equals(vcSegments, uivSegments.slice(0 - vcSegments.length)))\n      return false;\n\n    // Now check if the fqn ending at the first segment of the viewConfig matches the context:\n    // [\"$default\", \"foo\"].join(\".\") == \"$default.foo\", does the ui-view $default.foo context match?\n    let negOffset = (1 - vcSegments.length) || undefined;\n    let fqnToFirstSegment = uivSegments.slice(0, negOffset).join(\".\");\n    let uiViewContext = uiViewsByFqn[fqnToFirstSegment].creationContext;\n    return vc.$uiViewContextAnchor === (uiViewContext && uiViewContext.name);\n  }\n/**\n * @return {?}\n */\nsync() {\n    let /** @type {?} */ uiViewsByFqn: TypedMap<ActiveUIView> =\n        this._uiViews.map(uiv => [uiv.fqn, uiv]).reduce(applyPairs, /** @type {?} */(( <any> {})));\n/**\n * @param {?} uiView\n * @return {?}\n */\nfunction uiViewDepth(uiView: ActiveUIView) {\n      const /** @type {?} */ stateDepth = (context: ViewContext) =>\n          context && context.parent ? stateDepth(context.parent) + 1 : 1;\n      return (uiView.fqn.split(\".\").length * 10000) + stateDepth(uiView.creationContext);\n    }\n/**\n * @param {?} config\n * @return {?}\n */\nfunction viewConfigDepth(config: ViewConfig) {\n      let /** @type {?} */ context: ViewContext = config.viewDecl.$context, /** @type {?} */ count = 0;\n      while (++count && context.parent) context = context.parent;\n      return count;\n    }\n\n    // Given a depth function, returns a compare function which can return either ascending or descending order\n    const /** @type {?} */ depthCompare = curry((depthFn, posNeg, left, right) => posNeg * (depthFn(left) - depthFn(right)));\n\n    const /** @type {?} */ matchingConfigPair = (uiView: ActiveUIView) => {\n      let /** @type {?} */ matchingConfigs = this._viewConfigs.filter(ViewService.matches(uiViewsByFqn, uiView));\n      if (matchingConfigs.length > 1) {\n        // This is OK.  Child states can target a ui-view that the parent state also targets (the child wins)\n        // Sort by depth and return the match from the deepest child\n        // console.log(`Multiple matching view configs for ${uiView.fqn}`, matchingConfigs);\n        matchingConfigs.sort(depthCompare(viewConfigDepth, -1)); // descending\n      }\n      return [uiView, matchingConfigs[0]];\n    };\n\n    const /** @type {?} */ configureUIView = ([uiView, viewConfig]) => {\n      // If a parent ui-view is reconfigured, it could destroy child ui-views.\n      // Before configuring a child ui-view, make sure it's still in the active uiViews array.\n      if (this._uiViews.indexOf(uiView) !== -1)\n        uiView.configUpdated(viewConfig);\n    };\n\n    // Sort views by FQN and state depth. Process uiviews nearest the root first.\n    const /** @type {?} */ pairs = this._uiViews.sort(depthCompare(uiViewDepth, 1)).map(matchingConfigPair);\n\n    trace.traceViewSync(pairs);\n\n    pairs.forEach(configureUIView);\n  };\n/**\n * Registers a `ui-view` component\n * \n * When a `ui-view` component is created, it uses this method to register itself.\n * After registration the [[sync]] method is used to ensure all `ui-view` are configured with the proper [[ViewConfig]].\n * \n * Note: the `ui-view` component uses the `ViewConfig` to determine what view should be loaded inside the `ui-view`,\n * and what the view's state context is.\n * \n * Note: There is no corresponding `deregisterUIView`.\n *       A `ui-view` should hang on to the return value of `registerUIView` and invoke it to deregister itself.\n * \n * @param {?} uiView The metadata for a UIView\n * @return {?} a de-registration function used when the view is destroyed.\n */\nregisterUIView(uiView: ActiveUIView) {\n    trace.traceViewServiceUIViewEvent(\"-> Registering\", uiView);\n    let /** @type {?} */ uiViews = this._uiViews;\n    const /** @type {?} */ fqnAndTypeMatches = (uiv: ActiveUIView) => uiv.fqn === uiView.fqn && uiv.$type === uiView.$type;\n    if (uiViews.filter(fqnAndTypeMatches).length)\n      trace.traceViewServiceUIViewEvent(\"!!!! duplicate uiView named:\", uiView);\n\n    uiViews.push(uiView);\n    this.sync();\n\n    return () => {\n      let /** @type {?} */ idx = uiViews.indexOf(uiView);\n      if (idx === -1) {\n        trace.traceViewServiceUIViewEvent(\"Tried removing non-registered uiView\", uiView);\n        return;\n      }\n      trace.traceViewServiceUIViewEvent(\"<- Deregistering\", uiView);\n      removeFrom(uiViews)(uiView);\n    };\n  };\n/**\n * Returns the list of views currently available on the page, by fully-qualified name.\n * \n * @return {?}\n */\navailable() {\n    return this._uiViews.map(prop(\"fqn\"));\n  }\n/**\n * Returns the list of views on the page containing loaded content.\n * \n * @return {?}\n */\nactive() {\n    return this._uiViews.filter(prop(\"$config\")).map(prop(\"name\"));\n  }\n/**\n * Normalizes a view's name from a state.views configuration block.\n * \n * This should be used by a framework implementation to calculate the values for\n * [[_ViewDeclaration.$uiViewName]] and [[_ViewDeclaration.$uiViewContextAnchor]].\n * \n * @param {?} context the context object (state declaration) that the view belongs to\n * @param {?=} rawViewName the name of the view, as declared in the [[StateDeclaration.views]]\n * \n * @return {?} the normalized uiViewName and uiViewContextAnchor that the view targets\n */\nstatic normalizeUIViewTarget(context: ViewContext, rawViewName = \"\") {\n    // TODO: Validate incoming view name with a regexp to allow:\n    // ex: \"view.name@foo.bar\" , \"^.^.view.name\" , \"view.name@^.^\" , \"\" ,\n    // \"@\" , \"$default@^\" , \"!$default.$default\" , \"!foo.bar\"\n    let /** @type {?} */ viewAtContext: string[] = rawViewName.split(\"@\");\n    let /** @type {?} */ uiViewName = viewAtContext[0] || \"$default\";  // default to unnamed view\n    let /** @type {?} */ uiViewContextAnchor = isString(viewAtContext[1]) ? viewAtContext[1] : \"^\";    // default to parent context\n\n    // Handle relative view-name sugar syntax.\n    // Matches rawViewName \"^.^.^.foo.bar\" into array: [\"^.^.^.foo.bar\", \"^.^.^\", \"foo.bar\"],\n    let /** @type {?} */ relativeViewNameSugar = /^(\\^(?:\\.\\^)*)\\.(.*$)/.exec(uiViewName);\n    if (relativeViewNameSugar) {\n      // Clobbers existing contextAnchor (rawViewName validation will fix this)\n      uiViewContextAnchor = relativeViewNameSugar[1]; // set anchor to \"^.^.^\"\n      uiViewName = relativeViewNameSugar[2]; // set view-name to \"foo.bar\"\n    }\n\n    if (uiViewName.charAt(0) === '!') {\n      uiViewName = uiViewName.substr(1);\n      uiViewContextAnchor = \"\"; // target absolutely from root\n    }\n\n    // handle parent relative targeting \"^.^.^\"\n    let /** @type {?} */ relativeMatch = /^(\\^(?:\\.\\^)*)$/;\n    if (relativeMatch.exec(uiViewContextAnchor)) {\n      let /** @type {?} */ anchor = uiViewContextAnchor.split(\".\").reduce(((anchor, x) => anchor.parent), context);\n      uiViewContextAnchor = anchor.name;\n    } else if (uiViewContextAnchor === '.') {\n      uiViewContextAnchor = context.name;\n    }\n\n    return {uiViewName, uiViewContextAnchor};\n  }\n}\n\nfunction ViewService_tsickle_Closure_declarations() {\n/**\n * Given a ui-view and a ViewConfig, determines if they \"match\".\n * \n * A ui-view has a fully qualified name (fqn) and a context object.  The fqn is built from its overall location in\n * the DOM, describing its nesting relationship to any parent ui-view tags it is nested inside of.\n * \n * A ViewConfig has a target ui-view name and a context anchor.  The ui-view name can be a simple name, or\n * can be a segmented ui-view path, describing a portion of a ui-view fqn.\n * \n * In order for a ui-view to match ViewConfig, ui-view's $type must match the ViewConfig's $type\n * \n * If the ViewConfig's target ui-view name is a simple name (no dots), then a ui-view matches if:\n * - the ui-view's name matches the ViewConfig's target name\n * - the ui-view's context matches the ViewConfig's anchor\n * \n * If the ViewConfig's target ui-view name is a segmented name (with dots), then a ui-view matches if:\n * - There exists a parent ui-view where:\n *    - the parent ui-view's name matches the first segment (index 0) of the ViewConfig's target name\n *    - the parent ui-view's context matches the ViewConfig's anchor\n * - And the remaining segments (index 1..n) of the ViewConfig's target name match the tail of the ui-view's fqn\n * \n * Example:\n * \n * DOM:\n * <ui-view>                        <!-- created in the root context (name: \"\") -->\n *   <ui-view name=\"foo\">                <!-- created in the context named: \"A\"      -->\n *     <ui-view>                    <!-- created in the context named: \"A.B\"    -->\n *       <ui-view name=\"bar\">            <!-- created in the context named: \"A.B.C\"  -->\n *       </ui-view>\n *     </ui-view>\n *   </ui-view>\n * </ui-view>\n * \n * uiViews: [\n *  { fqn: \"$default\",                  creationContext: { name: \"\" } },\n *  { fqn: \"$default.foo\",              creationContext: { name: \"A\" } },\n *  { fqn: \"$default.foo.$default\",     creationContext: { name: \"A.B\" } }\n *  { fqn: \"$default.foo.$default.bar\", creationContext: { name: \"A.B.C\" } }\n * ]\n * \n * These four view configs all match the ui-view with the fqn: \"$default.foo.$default.bar\":\n * \n * - ViewConfig1: { uiViewName: \"bar\",                       uiViewContextAnchor: \"A.B.C\" }\n * - ViewConfig2: { uiViewName: \"$default.bar\",              uiViewContextAnchor: \"A.B\" }\n * - ViewConfig3: { uiViewName: \"foo.$default.bar\",          uiViewContextAnchor: \"A\" }\n * - ViewConfig4: { uiViewName: \"$default.foo.$default.bar\", uiViewContextAnchor: \"\" }\n * \n * Using ViewConfig3 as an example, it matches the ui-view with fqn \"$default.foo.$default.bar\" because:\n * - The ViewConfig's segmented target name is: [ \"foo\", \"$default\", \"bar\" ]\n * - There exists a parent ui-view (which has fqn: \"$default.foo\") where:\n *    - the parent ui-view's name \"foo\" matches the first segment \"foo\" of the ViewConfig's target name\n *    - the parent ui-view's context \"A\" matches the ViewConfig's anchor context \"A\"\n * - And the remaining segments [ \"$default\", \"bar\" ].join(\".\"_ of the ViewConfig's target name match\n *   the tail of the ui-view's fqn \"default.bar\"\n * \n * \\@internalapi\n * @type {?}\n */\nViewService.matches;\n/** @type {?} */\nViewService.prototype._uiViews;\n/** @type {?} */\nViewService.prototype._viewConfigs;\n/** @type {?} */\nViewService.prototype._rootContext;\n/** @type {?} */\nViewService.prototype._viewConfigFactories;\n/** @type {?} */\nViewService.prototype._pluginapi;\n}\n","/**\n * @internalapi\n * @module url\n */\n/** for typedoc */\n\nimport { composeSort, createProxyFunctions, extend, inArray, removeFrom, sortBy } from '../common/common';\nimport { isDefined, isFunction, isString } from '../common/predicates';\nimport { UrlMatcher } from './urlMatcher';\nimport { RawParams } from '../params/interface';\nimport { Disposable } from '../interface';\nimport { UIRouter } from '../router';\nimport { is, pattern, pipe, prop, val } from '../common/hof';\nimport { UrlRuleFactory } from './urlRule';\nimport { TargetState } from '../state/targetState';\nimport { MatchResult, UrlParts, UrlRule, UrlRuleHandlerFn, UrlRuleMatchFn, UrlRulesApi, UrlSyncApi } from './interface';\nimport { TargetStateDef } from '../state/interface';\n/**\n * @hidden\n * @param {?} url\n * @param {?} isHtml5\n * @param {?} absolute\n * @param {?} baseHref\n * @return {?}\n */\nfunction appendBasePath(url: string, isHtml5: boolean, absolute: boolean, baseHref: string): string {\n  if (baseHref === '/') return url;\n  if (isHtml5) return baseHref.slice(0, -1) + url;\n  if (absolute) return baseHref.slice(1) + url;\n  return url;\n}\n/**\n * @hidden\n */\nconst getMatcher = prop(\"urlMatcher\");\n/**\n * Default rule priority sorting function.\n * \n * Sorts rules by:\n * \n * - Explicit priority (set rule priority using [[UrlRulesApi.when]])\n * - Rule type (STATE: 4, URLMATCHER: 4, REGEXP: 3, RAW: 2, OTHER: 1)\n * - `UrlMatcher` specificity ([[UrlMatcher.compare]]): works for STATE and URLMATCHER types to pick the most specific rule.\n * - Registration order (for rule types other than STATE and URLMATCHER)\n * \n * \\@coreapi\n */\nlet defaultRuleSortFn: (a: UrlRule, b: UrlRule) => number;\ndefaultRuleSortFn = composeSort(\n    sortBy(pipe(prop(\"priority\"), x => -x)),\n    sortBy(pipe(prop(\"type\"), type => ({ \"STATE\": 4, \"URLMATCHER\": 4, \"REGEXP\": 3, \"RAW\": 2, \"OTHER\": 1 })[type])),\n    (a, b) => (getMatcher(a) && getMatcher(b)) ? UrlMatcher.compare(getMatcher(a), getMatcher(b)) : 0,\n    sortBy(prop(\"$id\"), inArray([ \"REGEXP\", \"RAW\", \"OTHER\" ])),\n);\n/**\n * Updates URL and responds to URL changes\n * \n * ### Deprecation warning:\n * This class is now considered to be an internal API\n * Use the [[UrlService]] instead.\n * For configuring URL rules, use the [[UrlRulesApi]] which can be found as [[UrlService.rules]].\n * \n * This class updates the URL when the state changes.\n * It also responds to changes in the URL.\n */\nexport class UrlRouter implements UrlRulesApi, UrlSyncApi, Disposable {\n/**\n * used to create [[UrlRule]] objects for common cases\n */\npublic urlRuleFactory: UrlRuleFactory;\n/**\n * @hidden\n */\nprivate _router: UIRouter;\n/**\n * @hidden\n */\nprivate location: string;\n/**\n * @hidden\n */\nprivate _sortFn = defaultRuleSortFn;\n/**\n * @hidden\n */\nprivate _stopFn: Function;\n/**\n * @hidden\n */\n_rules: UrlRule[] = [];\n/**\n * @hidden\n */\nprivate _otherwiseFn: UrlRule;\n/**\n * @hidden\n */\ninterceptDeferred = false;\n/**\n * @hidden\n */\nprivate _id = 0;\n/**\n * @hidden\n */\nprivate _sorted = false;\n/**\n * @hidden\n * @param {?} router\n */\nconstructor(router: UIRouter) {\n    this._router = router;\n    this.urlRuleFactory = new UrlRuleFactory(router);\n    createProxyFunctions(val(UrlRouter.prototype), this, val(this));\n  }\n/**\n * \\@internalapi\n * @return {?}\n */\ndispose() {\n    this.listen(false);\n    this._rules = [];\n    delete this._otherwiseFn;\n  }\n/**\n * \\@inheritdoc\n * @param {?=} compareFn\n * @return {?}\n */\nsort(compareFn?: (a: UrlRule, b: UrlRule) => number) {\n    this._rules.sort(this._sortFn = compareFn || this._sortFn);\n    this._sorted = true;\n  }\n/**\n * @return {?}\n */\nprivate ensureSorted() {\n    this._sorted || this.sort();\n  }\n/**\n * Given a URL, check all rules and return the best [[MatchResult]]\n * @param {?} url\n * @return {?}\n */\nmatch(url: UrlParts): MatchResult {\n    this.ensureSorted();\n\n    url = extend({path: '', search: {}, hash: '' }, url);\n    let /** @type {?} */ rules = this.rules();\n    if (this._otherwiseFn) rules.push(this._otherwiseFn);\n\n    // Checks a single rule. Returns { rule: rule, match: match, weight: weight } if it matched, or undefined\n\n    let /** @type {?} */ checkRule = (rule: UrlRule): MatchResult => {\n      let /** @type {?} */ match = rule.match(url, this._router);\n      return match && { match, rule, weight: rule.matchPriority(match) };\n    };\n\n    // The rules are pre-sorted.\n    // - Find the first matching rule.\n    // - Find any other matching rule that sorted *exactly the same*, according to `.sort()`.\n    // - Choose the rule with the highest match weight.\n    let /** @type {?} */ best: MatchResult;\n    for (let /** @type {?} */ i = 0; i < rules.length; i++) {\n      // Stop when there is a 'best' rule and the next rule sorts differently than it.\n      if (best && this._sortFn(rules[i], best.rule) !== 0) break;\n\n      let /** @type {?} */ current = checkRule(rules[i]);\n      // Pick the best MatchResult\n      best = (!best || current && current.weight > best.weight) ? current : best;\n    }\n\n    return best;\n  }\n/**\n * \\@inheritdoc\n * @param {?=} evt\n * @return {?}\n */\nsync(evt?) {\n    if (evt && evt.defaultPrevented) return;\n\n    let /** @type {?} */ router = this._router, /** @type {?} */\n        $url = router.urlService, /** @type {?} */\n        $state = router.stateService;\n\n    let /** @type {?} */ url: UrlParts = {\n      path: $url.path(), search: $url.search(), hash: $url.hash(),\n    };\n\n    let /** @type {?} */ best = this.match(url);\n\n    let /** @type {?} */ applyResult = pattern([\n      [isString, (newurl: string) => $url.url(newurl, true)],\n      [TargetState.isDef, (def: TargetStateDef) => $state.go(def.state, def.params, def.options)],\n      [is(TargetState), (target: TargetState) => $state.go(target.state(), target.params(), target.options())],\n    ]);\n\n    applyResult(best && best.rule.handler(best.match, url, router));\n  }\n/**\n * \\@inheritdoc\n * @param {?=} enabled\n * @return {?}\n */\nlisten(enabled?: boolean): Function {\n    if (enabled === false) {\n      this._stopFn && this._stopFn();\n      delete this._stopFn;\n    } else {\n      return this._stopFn = this._stopFn || this._router.urlService.onChange(evt => this.sync(evt));\n    }\n  }\n/**\n * Internal API.\n * \\@internalapi\n * @param {?=} read\n * @return {?}\n */\nupdate(read?: boolean) {\n    let /** @type {?} */ $url = this._router.locationService;\n    if (read) {\n      this.location = $url.path();\n      return;\n    }\n    if ($url.path() === this.location) return;\n\n    $url.url(this.location, true);\n  }\n/**\n * Internal API.\n * \n * Pushes a new location to the browser history.\n * \n * \\@internalapi\n * @param {?} urlMatcher\n * @param {?=} params\n * @param {?=} options\n * @return {?}\n */\npush(urlMatcher: UrlMatcher, params?: RawParams, options?: { replace?: (string|boolean) }) {\n    let /** @type {?} */ replace = options && !!options.replace;\n    this._router.urlService.url(urlMatcher.format(params || {}), replace);\n  }\n/**\n * Builds and returns a URL with interpolated parameters\n * \n * #### Example:\n * ```js\n * matcher = $umf.compile(\"/about/:person\");\n * params = { person: \"bob\" };\n * $bob = $urlRouter.href(matcher, params);\n * // $bob == \"/about/bob\";\n * ```\n * \n * @param {?} urlMatcher The [[UrlMatcher]] object which is used as the template of the URL to generate.\n * @param {?=} params An object of parameter values to fill the matcher's required parameters.\n * @param {?=} options Options object. The options are:\n * \n * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n * \n * @return {?} Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`\n */\nhref(urlMatcher: UrlMatcher, params?: any, options?: { absolute: boolean }): string {\n    let /** @type {?} */ url = urlMatcher.format(params);\n    if (url == null) return null;\n    \n    options = options || { absolute: false };\n\n    let /** @type {?} */ cfg = this._router.urlService.config;\n    let /** @type {?} */ isHtml5 = cfg.html5Mode();\n    if (!isHtml5 && url !== null) {\n      url = \"#\" + cfg.hashPrefix() + url;\n    }\n    url = appendBasePath(url, isHtml5, options.absolute, cfg.baseHref());\n\n    if (!options.absolute || !url) {\n      return url;\n    }\n\n    let /** @type {?} */ slash = (!isHtml5 && url ? '/' : ''), /** @type {?} */ port = cfg.port();\n    port = /** @type {?} */(( <any> (port === 80 || port === 443 ? '' : ':' + port)));\n\n    return [cfg.protocol(), '://', cfg.host(), port, slash, url].join('');\n  }\n/**\n * Manually adds a URL Rule.\n * \n * Usually, a url rule is added using [[StateDeclaration.url]] or [[when]].\n * This api can be used directly for more control (to register a [[BaseUrlRule]], for example).\n * Rules can be created using [[UrlRouter.urlRuleFactory]], or create manually as simple objects.\n * \n * A rule should have a `match` function which returns truthy if the rule matched.\n * It should also have a `handler` function which is invoked if the rule is the best match.\n * \n * @param {?} rule\n * @return {?} a function that deregisters the rule\n */\nrule(rule: UrlRule): Function {\n    if (!UrlRuleFactory.isUrlRule(rule)) throw new Error(\"invalid rule\");\n    rule.$id = this._id++;\n    rule.priority = rule.priority || 0;\n\n    this._rules.push(rule);\n    this._sorted = false;\n\n    return () => this.removeRule(rule);\n  }\n/**\n * \\@inheritdoc\n * @param {?} rule\n * @return {?}\n */\nremoveRule(rule): void {\n    removeFrom(this._rules, rule);\n  }\n/**\n * \\@inheritdoc\n * @return {?}\n */\nrules(): UrlRule[] {\n    this.ensureSorted();\n    return this._rules.slice();\n  }\n/**\n * \\@inheritdoc\n * @param {?} handler\n * @return {?}\n */\notherwise(handler: string|UrlRuleHandlerFn|TargetState|TargetStateDef) {\n    let /** @type {?} */ handlerFn: UrlRuleHandlerFn = getHandlerFn(handler);\n\n    this._otherwiseFn = this.urlRuleFactory.create(val(true), handlerFn);\n    this._sorted = false;\n  };\n/**\n * \\@inheritdoc\n * @param {?} handler\n * @return {?}\n */\ninitial(handler: string | UrlRuleHandlerFn | TargetState | TargetStateDef) {\n    let /** @type {?} */ handlerFn: UrlRuleHandlerFn = getHandlerFn(handler);\n\n    let /** @type {?} */ matchFn: UrlRuleMatchFn = (urlParts, router) =>\n        router.globals.transitionHistory.size() === 0 && !!/^\\/?$/.exec(urlParts.path);\n\n    this.rule(this.urlRuleFactory.create(matchFn, handlerFn));\n  };\n/**\n * \\@inheritdoc\n * @param {?} matcher\n * @param {?} handler\n * @param {?=} options\n * @return {?}\n */\nwhen(matcher: (RegExp|UrlMatcher|string), handler: string|UrlRuleHandlerFn, options?: { priority: number }): UrlRule {\n    let /** @type {?} */ rule = this.urlRuleFactory.create(matcher, handler);\n    if (isDefined(options && options.priority)) rule.priority = options.priority;\n    this.rule(rule);\n    return rule;\n  };\n/**\n * \\@inheritdoc\n * @param {?=} defer\n * @return {?}\n */\ndeferIntercept(defer?: boolean) {\n    if (defer === undefined) defer = true;\n    this.interceptDeferred = defer;\n  };\n}\n\nfunction UrlRouter_tsickle_Closure_declarations() {\n/**\n * used to create [[UrlRule]] objects for common cases\n * @type {?}\n */\nUrlRouter.prototype.urlRuleFactory;\n/**\n * @hidden\n * @type {?}\n */\nUrlRouter.prototype._router;\n/**\n * @hidden\n * @type {?}\n */\nUrlRouter.prototype.location;\n/**\n * @hidden\n * @type {?}\n */\nUrlRouter.prototype._sortFn;\n/**\n * @hidden\n * @type {?}\n */\nUrlRouter.prototype._stopFn;\n/**\n * @hidden\n * @type {?}\n */\nUrlRouter.prototype._rules;\n/**\n * @hidden\n * @type {?}\n */\nUrlRouter.prototype._otherwiseFn;\n/**\n * @hidden\n * @type {?}\n */\nUrlRouter.prototype.interceptDeferred;\n/**\n * @hidden\n * @type {?}\n */\nUrlRouter.prototype._id;\n/**\n * @hidden\n * @type {?}\n */\nUrlRouter.prototype._sorted;\n}\n\n/**\n * @param {?} handler\n * @return {?}\n */\nfunction getHandlerFn(handler: string|UrlRuleHandlerFn|TargetState|TargetStateDef): UrlRuleHandlerFn {\n  if (!isFunction(handler) && !isString(handler) && !is(TargetState)(handler) && !TargetState.isDef(handler)) {\n    throw new Error(\"'handler' must be a string, function, TargetState, or have a state: 'newtarget' property\");\n  }\n  return isFunction(handler) ? /** @type {?} */(( handler as UrlRuleHandlerFn)) : val(handler);\n}\n","/**\n * @coreapi\n * @module url\n */ /** */\n\nimport { UrlMatcher } from './urlMatcher';\nimport { isString, isDefined, isFunction, isState } from '../common/predicates';\nimport { UIRouter } from '../router';\nimport { identity, extend } from '../common/common';\nimport { is, pattern } from '../common/hof';\nimport { StateObject } from '../state/stateObject';\nimport { RawParams } from '../params/interface';\nimport {\n    UrlRule, UrlRuleMatchFn, UrlRuleHandlerFn, UrlRuleType, UrlParts, MatcherUrlRule, StateRule, RegExpRule\n} from './interface';\n/**\n * Creates a [[UrlRule]]\n * \n * Creates a [[UrlRule]] from a:\n * \n * - `string`\n * - [[UrlMatcher]]\n * - `RegExp`\n * - [[StateObject]]\n * \\@internalapi\n */\nexport class UrlRuleFactory {\n/**\n * @param {?} router\n */\nconstructor(public router: UIRouter) { }\n/**\n * @param {?} str\n * @return {?}\n */\ncompile(str: string) {\n    return this.router.urlMatcherFactory.compile(str);\n  }\n\n  static isUrlRule = obj =>\n      obj && ['type', 'match', 'handler'].every(key => isDefined(obj[key]));\n/**\n * @param {?} what\n * @param {?=} handler\n * @return {?}\n */\ncreate(what: string|UrlMatcher|StateObject|RegExp|UrlRuleMatchFn, handler?: string|UrlRuleHandlerFn): UrlRule {\n    const /** @type {?} */ makeRule = pattern([\n      [isString,       (_what: string)         => makeRule(this.compile(_what))],\n      [is(UrlMatcher), (_what: UrlMatcher)     => this.fromUrlMatcher(_what, handler)],\n      [isState,        (_what: StateObject)          => this.fromState(_what, this.router)],\n      [is(RegExp),     (_what: RegExp)         => this.fromRegExp(_what, handler)],\n      [isFunction,     (_what: UrlRuleMatchFn) => new BaseUrlRule(_what, /** @type {?} */(( handler as UrlRuleHandlerFn)))],\n    ]);\n\n    let /** @type {?} */ rule = makeRule(what);\n    if (!rule) throw new Error(\"invalid 'what' in when()\");\n    return rule;\n  }\n/**\n * A UrlRule which matches based on a UrlMatcher\n * \n * The `handler` may be either a `string`, a [[UrlRuleHandlerFn]] or another [[UrlMatcher]]\n * \n * ## Handler as a function\n * \n * If `handler` is a function, the function is invoked with:\n * \n * - matched parameter values ([[RawParams]] from [[UrlMatcher.exec]])\n * - url: the current Url ([[UrlParts]])\n * - router: the router object ([[UIRouter]])\n * \n * #### Example:\n * ```js\n * var urlMatcher = $umf.compile(\"/foo/:fooId/:barId\");\n * var rule = factory.fromUrlMatcher(urlMatcher, match => \"/home/\" + match.fooId + \"/\" + match.barId);\n * var match = rule.match('/foo/123/456'); // results in { fooId: '123', barId: '456' }\n * var result = rule.handler(match); // '/home/123/456'\n * ```\n * \n * ## Handler as UrlMatcher\n * \n * If `handler` is a UrlMatcher, the handler matcher is used to create the new url.\n * The `handler` UrlMatcher is formatted using the matched param from the first matcher.\n * The url is replaced with the result.\n * \n * #### Example:\n * ```js\n * var urlMatcher = $umf.compile(\"/foo/:fooId/:barId\");\n * var handler = $umf.compile(\"/home/:fooId/:barId\");\n * var rule = factory.fromUrlMatcher(urlMatcher, handler);\n * var match = rule.match('/foo/123/456'); // results in { fooId: '123', barId: '456' }\n * var result = rule.handler(match); // '/home/123/456'\n * ```\n * @param {?} urlMatcher\n * @param {?} handler\n * @return {?}\n */\nfromUrlMatcher(urlMatcher: UrlMatcher, handler: string|UrlMatcher|UrlRuleHandlerFn): MatcherUrlRule {\n    let /** @type {?} */ _handler: UrlRuleHandlerFn = /** @type {?} */(( handler as any));\n    if (isString(handler)) handler = this.router.urlMatcherFactory.compile(handler);\n    if (is(UrlMatcher)(handler)) _handler = (match: RawParams) => ( /** @type {?} */((handler as UrlMatcher))).format(match);\n/**\n * @param {?} url\n * @return {?}\n */\nfunction match(url: UrlParts) {\n      let /** @type {?} */ match = urlMatcher.exec(url.path, url.search, url.hash);\n      return urlMatcher.validates(match) && match;\n    }\n/**\n * @param {?} params\n * @return {?}\n */\nfunction matchPriority(params: RawParams): number {\n      let /** @type {?} */ optional = urlMatcher.parameters().filter(param => param.isOptional);\n      if (!optional.length) return 0.000001;\n      let /** @type {?} */ matched = optional.filter(param => params[param.id]);\n      return matched.length / optional.length;\n    }\n\n    let /** @type {?} */ details = { urlMatcher, matchPriority, type: \"URLMATCHER\" };\n    return /** @type {?} */(( extend(new BaseUrlRule(match, _handler), details) as MatcherUrlRule));\n  }\n/**\n * A UrlRule which matches a state by its url\n * \n * #### Example:\n * ```js\n * var rule = factory.fromState($state.get('foo'), router);\n * var match = rule.match('/foo/123/456'); // results in { fooId: '123', barId: '456' }\n * var result = rule.handler(match);\n * // Starts a transition to 'foo' with params: { fooId: '123', barId: '456' }\n * ```\n * @param {?} state\n * @param {?} router\n * @return {?}\n */\nfromState(state: StateObject, router: UIRouter): StateRule {\n/**\n * Handles match by transitioning to matched state\n * \n * First checks if the router should start a new transition.\n * A new transition is not required if the current state's URL\n * and the new URL are already identical\n */\nconst handler = (match: RawParams) => {\n      let $state = router.stateService;\n      let globals = router.globals;\n      if ($state.href(state, match) !== $state.href(globals.current, globals.params)) {\n        $state.transitionTo(state, match, { inherit: true, source: \"url\" });\n      }\n    };\n\n    let /** @type {?} */ details = { state, type: \"STATE\" };\n    return /** @type {?} */(( extend(this.fromUrlMatcher(state.url, handler), details) as StateRule));\n  }\n/**\n * A UrlRule which matches based on a regular expression\n * \n * The `handler` may be either a [[UrlRuleHandlerFn]] or a string.\n * \n * ## Handler as a function\n * \n * If `handler` is a function, the function is invoked with:\n * \n * - regexp match array (from `regexp`)\n * - url: the current Url ([[UrlParts]])\n * - router: the router object ([[UIRouter]])\n * \n * #### Example:\n * ```js\n * var rule = factory.fromRegExp(/^\\/foo\\/(bar|baz)$/, match => \"/home/\" + match[1])\n * var match = rule.match('/foo/bar'); // results in [ '/foo/bar', 'bar' ]\n * var result = rule.handler(match); // '/home/bar'\n * ```\n * \n * ## Handler as string\n * \n * If `handler` is a string, the url is *replaced by the string* when the Rule is invoked.\n * The string is first interpolated using `string.replace()` style pattern.\n * \n * #### Example:\n * ```js\n * var rule = factory.fromRegExp(/^\\/foo\\/(bar|baz)$/, \"/home/$1\")\n * var match = rule.match('/foo/bar'); // results in [ '/foo/bar', 'bar' ]\n * var result = rule.handler(match); // '/home/bar'\n * ```\n * @param {?} regexp\n * @param {?} handler\n * @return {?}\n */\nfromRegExp(regexp: RegExp, handler: string|UrlRuleHandlerFn): RegExpRule {\n    if (regexp.global || regexp.sticky) throw new Error(\"Rule RegExp must not be global or sticky\");\n/**\n * If handler is a string, the url will be replaced by the string.\n * If the string has any String.replace() style variables in it (like `$2`),\n * they will be replaced by the captures from [[match]]\n */\nconst redirectUrlTo = (match: RegExpExecArray) =>\n        // Interpolates matched values into $1 $2, etc using a String.replace()-style pattern\n        (handler as string).replace(/\\$(\\$|\\d{1,2})/, (m, what) =>\n            match[what === '$' ? 0 : Number(what)]);\n\n    const /** @type {?} */ _handler = isString(handler) ? redirectUrlTo : handler;\n\n    const /** @type {?} */ match = (url: UrlParts): RegExpExecArray =>\n        regexp.exec(url.path);\n\n    let /** @type {?} */ details = { regexp, type: \"REGEXP\" };\n    return /** @type {?} */(( extend(new BaseUrlRule(match, _handler), details) as RegExpRule))\n  }\n}\n\nfunction UrlRuleFactory_tsickle_Closure_declarations() {\n/** @type {?} */\nUrlRuleFactory.isUrlRule;\n/** @type {?} */\nUrlRuleFactory.prototype.router;\n}\n\n/**\n * A base rule which calls `match`\n * \n * The value from the `match` function is passed through to the `handler`.\n * \\@internalapi\n */\nexport class BaseUrlRule implements UrlRule {\n  $id: number;\n  priority: number;\n  type: UrlRuleType = \"RAW\";\n  handler: UrlRuleHandlerFn;\n  matchPriority = (match) => 0 - this.$id;\n/**\n * @param {?} match\n * @param {?=} handler\n */\nconstructor(public match: UrlRuleMatchFn, handler?: UrlRuleHandlerFn) {\n    this.handler = handler || identity;\n  }\n}\n\nfunction BaseUrlRule_tsickle_Closure_declarations() {\n/** @type {?} */\nBaseUrlRule.prototype.$id;\n/** @type {?} */\nBaseUrlRule.prototype.priority;\n/** @type {?} */\nBaseUrlRule.prototype.type;\n/** @type {?} */\nBaseUrlRule.prototype.handler;\n/** @type {?} */\nBaseUrlRule.prototype.matchPriority;\n/** @type {?} */\nBaseUrlRule.prototype.match;\n}\n","/**\n * @internalapi\n * @module url\n */ /** for typedoc */\n\nimport { forEach, extend } from '../common/common';\nimport { isObject, isDefined, isFunction, isString } from '../common/predicates';\nimport { UrlMatcher } from './urlMatcher';\nimport { Param, DefType } from '../params/param';\nimport { ParamTypes } from '../params/paramTypes';\nimport { ParamTypeDefinition } from '../params/interface';\nimport { Disposable } from '../interface';\nimport { ParamType } from '../params/paramType';\nimport { ParamFactory, UrlMatcherConfig } from './interface';\n/**\n * Factory for [[UrlMatcher]] instances.\n * \n * The factory is available to ng1 services as\n * `$urlMatcherFactor` or ng1 providers as `$urlMatcherFactoryProvider`.\n */\nexport class UrlMatcherFactory implements Disposable, UrlMatcherConfig {\n/**\n * @hidden\n */\nparamTypes = new ParamTypes();\n/**\n * @hidden\n */\n_isCaseInsensitive: boolean = false;\n/**\n * @hidden\n */\n_isStrictMode: boolean = true;\n/**\n * @hidden\n */\n_defaultSquashPolicy: (boolean|string) = false;\nconstructor() {\n    extend(this, { UrlMatcher, Param });\n  }\n/**\n * \\@inheritdoc\n * @param {?=} value\n * @return {?}\n */\ncaseInsensitive(value?: boolean): boolean {\n    return this._isCaseInsensitive = isDefined(value) ? value : this._isCaseInsensitive;\n  }\n/**\n * \\@inheritdoc\n * @param {?=} value\n * @return {?}\n */\nstrictMode(value?: boolean): boolean {\n    return this._isStrictMode = isDefined(value) ? value : this._isStrictMode;\n  }\n/**\n * \\@inheritdoc\n * @param {?=} value\n * @return {?}\n */\ndefaultSquashPolicy(value?: (boolean|string)) {\n    if (isDefined(value) && value !== true && value !== false && !isString(value))\n      throw new Error(`Invalid squash policy: ${value}. Valid policies: false, true, arbitrary-string`);\n    return this._defaultSquashPolicy = isDefined(value) ? value : this._defaultSquashPolicy;\n  }\n/**\n * @hidden\n */\nprivate _getConfig = (config) =>\n      extend({ strict: this._isStrictMode, caseInsensitive: this._isCaseInsensitive }, config);\n/**\n * Creates a [[UrlMatcher]] for the specified pattern.\n * \n * @param {?} pattern  The URL pattern.\n * @param {?=} config  The config object hash.\n * @return {?} The UrlMatcher.\n */\ncompile(pattern: string, config?: { [key: string]: any }) {\n    return new UrlMatcher(pattern, this.paramTypes, this.paramFactory, this._getConfig(config));\n  }\n/**\n * Returns true if the specified object is a [[UrlMatcher]], or false otherwise.\n * \n * @param {?} object  The object to perform the type check against.\n * @return {?} `true` if the object matches the `UrlMatcher` interface, by\n *          implementing all the same methods.\n */\nisMatcher(object: any): boolean {\n    // TODO: typeof?\n    if (!isObject(object)) return false;\n    let /** @type {?} */ result = true;\n\n    forEach(UrlMatcher.prototype, (val, name) => {\n      if (isFunction(val)) result = result && (isDefined(object[name]) && isFunction(object[name]));\n    });\n    return result;\n  };\n/**\n * Creates and registers a custom [[ParamType]] object\n * \n * A [[ParamType]] can be used to generate URLs with typed parameters.\n * \n * @param {?} name  The type name.\n * @param {?=} definition The type definition. See [[ParamTypeDefinition]] for information on the values accepted.\n * @param {?=} definitionFn A function that is injected before the app runtime starts.\n *        The result of this function should be a [[ParamTypeDefinition]].\n *        The result is merged into the existing `definition`.\n *        See [[ParamType]] for information on the values accepted.\n * \n * @return {?} - if a type was registered: the [[UrlMatcherFactory]]\n *   - if only the `name` parameter was specified: the currently registered [[ParamType]] object, or undefined\n * \n * Note: Register custom types *before using them* in a state definition.\n * \n * See [[ParamTypeDefinition]] for examples\n */\ntype(name: string, definition?: ParamTypeDefinition, definitionFn?: () => ParamTypeDefinition) {\n    let /** @type {?} */ type = this.paramTypes.type(name, definition, definitionFn);\n    return !isDefined(definition) ? type : this;\n  };\n/**\n * @hidden\n * @return {?}\n */\n$get() {\n    this.paramTypes.enqueue = false;\n    this.paramTypes._flushTypeQueue();\n    return this;\n  };\n/**\n * \\@internalapi Creates a new [[Param]] for a given location (DefType)\n */\nparamFactory: ParamFactory = {\n    /** Creates a new [[Param]] from a CONFIG block */\n    fromConfig: (id: string, type: ParamType, config: any) =>\n        new Param(id, type, config, DefType.CONFIG, this),\n\n    /** Creates a new [[Param]] from a url PATH */\n    fromPath: (id: string, type: ParamType, config: any) =>\n        new Param(id, type, config, DefType.PATH, this),\n\n    /** Creates a new [[Param]] from a url SEARCH */\n    fromSearch: (id: string, type: ParamType, config: any) =>\n        new Param(id, type, config, DefType.SEARCH, this),\n  };\n/**\n * \\@internalapi\n * @return {?}\n */\ndispose() {\n    this.paramTypes.dispose();\n  }\n}\n\nfunction UrlMatcherFactory_tsickle_Closure_declarations() {\n/**\n * @hidden\n * @type {?}\n */\nUrlMatcherFactory.prototype.paramTypes;\n/**\n * @hidden\n * @type {?}\n */\nUrlMatcherFactory.prototype._isCaseInsensitive;\n/**\n * @hidden\n * @type {?}\n */\nUrlMatcherFactory.prototype._isStrictMode;\n/**\n * @hidden\n * @type {?}\n */\nUrlMatcherFactory.prototype._defaultSquashPolicy;\n/**\n * @hidden\n * @type {?}\n */\nUrlMatcherFactory.prototype._getConfig;\n/**\n * \\@internalapi Creates a new [[Param]] for a given location (DefType)\n * @type {?}\n */\nUrlMatcherFactory.prototype.paramFactory;\n}\n\n","/**\n * @coreapi\n * @module url\n */\n/** for typedoc */\n\nimport {\n  map, defaults, inherit, identity, unnest, tail, find, Obj, pairs, allTrueR, unnestR, arrayTuples\n} from '../common/common';\nimport { prop, propEq } from '../common/hof';\nimport { isArray, isString, isDefined } from '../common/predicates';\nimport { Param, DefType } from '../params/param';\nimport { ParamTypes } from '../params/paramTypes';\nimport { RawParams } from '../params/interface';\nimport { ParamFactory } from './interface';\nimport { joinNeighborsR, splitOnDelim } from '../common/strings';\n/**\n * @hidden\n * @param {?} string\n * @param {?=} param\n * @return {?}\n */\nfunction quoteRegExp(string: any, param?: any) {\n  let /** @type {?} */ surroundPattern = ['', ''], /** @type {?} */ result = string.replace(/[\\\\\\[\\]\\^$*+?.()|{}]/g, \"\\\\$&\");\n  if (!param) return result;\n\n  switch (param.squash) {\n    case false:\n      surroundPattern = ['(', ')' + (param.isOptional ? '?' : '')]; break;\n    case true:\n      result = result.replace(/\\/$/, '');\n      surroundPattern = ['(?:\\/(', ')|\\/)?'];\n      break;\n    default:\n      surroundPattern = [`(${param.squash}|`, ')?']; break;\n  }\n  return result + surroundPattern[0] + param.type.pattern.source + surroundPattern[1];\n}\n/**\n * @hidden\n */\nconst memoizeTo = (obj: Obj, prop: string, fn: Function) =>\n    obj[prop] = obj[prop] || fn();\n/**\n * @hidden\n */\nconst splitOnSlash = splitOnDelim('/');\n\n/** @hidden */\ninterface UrlMatcherCache {\n  segments?: any[];\n  weights?: number[];\n  path?: UrlMatcher[];\n  parent?: UrlMatcher;\n  pattern?: RegExp;\n}\n/**\n * Matches URLs against patterns.\n * \n * Matches URLs against patterns and extracts named parameters from the path or the search\n * part of the URL.\n * \n * A URL pattern consists of a path pattern, optionally followed by '?' and a list of search (query)\n * parameters. Multiple search parameter names are separated by '&'. Search parameters\n * do not influence whether or not a URL is matched, but their values are passed through into\n * the matched parameters returned by [[UrlMatcher.exec]].\n * \n * - *Path parameters* are defined using curly brace placeholders (`/somepath/{param}`)\n * or colon placeholders (`/somePath/:param`).\n * \n * - *A parameter RegExp* may be defined for a param after a colon\n * (`/somePath/{param:[a-zA-Z0-9]+}`) in a curly brace placeholder.\n * The regexp must match for the url to be matched.\n * Should the regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.\n * \n * Note: a RegExp parameter will encode its value using either [[ParamTypes.path]] or [[ParamTypes.query]].\n * \n * - *Custom parameter types* may also be specified after a colon (`/somePath/{param:int}`) in curly brace parameters.\n *   See [[UrlMatcherFactory.type]] for more information.\n * \n * - *Catch-all parameters* are defined using an asterisk placeholder (`/somepath/*catchallparam`).\n *   A catch-all * parameter value will contain the remainder of the URL.\n * \n * ---\n * \n * Parameter names may contain only word characters (latin letters, digits, and underscore) and\n * must be unique within the pattern (across both path and search parameters).\n * A path parameter matches any number of characters other than '/'. For catch-all\n * placeholders the path parameter matches any number of characters.\n * \n * Examples:\n * \n * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for\n *   trailing slashes, and patterns have to match the entire path, not just a prefix.\n * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or\n *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.\n * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.\n * * `'/user/{id:[^/]*}'` - Same as the previous example.\n * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id\n *   parameter consists of 1 to 8 hex digits.\n * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the\n *   path into the parameter 'path'.\n * * `'/files/*path'` - ditto.\n * * `'/calendar/{start:date}'` - Matches \"/calendar/2014-11-12\" (because the pattern defined\n *   in the built-in  `date` ParamType matches `2014-11-12`) and provides a Date object in $stateParams.start\n * \n */\nexport class UrlMatcher {\n/**\n * @hidden\n */\nstatic nameValidator: RegExp = /^\\w+([-.]+\\w+)*(?:\\[\\])?$/;\n/**\n * @hidden\n */\nprivate _cache: UrlMatcherCache = { path: [this] };\n/**\n * @hidden\n */\nprivate _children: UrlMatcher[] = [];\n/**\n * @hidden\n */\nprivate _params:   Param[]      = [];\n/**\n * @hidden\n */\nprivate _segments: string[]     = [];\n/**\n * @hidden\n */\nprivate _compiled: string[]     = [];\n/**\n * The pattern that was passed into the constructor\n */\npublic pattern: string;\n/**\n * @param {?} pattern The pattern to compile into a matcher.\n * @param {?} paramTypes The [[ParamTypes]] registry\n * @param {?} paramFactory\n * @param {?=} config  A configuration object\n * - `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.\n * - `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.\n */\nconstructor(pattern: string, paramTypes: ParamTypes, paramFactory: ParamFactory,\npublic config?: any) {\n    this.pattern = pattern;\n    this.config = defaults(this.config, {\n      params: {},\n      strict: true,\n      caseInsensitive: false,\n      paramMap: identity\n    });\n\n    // Find all placeholders and create a compiled pattern, using either classic or curly syntax:\n    //   '*' name\n    //   ':' name\n    //   '{' name '}'\n    //   '{' name ':' regexp '}'\n    // The regular expression is somewhat complicated due to the need to allow curly braces\n    // inside the regular expression. The placeholder regexp breaks down as follows:\n    //    ([:*])([\\w\\[\\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)\n    //    \\{([\\w\\[\\]]+)(?:\\:\\s*( ... ))?\\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case\n    //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either\n    //    [^{}\\\\]+                       - anything other than curly braces or backslash\n    //    \\\\.                            - a backslash escape\n    //    \\{(?:[^{}\\\\]+|\\\\.)*\\}          - a matched set of curly braces containing other atoms\n    let placeholder = /([:*])([\\w\\[\\]]+)|\\{([\\w\\[\\]]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g,\n        searchPlaceholder = /([:]?)([\\w\\[\\].-]+)|\\{([\\w\\[\\].-]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g,\n        last = 0, m: RegExpExecArray, patterns: any[][] = [];\n\n    const checkParamErrors = (id: string) => {\n      if (!UrlMatcher.nameValidator.test(id)) throw new Error(`Invalid parameter name '${id}' in pattern '${pattern}'`);\n      if (find(this._params, propEq('id', id))) throw new Error(`Duplicate parameter name '${id}' in pattern '${pattern}'`);\n    };\n\n    // Split into static segments separated by path parameter placeholders.\n    // The number of segments is always 1 more than the number of parameters.\n    const matchDetails = (m: RegExpExecArray, isSearch: boolean) => {\n      // IE[78] returns '' for unmatched groups instead of null\n      let id = m[2] || m[3];\n      let regexp = isSearch ? m[4] : m[4] || (m[1] === '*' ? '[\\\\s\\\\S]*' : null);\n\n      const makeRegexpType = (regexp) => inherit(paramTypes.type(isSearch ? \"query\" : \"path\"), {\n        pattern: new RegExp(regexp, this.config.caseInsensitive ? 'i' : undefined)\n      });\n\n      return {\n        id,\n        regexp,\n        cfg:     this.config.params[id],\n        segment: pattern.substring(last, m.index),\n        type:    !regexp ? null : paramTypes.type(regexp) || makeRegexpType(regexp)\n      };\n    };\n\n    let p: any, segment: string;\n\n    while ((m = placeholder.exec(pattern))) {\n      p = matchDetails(m, false);\n      if (p.segment.indexOf('?') >= 0) break; // we're into the search part\n\n      checkParamErrors(p.id);\n      this._params.push(paramFactory.fromPath(p.id, p.type, this.config.paramMap(p.cfg, false)));\n      this._segments.push(p.segment);\n      patterns.push([p.segment, tail(this._params)]);\n      last = placeholder.lastIndex;\n    }\n    segment = pattern.substring(last);\n\n    // Find any search parameter names and remove them from the last segment\n    let i = segment.indexOf('?');\n\n    if (i >= 0) {\n      let search = segment.substring(i);\n      segment = segment.substring(0, i);\n\n      if (search.length > 0) {\n        last = 0;\n\n        while ((m = searchPlaceholder.exec(search))) {\n          p = matchDetails(m, true);\n          checkParamErrors(p.id);\n          this._params.push(paramFactory.fromSearch(p.id, p.type, this.config.paramMap(p.cfg, true)));\n          last = placeholder.lastIndex;\n          // check if ?&\n        }\n      }\n    }\n\n    this._segments.push(segment);\n    this._compiled = patterns.map(pattern => quoteRegExp.apply(null, pattern)).concat(quoteRegExp(segment));\n  }\n/**\n * Creates a new concatenated UrlMatcher\n * \n * Builds a new UrlMatcher by appending another UrlMatcher to this one.\n * \n * @param {?} url A `UrlMatcher` instance to append as a child of the current `UrlMatcher`.\n * @return {?}\n */\nappend(url: UrlMatcher): UrlMatcher {\n    this._children.push(url);\n    url._cache = {\n      path: this._cache.path.concat(url),\n      parent: this,\n      pattern: null,\n    };\n    return url;\n  }\n/**\n * @hidden\n * @return {?}\n */\nisRoot(): boolean {\n    return this._cache.path[0] === this;\n  }\n/**\n * Returns the input pattern string\n * @return {?}\n */\ntoString(): string {\n    return this.pattern;\n  }\n/**\n * Tests the specified url/path against this matcher.\n * \n * Tests if the given url matches this matcher's pattern, and returns an object containing the captured\n * parameter values.  Returns null if the path does not match.\n * \n * The returned object contains the values\n * of any search parameters that are mentioned in the pattern, but their value may be null if\n * they are not present in `search`. This means that search parameters are always treated\n * as optional.\n * \n * #### Example:\n * ```js\n * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {\n *   x: '1', q: 'hello'\n * });\n * // returns { id: 'bob', q: 'hello', r: null }\n * ```\n * \n * @param {?} path    The URL path to match, e.g. `$location.path()`.\n * @param {?=} search  URL search parameters, e.g. `$location.search()`.\n * @param {?=} hash    URL hash e.g. `$location.hash()`.\n * @param {?=} options \n * \n * @return {?} The captured parameter values.\n */\nexec(path: string, search: any = {}, hash?: string, options: any = {}): RawParams {\n    let /** @type {?} */ match = memoizeTo(this._cache, 'pattern', () => {\n      return new RegExp([\n        '^',\n        unnest(this._cache.path.map(prop('_compiled'))).join(''),\n        this.config.strict === false ? '\\/?' : '',\n        '$'\n      ].join(''), this.config.caseInsensitive ? 'i' : undefined);\n    }).exec(path);\n\n    if (!match) return null;\n\n    //options = defaults(options, { isolate: false });\n\n    let /** @type {?} */ allParams:    Param[] = this.parameters(), /** @type {?} */\n        pathParams:   Param[] = allParams.filter(param => !param.isSearch()), /** @type {?} */\n        searchParams: Param[] = allParams.filter(param => param.isSearch()), /** @type {?} */\n        nPathSegments  = this._cache.path.map(urlm => urlm._segments.length - 1).reduce((a, x) => a + x), /** @type {?} */\n        values: RawParams = {};\n\n    if (nPathSegments !== match.length - 1)\n      throw new Error(`Unbalanced capture group in route '${this.pattern}'`);\n/**\n * @param {?} string\n * @return {?}\n */\nfunction decodePathArray(string: string) {\n      const /** @type {?} */ reverseString = (str: string) => str.split(\"\").reverse().join(\"\");\n      const /** @type {?} */ unquoteDashes = (str: string) => str.replace(/\\\\-/g, \"-\");\n\n      let /** @type {?} */ split = reverseString(string).split(/-(?!\\\\)/);\n      let /** @type {?} */ allReversed = map(split, reverseString);\n      return map(allReversed, unquoteDashes).reverse();\n    }\n\n    for (let /** @type {?} */ i = 0; i < nPathSegments; i++) {\n      let /** @type {?} */ param: Param = pathParams[i];\n      let /** @type {?} */ value: (any|any[]) = match[i + 1];\n\n      // if the param value matches a pre-replace pair, replace the value before decoding.\n      for (let /** @type {?} */ j = 0; j < param.replace.length; j++) {\n        if (param.replace[j].from === value) value = param.replace[j].to;\n      }\n      if (value && param.array === true) value = decodePathArray(value);\n      if (isDefined(value)) value = param.type.decode(value);\n      values[param.id] = param.value(value);\n    }\n    searchParams.forEach(param => {\n      let /** @type {?} */ value = search[param.id];\n      for (let /** @type {?} */ j = 0; j < param.replace.length; j++) {\n        if (param.replace[j].from === value) value = param.replace[j].to;\n      }\n      if (isDefined(value)) value = param.type.decode(value);\n      values[param.id] = param.value(value);\n    });\n\n    if (hash) values[\"#\"] = hash;\n\n    return values;\n  }\n/**\n * @hidden \n * Returns all the [[Param]] objects of all path and search parameters of this pattern in order of appearance.\n * \n *    pattern has no parameters, an empty array is returned.\n * @param {?=} opts\n * @return {?}\n */\nparameters(opts: any = {}): Param[] {\n    if (opts.inherit === false) return this._params;\n    return unnest(this._cache.path.map(matcher => matcher._params));\n  }\n/**\n * @hidden \n * Returns a single parameter from this UrlMatcher by id\n * \n * @param {?} id\n * @param {?=} opts\n * @return {?}\n */\nparameter(id: string, opts: any = {}): Param {\n    const /** @type {?} */ findParam = () => {\n      for (let /** @type {?} */ param of this._params) {\n        if (param.id === id) return param;\n      }\n    };\n\n    let /** @type {?} */ parent = this._cache.parent;\n    return findParam() || (opts.inherit !== false && parent && parent.parameter(id, opts)) || null;\n  }\n/**\n * Validates the input parameter values against this UrlMatcher\n * \n * Checks an object hash of parameters to validate their correctness according to the parameter\n * types of this `UrlMatcher`.\n * \n * @param {?} params The object hash of parameters to validate.\n * @return {?} Returns `true` if `params` validates, otherwise `false`.\n */\nvalidates(params: RawParams): boolean {\n    const /** @type {?} */ validParamVal = (param: Param, val: any) =>\n        !param || param.validates(val);\n\n    params = params || {};\n\n    // I'm not sure why this checks only the param keys passed in, and not all the params known to the matcher\n    let /** @type {?} */ paramSchema = this.parameters().filter(paramDef => params.hasOwnProperty(paramDef.id));\n    return paramSchema.map(paramDef => validParamVal(paramDef, params[paramDef.id])).reduce(allTrueR, true);\n  }\n/**\n * Given a set of parameter values, creates a URL from this UrlMatcher.\n * \n * Creates a URL that matches this pattern by substituting the specified values\n * for the path and search parameters.\n * \n * #### Example:\n * ```js\n * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });\n * // returns '/user/bob?q=yes'\n * ```\n * \n * @param {?=} values  the values to substitute for the parameters in this pattern.\n * @return {?} the formatted URL (path and optionally search part).\n */\nformat(values: RawParams = {}) {\n    // Build the full path of UrlMatchers (including all parent UrlMatchers)\n    let /** @type {?} */ urlMatchers = this._cache.path;\n\n    // Extract all the static segments and Params (processed as ParamDetails)\n    // into an ordered array\n    let /** @type {?} */ pathSegmentsAndParams: Array<string|ParamDetails> = urlMatchers.map(UrlMatcher.pathSegmentsAndParams)\n            .reduce(unnestR, [])\n            .map(x => isString(x) ? x : getDetails(x));\n\n    // Extract the query params into a separate array\n    let /** @type {?} */ queryParams: Array<ParamDetails> = urlMatchers.map(UrlMatcher.queryParams)\n            .reduce(unnestR, [])\n            .map(getDetails);\n\n    const /** @type {?} */ isInvalid = (param: ParamDetails) => param.isValid === false;\n    if (pathSegmentsAndParams.concat(queryParams).filter(isInvalid).length) {\n      return null;\n    }\n/**\n * Given a Param, applies the parameter value, then returns detailed information about it\n * @param {?} param\n * @return {?}\n */\nfunction getDetails(param: Param): ParamDetails {\n      // Normalize to typed value\n      let /** @type {?} */ value = param.value(values[param.id]);\n      let /** @type {?} */ isValid = param.validates(value);\n      let /** @type {?} */ isDefaultValue = param.isDefaultValue(value);\n      // Check if we're in squash mode for the parameter\n      let /** @type {?} */ squash = isDefaultValue ? param.squash : false;\n      // Allow the Parameter's Type to encode the value\n      let /** @type {?} */ encoded = param.type.encode(value);\n\n      return { param, value, isValid, isDefaultValue, squash, encoded };\n    }\n\n    // Build up the path-portion from the list of static segments and parameters\n    let /** @type {?} */ pathString = pathSegmentsAndParams.reduce((acc: string, x: string|ParamDetails) => {\n      // The element is a static segment (a raw string); just append it\n      if (isString(x)) return acc + x;\n\n      // Otherwise, it's a ParamDetails.\n      let { squash, encoded, param } = x;\n\n      // If squash is === true, try to remove a slash from the path\n      if (squash === true) return (acc.match(/\\/$/)) ? acc.slice(0, -1) : acc;\n      // If squash is a string, use the string for the param value\n      if (isString(squash)) return acc + squash;\n      if (squash !== false) return acc; // ?\n      if (encoded == null) return acc;\n      // If this parameter value is an array, encode the value using encodeDashes\n      if (isArray(encoded)) return acc + map( /** @type {?} */((<string[]> encoded)), UrlMatcher.encodeDashes).join(\"-\");\n      // If the parameter type is \"raw\", then do not encodeURIComponent\n      if (param.raw) return acc + encoded;\n      // Encode the value\n      return acc + encodeURIComponent( /** @type {?} */((<string> encoded)));\n    }, \"\");\n\n    // Build the query string by applying parameter values (array or regular)\n    // then mapping to key=value, then flattening and joining using \"&\"\n    let /** @type {?} */ queryString = queryParams.map((paramDetails: ParamDetails) => {\n      let { param, squash, encoded, isDefaultValue } = paramDetails;\n      if (encoded == null || (isDefaultValue && squash !== false)) return;\n      if (!isArray(encoded)) encoded = [ /** @type {?} */((<string> encoded))];\n      if (encoded.length === 0) return;\n      if (!param.raw) encoded = map( /** @type {?} */((<string[]> encoded)), encodeURIComponent);\n\n      return ( /** @type {?} */((<string[]> encoded))).map(val => `${param.id}=${val}`);\n    }).filter(identity).reduce(unnestR, []).join(\"&\");\n\n    // Concat the pathstring with the queryString (if exists) and the hashString (if exists)\n    return pathString + (queryString ? `?${queryString}` : \"\") + (values[\"#\"] ? \"#\" + values[\"#\"] : \"\");\n  }\n/**\n * @hidden\n * @param {?} str\n * @return {?}\n */\nstatic encodeDashes(str: string) { // Replace dashes with encoded \"\\-\"\n    return encodeURIComponent(str).replace(/-/g, c => `%5C%${c.charCodeAt(0).toString(16).toUpperCase()}`);\n  }\n/**\n * @hidden Given a matcher, return an array with the matcher's path segments and path params, in order\n * @param {?} matcher\n * @return {?}\n */\nstatic pathSegmentsAndParams(matcher: UrlMatcher) {\n    let /** @type {?} */ staticSegments = matcher._segments;\n    let /** @type {?} */ pathParams = matcher._params.filter(p => p.location === DefType.PATH);\n    return arrayTuples(staticSegments, pathParams.concat(undefined))\n        .reduce(unnestR, [])\n        .filter(x => x !== \"\" && isDefined(x));\n  }\n/**\n * @hidden Given a matcher, return an array with the matcher's query params\n * @param {?} matcher\n * @return {?}\n */\nstatic queryParams(matcher: UrlMatcher): Param[] {\n    return matcher._params.filter(p => p.location === DefType.SEARCH);\n  }\n/**\n * Compare two UrlMatchers\n * \n * This comparison function converts a UrlMatcher into static and dynamic path segments.\n * Each static path segment is a static string between a path separator (slash character).\n * Each dynamic segment is a path parameter.\n * \n * The comparison function sorts static segments before dynamic ones.\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nstatic compare(a: UrlMatcher, b: UrlMatcher): number {\n/**\n * Turn a UrlMatcher and all its parent matchers into an array\n * of slash literals '/', string literals, and Param objects\n * \n * This example matcher matches strings like \"/foo/:param/tail\":\n * var matcher = $umf.compile(\"/foo\").append($umf.compile(\"/:param\")).append($umf.compile(\"/\")).append($umf.compile(\"tail\"));\n * var result = segments(matcher); // [ '/', 'foo', '/', Param, '/', 'tail' ]\n * \n * Caches the result as `matcher._cache.segments`\n */\nconst segments = (matcher: UrlMatcher) =>\n        matcher._cache.segments = matcher._cache.segments ||\n            matcher._cache.path.map(UrlMatcher.pathSegmentsAndParams)\n                .reduce(unnestR, [])\n                .reduce(joinNeighborsR, [])\n                .map(x => isString(x) ? splitOnSlash(x) : x)\n                .reduce(unnestR, []);\n/**\n * Gets the sort weight for each segment of a UrlMatcher\n * \n * Caches the result as `matcher._cache.weights`\n */\nconst weights = (matcher: UrlMatcher) =>\n        matcher._cache.weights = matcher._cache.weights ||\n            segments(matcher).map(segment => {\n              // Sort slashes first, then static strings, the Params\n              if (segment === '/') return 1;\n              if (isString(segment)) return 2;\n              if (segment instanceof Param) return 3;\n            });\n\n    let /** @type {?} */ cmp, /** @type {?} */ i, /** @type {?} */ pairs = arrayTuples(weights(a), weights(b));\n\n    for (i = 0; i < pairs.length; i++) {\n      cmp = pairs[i][0] - pairs[i][1];\n      if (cmp !== 0) return cmp;\n    }\n\n    return 0;\n  }\n}\n\nfunction UrlMatcher_tsickle_Closure_declarations() {\n/**\n * @hidden\n * @type {?}\n */\nUrlMatcher.nameValidator;\n/**\n * @hidden\n * @type {?}\n */\nUrlMatcher.prototype._cache;\n/**\n * @hidden\n * @type {?}\n */\nUrlMatcher.prototype._children;\n/**\n * @hidden\n * @type {?}\n */\nUrlMatcher.prototype._params;\n/**\n * @hidden\n * @type {?}\n */\nUrlMatcher.prototype._segments;\n/**\n * @hidden\n * @type {?}\n */\nUrlMatcher.prototype._compiled;\n/**\n * The pattern that was passed into the constructor\n * @type {?}\n */\nUrlMatcher.prototype.pattern;\n/** @type {?} */\nUrlMatcher.prototype.config;\n}\n\n\n/** @hidden */\ninterface ParamDetails {\n  param: Param;\n  value: any;\n  isValid: boolean;\n  isDefaultValue: boolean;\n  squash: (boolean|string);\n  encoded: (string|string[]);\n}\n","/**\n * @coreapi\n * @module state\n */ /** for typedoc */\n\n\nimport { StateObject } from './stateObject';\nimport { StateMatcher } from './stateMatcher';\nimport { StateBuilder } from './stateBuilder';\nimport { StateQueueManager } from './stateQueueManager';\nimport { StateDeclaration, _StateDeclaration } from './interface';\nimport { BuilderFunction } from './stateBuilder';\nimport { StateOrName } from './interface';\nimport { removeFrom } from '../common/common';\nimport { UIRouter } from '../router';\nimport { propEq } from '../common/hof';\n\n/**\n * The signature for the callback function provided to [[StateRegistry.onStatesChanged]].\n *\n * This callback receives two parameters:\n *\n * @param event a string; either \"registered\" or \"deregistered\"\n * @param states the list of [[StateDeclaration]]s that were registered (or deregistered).\n */\nexport type StateRegistryListener = (event: \"registered\"|\"deregistered\", states: StateDeclaration[]) => void;\nexport class StateRegistry {\nprivate _root: StateObject;\nprivate states: { [key: string]: StateObject } = {};\n\n  matcher: StateMatcher;\nprivate builder: StateBuilder;\n  stateQueue: StateQueueManager;\n\n  listeners: StateRegistryListener[] = [];\n/**\n * \\@internalapi\n * @param {?} _router\n */\nconstructor(private _router: UIRouter) {\n    this.matcher = new StateMatcher(this.states);\n    this.builder = new StateBuilder(this.matcher, _router.urlMatcherFactory);\n    this.stateQueue = new StateQueueManager(this, _router.urlRouter, this.states, this.builder, this.listeners);\n    this._registerRoot();\n  }\n/**\n * \\@internalapi\n * @return {?}\n */\nprivate _registerRoot() {\n    let /** @type {?} */ rootStateDef: StateDeclaration = {\n      name: '',\n      url: '^',\n      views: null,\n      params: {\n        '#': { value: null, type: 'hash', dynamic: true }\n      },\n      abstract: true\n    };\n\n    let /** @type {?} */ _root = this._root = this.stateQueue.register(rootStateDef);\n    _root.navigable = null;\n  }\n/**\n * \\@internalapi\n * @return {?}\n */\ndispose() {\n    this.stateQueue.dispose();\n    this.listeners = [];\n    this.get().forEach(state => this.get(state) && this.deregister(state));\n  }\n/**\n * Listen for a State Registry events\n * \n * Adds a callback that is invoked when states are registered or deregistered with the StateRegistry.\n * \n * #### Example:\n * ```js\n * let allStates = registry.get();\n * \n * // Later, invoke deregisterFn() to remove the listener\n * let deregisterFn = registry.onStatesChanged((event, states) => {\n *   switch(event) {\n *     case: 'registered':\n *       states.forEach(state => allStates.push(state));\n *       break;\n *     case: 'deregistered':\n *       states.forEach(state => {\n *         let idx = allStates.indexOf(state);\n *         if (idx !== -1) allStates.splice(idx, 1);\n *       });\n *       break;\n *   }\n * });\n * ```\n * \n * @param {?} listener a callback function invoked when the registered states changes.\n *        The function receives two parameters, `event` and `state`.\n *        See [[StateRegistryListener]]\n * @return {?} a function that deregisters the listener\n */\nonStatesChanged(listener: StateRegistryListener): () => void {\n    this.listeners.push(listener);\n    return function deregisterListener() {\n      removeFrom(this.listeners)(listener);\n    }.bind(this);\n  }\n/**\n * Gets the implicit root state\n * \n * Gets the root of the state tree.\n * The root state is implicitly created by UI-Router.\n * Note: this returns the internal [[StateObject]] representation, not a [[StateDeclaration]]\n * \n * @return {?} the root [[StateObject]]\n */\nroot() {\n    return this._root;\n  }\n/**\n * Adds a state to the registry\n * \n * Registers a [[StateDeclaration]] or queues it for registration.\n * \n * Note: a state will be queued if the state's parent isn't yet registered.\n * \n * @param {?} stateDefinition the definition of the state to register.\n * @return {?} the internal [[StateObject]] object.\n *          If the state was successfully registered, then the object is fully built (See: [[StateBuilder]]).\n *          If the state was only queued, then the object is not fully built.\n */\nregister(stateDefinition: _StateDeclaration): StateObject {\n    return this.stateQueue.register(stateDefinition);\n  }\n/**\n * @hidden\n * @param {?} state\n * @return {?}\n */\nprivate _deregisterTree(state: StateObject) {\n    let /** @type {?} */ all = this.get().map(s => s.$$state());\n    const /** @type {?} */ getChildren = (states: StateObject[]) => {\n      let /** @type {?} */ children = all.filter(s => states.indexOf(s.parent) !== -1);\n      return children.length === 0 ? children : children.concat(getChildren(children));\n    };\n\n    let /** @type {?} */ children = getChildren([state]);\n    let /** @type {?} */ deregistered: StateObject[] = [state].concat(children).reverse();\n\n    deregistered.forEach(state => {\n      let /** @type {?} */ $ur = this._router.urlRouter;\n      // Remove URL rule\n      $ur.rules().filter(propEq(\"state\", state)).forEach($ur.removeRule.bind($ur));\n      // Remove state from registry\n      delete this.states[state.name];\n    });\n\n    return deregistered;\n  }\n/**\n * Removes a state from the registry\n * \n * This removes a state from the registry.\n * If the state has children, they are are also removed from the registry.\n * \n * @param {?} stateOrName the state's name or object representation\n * @return {?}\n */\nderegister(stateOrName: StateOrName) {\n    let /** @type {?} */ _state = this.get(stateOrName);\n    if (!_state) throw new Error(\"Can't deregister state; not found: \" + stateOrName);\n    let /** @type {?} */ deregisteredStates = this._deregisterTree(_state.$$state());\n\n    this.listeners.forEach(listener => listener(\"deregistered\", deregisteredStates.map(s => s.self)));\n    return deregisteredStates;\n  }\n\n  /**\n   * Gets all registered states\n   *\n   * Calling this method with no arguments will return a list of all the states that are currently registered.\n   * Note: this does not return states that are *queued* but not yet registered.\n   *\n   * @return a list of [[StateDeclaration]]s\n   */\n  get(): StateDeclaration[];\n\n  /**\n   * Gets a registered state\n   *\n   * Given a state or a name, finds and returns the [[StateDeclaration]] from the registry.\n   * Note: this does not return states that are *queued* but not yet registered.\n   *\n   * @param stateOrName either the name of a state, or a state object.\n   * @return a registered [[StateDeclaration]] that matched the `stateOrName`, or null if the state isn't registered.\n   */\n  get(stateOrName: StateOrName, base?: StateOrName): StateDeclaration;\n/**\n * @param {?=} stateOrName\n * @param {?=} base\n * @return {?}\n */\nget(stateOrName?: StateOrName, base?: StateOrName): any {\n    if (arguments.length === 0) \n      return /** @type {?} */(( <StateDeclaration[]> Object.keys(this.states).map(name => this.states[name].self)));\n    let /** @type {?} */ found = this.matcher.find(stateOrName, base);\n    return found && found.self || null;\n  }\n/**\n * @param {?} name\n * @param {?} func\n * @return {?}\n */\ndecorator(name: string, func: BuilderFunction) {\n    return this.builder.builder(name, func);\n  }\n}\n\nfunction StateRegistry_tsickle_Closure_declarations() {\n/** @type {?} */\nStateRegistry.prototype._root;\n/** @type {?} */\nStateRegistry.prototype.states;\n/** @type {?} */\nStateRegistry.prototype.matcher;\n/** @type {?} */\nStateRegistry.prototype.builder;\n/** @type {?} */\nStateRegistry.prototype.stateQueue;\n/** @type {?} */\nStateRegistry.prototype.listeners;\n/** @type {?} */\nStateRegistry.prototype._router;\n}\n","/** @module state */ /** for typedoc */\n\nimport { inArray } from '../common/common';\nimport { isString } from '../common/predicates';\nimport { StateDeclaration, _StateDeclaration } from './interface';\nimport { StateObject } from './stateObject';\nimport { StateBuilder } from './stateBuilder';\nimport { StateRegistryListener, StateRegistry } from './stateRegistry';\nimport { Disposable } from '../interface';\nimport { UrlRouter } from '../url/urlRouter';\nimport { prop } from '../common/hof';\nimport { StateMatcher } from './stateMatcher';\n/**\n * \\@internalapi\n */\nexport class StateQueueManager implements Disposable {\n  queue: StateObject[];\n  matcher: StateMatcher;\n/**\n * @param {?} $registry\n * @param {?} $urlRouter\n * @param {?} states\n * @param {?} builder\n * @param {?} listeners\n */\nconstructor(\nprivate $registry: StateRegistry,\nprivate $urlRouter: UrlRouter,\npublic states: { [key: string]: StateObject; },\npublic builder: StateBuilder,\npublic listeners: StateRegistryListener[]) {\n    this.queue = [];\n    this.matcher = $registry.matcher;\n  }\n/**\n * \\@internalapi\n * @return {?}\n */\ndispose() {\n    this.queue = [];\n  }\n/**\n * @param {?} stateDecl\n * @return {?}\n */\nregister(stateDecl: _StateDeclaration) {\n    let /** @type {?} */ queue = this.queue;\n    let /** @type {?} */ state = StateObject.create(stateDecl);\n    let /** @type {?} */ name = state.name;\n\n    if (!isString(name)) throw new Error(\"State must have a valid name\");\n    if (this.states.hasOwnProperty(name) || inArray(queue.map(prop('name')), name))\n      throw new Error(`State '${name}' is already defined`);\n\n    queue.push(state);\n    this.flush();\n\n    return state;\n  }\n/**\n * @return {?}\n */\nflush() {\n    let {queue, states, builder} = this;\n    let /** @type {?} */ registered: StateObject[] = [], /** @type {?} */ // states that got registered\n        orphans: StateObject[] = [], /** @type {?} */ // states that don't yet have a parent registered\n        previousQueueLength = {}; // keep track of how long the queue when an orphan was first encountered\n    const /** @type {?} */ getState = (name) =>\n        this.states.hasOwnProperty(name) && this.states[name];\n\n    while (queue.length > 0) {\n      let /** @type {?} */ state: StateObject = queue.shift();\n      let /** @type {?} */ name = state.name;\n      let /** @type {?} */ result: StateObject = builder.build(state);\n      let /** @type {?} */ orphanIdx: number = orphans.indexOf(state);\n\n      if (result) {\n        let /** @type {?} */ existingState = getState(name);\n        if (existingState && existingState.name === name) {\n          throw new Error(`State '${name}' is already defined`);\n        }\n\n        let /** @type {?} */ existingFutureState = getState(name + \".**\");\n        if (existingFutureState) {\n          // Remove future state of the same name\n          this.$registry.deregister(existingFutureState);\n        }\n\n        states[name] = state;\n        this.attachRoute(state);\n        if (orphanIdx >= 0) orphans.splice(orphanIdx, 1);\n        registered.push(state);\n        continue;\n      }\n\n      let /** @type {?} */ prev = previousQueueLength[name];\n      previousQueueLength[name] = queue.length;\n      if (orphanIdx >= 0 && prev === queue.length) {\n        // Wait until two consecutive iterations where no additional states were dequeued successfully.\n        // throw new Error(`Cannot register orphaned state '${name}'`);\n        queue.push(state);\n        return states;\n      } else if (orphanIdx < 0) {\n        orphans.push(state);\n      }\n\n      queue.push(state);\n    }\n\n    if (registered.length) {\n      this.listeners.forEach(listener => listener(\"registered\", registered.map(s => s.self)));\n    }\n\n    return states;\n  }\n/**\n * @param {?} state\n * @return {?}\n */\nattachRoute(state: StateObject) {\n    if (state.abstract || !state.url) return;\n\n    this.$urlRouter.rule(this.$urlRouter.urlRuleFactory.create(state));\n  }\n}\n\nfunction StateQueueManager_tsickle_Closure_declarations() {\n/** @type {?} */\nStateQueueManager.prototype.queue;\n/** @type {?} */\nStateQueueManager.prototype.matcher;\n/** @type {?} */\nStateQueueManager.prototype.$registry;\n/** @type {?} */\nStateQueueManager.prototype.$urlRouter;\n/** @type {?} */\nStateQueueManager.prototype.states;\n/** @type {?} */\nStateQueueManager.prototype.builder;\n/** @type {?} */\nStateQueueManager.prototype.listeners;\n}\n\n","/** @module state */ /** for typedoc */\n\nimport {isString} from '../common/predicates';\nimport {StateOrName} from './interface';\nimport {StateObject} from './stateObject';\nimport {values} from '../common/common';\nexport class StateMatcher {\n/**\n * @param {?} _states\n */\nconstructor (private _states: { [key: string]: StateObject }) { }\n/**\n * @param {?} stateName\n * @return {?}\n */\nisRelative(stateName: string) {\n    stateName = stateName || \"\";\n    return stateName.indexOf(\".\") === 0 || stateName.indexOf(\"^\") === 0;\n  }\n/**\n * @param {?} stateOrName\n * @param {?=} base\n * @param {?=} matchGlob\n * @return {?}\n */\nfind(stateOrName: StateOrName, base?: StateOrName, matchGlob = true): StateObject {\n    if (!stateOrName && stateOrName !== \"\") return undefined;\n    let /** @type {?} */ isStr = isString(stateOrName);\n    let /** @type {?} */ name: string = isStr ? stateOrName : ( /** @type {?} */((<any>stateOrName))).name;\n\n    if (this.isRelative(name)) name = this.resolvePath(name, base);\n    let /** @type {?} */ state = this._states[name];\n\n    if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {\n      return state;\n    } else if (isStr && matchGlob) {\n      let /** @type {?} */ _states = values(this._states);\n      let /** @type {?} */ matches = _states.filter(state =>\n          state.__stateObjectCache.nameGlob &&\n          state.__stateObjectCache.nameGlob.matches(name)\n      );\n\n      if (matches.length > 1) {\n        console.log(`stateMatcher.find: Found multiple matches for ${name} using glob: `, matches.map(match => match.name));\n      }\n      return matches[0];\n    }\n    return undefined;\n  }\n/**\n * @param {?} name\n * @param {?} base\n * @return {?}\n */\nresolvePath(name: string, base: StateOrName) {\n    if (!base) throw new Error(`No reference point given for path '${name}'`);\n    \n    let /** @type {?} */ baseState: StateObject = this.find(base);\n\n    let /** @type {?} */ splitName = name.split(\".\"), /** @type {?} */ i = 0, /** @type {?} */ pathLength = splitName.length, /** @type {?} */ current = baseState;\n\n    for (; i < pathLength; i++) {\n      if (splitName[i] === \"\" && i === 0) {\n        current = baseState;\n        continue;\n      }\n      if (splitName[i] === \"^\") {\n        if (!current.parent) throw new Error(`Path '${name}' not valid for state '${baseState.name}'`);\n        current = current.parent;\n        continue;\n      }\n      break;\n    }\n    let /** @type {?} */ relName = splitName.slice(i).join(\".\");\n    return current.name + (current.name && relName ? \".\" : \"\") + relName;\n  }\n}\n\nfunction StateMatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nStateMatcher.prototype._states;\n}\n\n","/** @module state */ /** for typedoc */\n\nimport {Obj, omit, noop, extend, inherit, values, applyPairs, tail, mapObj, identity} from '../common/common';\nimport {isDefined, isFunction, isString, isArray} from '../common/predicates';\nimport {stringify} from '../common/strings';\nimport {prop, pattern, is, pipe, val} from '../common/hof';\nimport {StateDeclaration} from './interface';\n\nimport {StateObject} from './stateObject';\nimport {StateMatcher} from './stateMatcher';\nimport {Param} from '../params/param';\nimport {UrlMatcherFactory} from '../url/urlMatcherFactory';\nimport {UrlMatcher} from '../url/urlMatcher';\nimport {Resolvable} from '../resolve/resolvable';\nimport {services} from '../common/coreservices';\nimport {ResolvePolicy} from '../resolve/interface';\nimport { ParamFactory } from '../url/interface';\n\nconst /** @type {?} */ parseUrl = (url: string): any => {\n  if (!isString(url)) return false;\n  let /** @type {?} */ root = url.charAt(0) === '^';\n  return { val: root ? url.substring(1) : url, root };\n};\n\nexport type BuilderFunction = (state: StateObject, parent?: BuilderFunction) => any;\n\ninterface Builders {\n  [key: string]: BuilderFunction[];\n\n  name: BuilderFunction[];\n  parent: BuilderFunction[];\n  data: BuilderFunction[];\n  url: BuilderFunction[];\n  navigable: BuilderFunction[];\n  params: BuilderFunction[];\n  views: BuilderFunction[];\n  path: BuilderFunction[];\n  includes: BuilderFunction[];\n  resolvables: BuilderFunction[];\n}\n/**\n * @param {?} state\n * @return {?}\n */\nfunction nameBuilder(state: StateObject) {\n  return state.name;\n}\n/**\n * @param {?} state\n * @return {?}\n */\nfunction selfBuilder(state: StateObject) {\n  state.self.$$state = () => state;\n  return state.self;\n}\n/**\n * @param {?} state\n * @return {?}\n */\nfunction dataBuilder(state: StateObject) {\n  if (state.parent && state.parent.data) {\n    state.data = state.self.data = inherit(state.parent.data, state.data);\n  }\n  return state.data;\n}\n\nconst /** @type {?} */ getUrlBuilder = ($urlMatcherFactoryProvider: UrlMatcherFactory, root: () => StateObject) =>\nfunction urlBuilder(state: StateObject) {\n  let /** @type {?} */ stateDec: StateDeclaration = /** @type {?} */(( <any> state));\n\n  // For future states, i.e., states whose name ends with `.**`,\n  // match anything that starts with the url prefix\n  if (stateDec && stateDec.url && stateDec.name && stateDec.name.match(/\\.\\*\\*$/)) {\n    stateDec.url += \"{remainder:any}\"; // match any path (.*)\n  }\n\n  const /** @type {?} */ parsed = parseUrl(stateDec.url), /** @type {?} */ parent = state.parent;\n  const /** @type {?} */ url = !parsed ? stateDec.url : $urlMatcherFactoryProvider.compile(parsed.val, {\n    params: state.params || {},\n    paramMap: function (paramConfig: any, isSearch: boolean) {\n      if (stateDec.reloadOnSearch === false && isSearch) paramConfig = extend(paramConfig || {}, {dynamic: true});\n      return paramConfig;\n    }\n  });\n\n  if (!url) return null;\n  if (!$urlMatcherFactoryProvider.isMatcher(url)) throw new Error(`Invalid url '${url}' in state '${state}'`);\n  return (parsed && parsed.root) ? url : ((parent && parent.navigable) || root()).url.append( /** @type {?} */((<UrlMatcher> url)));\n};\n\nconst /** @type {?} */ getNavigableBuilder = (isRoot: (state: StateObject) => boolean) =>\nfunction navigableBuilder(state: StateObject) {\n  return !isRoot(state) && state.url ? state : (state.parent ? state.parent.navigable : null);\n};\n\nconst /** @type {?} */ getParamsBuilder = (paramFactory: ParamFactory) =>\nfunction paramsBuilder(state: StateObject): { [key: string]: Param } {\n  const /** @type {?} */ makeConfigParam = (config: any, id: string) => paramFactory.fromConfig(id, null, config);\n  let /** @type {?} */ urlParams: Param[] = (state.url && state.url.parameters({inherit: false})) || [];\n  let /** @type {?} */ nonUrlParams: Param[] = values(mapObj(omit(state.params || {}, urlParams.map(prop('id'))), makeConfigParam));\n  return urlParams.concat(nonUrlParams).map(p => [p.id, p]).reduce(applyPairs, {});\n};\n/**\n * @param {?} state\n * @return {?}\n */\nfunction pathBuilder(state: StateObject) {\n  return state.parent ? state.parent.path.concat(state) : /*root*/ [state];\n}\n/**\n * @param {?} state\n * @return {?}\n */\nfunction includesBuilder(state: StateObject) {\n  let /** @type {?} */ includes = state.parent ? extend({}, state.parent.includes) : {};\n  includes[state.name] = true;\n  return includes;\n}\n/**\n * This is a [[StateBuilder.builder]] function for the `resolve:` block on a [[StateDeclaration]].\n * \n * When the [[StateBuilder]] builds a [[StateObject]] object from a raw [[StateDeclaration]], this builder\n * validates the `resolve` property and converts it to a [[Resolvable]] array.\n * \n * resolve: input value can be:\n * \n * {\n *   // analyzed but not injected\n *   myFooResolve: function() { return \"myFooData\"; },\n * \n *   // function.toString() parsed, \"DependencyName\" dep as string (not min-safe)\n *   myBarResolve: function(DependencyName) { return DependencyName.fetchSomethingAsPromise() },\n * \n *   // Array split; \"DependencyName\" dep as string\n *   myBazResolve: [ \"DependencyName\", function(dep) { return dep.fetchSomethingAsPromise() },\n * \n *   // Array split; DependencyType dep as token (compared using ===)\n *   myQuxResolve: [ DependencyType, function(dep) { return dep.fetchSometingAsPromise() },\n * \n *   // val.$inject used as deps\n *   // where:\n *   //     corgeResolve.$inject = [\"DependencyName\"];\n *   //     function corgeResolve(dep) { dep.fetchSometingAsPromise() }\n *   // then \"DependencyName\" dep as string\n *   myCorgeResolve: corgeResolve,\n * \n *  // inject service by name\n *  // When a string is found, desugar creating a resolve that injects the named service\n *   myGraultResolve: \"SomeService\"\n * }\n * \n * or:\n * \n * [\n *   new Resolvable(\"myFooResolve\", function() { return \"myFooData\" }),\n *   new Resolvable(\"myBarResolve\", function(dep) { return dep.fetchSomethingAsPromise() }, [ \"DependencyName\" ]),\n *   { provide: \"myBazResolve\", useFactory: function(dep) { dep.fetchSomethingAsPromise() }, deps: [ \"DependencyName\" ] }\n * ]\n * @param {?} state\n * @return {?}\n */\nexport function resolvablesBuilder(state: StateObject): Resolvable[] {\n  interface Tuple { token: any, val: any, deps: any[], policy: ResolvePolicy }\n/**\n * convert resolve: {} and resolvePolicy: {} objects to an array of tuples\n */\nconst objects2Tuples    = (resolveObj: Obj, resolvePolicies: { [key: string]: ResolvePolicy }) =>\n      Object.keys(resolveObj || {}).map(token => ({token, val: resolveObj[token], deps: undefined, policy: resolvePolicies[token]}));\n/**\n * fetch DI annotations from a function or ng1-style array\n */\nconst annotate          = (fn: Function)  => {\n    let $injector = services.$injector;\n    // ng1 doesn't have an $injector until runtime.\n    // If the $injector doesn't exist, use \"deferred\" literal as a\n    // marker indicating they should be annotated when runtime starts\n    return fn['$inject'] || ($injector && $injector.annotate(fn, $injector.strictDi)) || <any> \"deferred\";\n  };\n/**\n * true if the object has both `token` and `resolveFn`, and is probably a [[ResolveLiteral]]\n */\nconst isResolveLiteral  = (obj: any) => !!(obj.token && obj.resolveFn);\n/**\n * true if the object looks like a provide literal, or a ng2 Provider\n */\nconst isLikeNg2Provider = (obj: any) => !!((obj.provide || obj.token) && (obj.useValue || obj.useFactory || obj.useExisting || obj.useClass));\n/**\n * true if the object looks like a tuple from obj2Tuples\n */\nconst isTupleFromObj    = (obj: any) => !!(obj && obj.val && (isString(obj.val) || isArray(obj.val)  || isFunction(obj.val)));\n/**\n * extracts the token from a Provider or provide literal\n */\nconst token             = (p: any) => p.provide || p.token;\n/**\n * Given a literal resolve or provider object, returns a Resolvable\n */\nconst literal2Resolvable = pattern([\n    [prop('resolveFn'),   p => new Resolvable(token(p), p.resolveFn, p.deps, p.policy)],\n    [prop('useFactory'),  p => new Resolvable(token(p), p.useFactory, (p.deps || p.dependencies), p.policy)],\n    [prop('useClass'),    p => new Resolvable(token(p), () => new (<any>p.useClass)(), [], p.policy)],\n    [prop('useValue'),    p => new Resolvable(token(p), () => p.useValue, [], p.policy, p.useValue)],\n    [prop('useExisting'), p => new Resolvable(token(p), identity, [p.useExisting], p.policy)],\n  ]);\n\n  const /** @type {?} */ tuple2Resolvable = pattern([\n    [pipe(prop(\"val\"), isString),   (tuple: Tuple) => new Resolvable(tuple.token, identity, [ tuple.val ], tuple.policy)],\n    [pipe(prop(\"val\"), isArray),    (tuple: Tuple) => new Resolvable(tuple.token, tail( /** @type {?} */((<any[]> tuple.val))), tuple.val.slice(0, -1), tuple.policy)],\n    [pipe(prop(\"val\"), isFunction), (tuple: Tuple) => new Resolvable(tuple.token, tuple.val, annotate(tuple.val), tuple.policy)],\n  ]);\n\n  const /** @type {?} */ item2Resolvable = /** @type {?} */(( <(obj: any) => Resolvable> pattern([\n    [is(Resolvable),                (r: Resolvable) => r],\n    [isResolveLiteral,              literal2Resolvable],\n    [isLikeNg2Provider,             literal2Resolvable],\n    [isTupleFromObj,                tuple2Resolvable],\n    [val(true),                     (obj: any) => { throw new Error(\"Invalid resolve value: \" + stringify(obj)) }]\n  ])));\n\n  // If resolveBlock is already an array, use it as-is.\n  // Otherwise, assume it's an object and convert to an Array of tuples\n  let /** @type {?} */ decl = state.resolve;\n  let /** @type {?} */ items: any[] = isArray(decl) ? decl : objects2Tuples(decl, state.resolvePolicy || {});\n  return items.map(item2Resolvable);\n}\n/**\n * \\@internalapi A internal global service\n * \n * StateBuilder is a factory for the internal [[StateObject]] objects.\n * \n * When you register a state with the [[StateRegistry]], you register a plain old javascript object which\n * conforms to the [[StateDeclaration]] interface.  This factory takes that object and builds the corresponding\n * [[StateObject]] object, which has an API and is used internally.\n * \n * Custom properties or API may be added to the internal [[StateObject]] object by registering a decorator function\n * using the [[builder]] method.\n */\nexport class StateBuilder {\n/**\n * An object that contains all the BuilderFunctions registered, key'd by the name of the State property they build\n */\nprivate builders: Builders;\n/**\n * @param {?} matcher\n * @param {?} urlMatcherFactory\n */\nconstructor(private matcher: StateMatcher, urlMatcherFactory: UrlMatcherFactory) {\n    let self = this;\n\n    const root = () => matcher.find(\"\");\n    const isRoot = (state: StateObject) => state.name === \"\";\n\n    function parentBuilder(state: StateObject) {\n      if (isRoot(state)) return null;\n      return matcher.find(self.parentName(state)) || root();\n    }\n\n    this.builders = {\n      name: [ nameBuilder ],\n      self: [ selfBuilder ],\n      parent: [ parentBuilder ],\n      data: [ dataBuilder ],\n      // Build a URLMatcher if necessary, either via a relative or absolute URL\n      url: [ getUrlBuilder(urlMatcherFactory, root) ],\n      // Keep track of the closest ancestor state that has a URL (i.e. is navigable)\n      navigable: [ getNavigableBuilder(isRoot) ],\n      params: [ getParamsBuilder(urlMatcherFactory.paramFactory) ],\n      // Each framework-specific ui-router implementation should define its own `views` builder\n      // e.g., src/ng1/statebuilders/views.ts\n      views: [],\n      // Keep a full path from the root down to this state as this is needed for state activation.\n      path: [ pathBuilder ],\n      // Speed up $state.includes() as it's used a lot\n      includes: [ includesBuilder ],\n      resolvables: [ resolvablesBuilder ]\n    };\n  }\n/**\n * Registers a [[BuilderFunction]] for a specific [[StateObject]] property (e.g., `parent`, `url`, or `path`).\n * More than one BuilderFunction can be registered for a given property.\n * \n * The BuilderFunction(s) will be used to define the property on any subsequently built [[StateObject]] objects.\n * \n * @param {?} name The name of the State property being registered for.\n * @param {?} fn The BuilderFunction which will be used to build the State property\n * @return {?} a function which deregisters the BuilderFunction\n */\nbuilder(name: string, fn: BuilderFunction): (BuilderFunction|BuilderFunction[]|Function) {\n    let /** @type {?} */ builders = this.builders;\n    let /** @type {?} */ array = builders[name] || [];\n    // Backwards compat: if only one builder exists, return it, else return whole arary.\n    if (isString(name) && !isDefined(fn)) return array.length > 1 ? array : array[0];\n    if (!isString(name) || !isFunction(fn)) return;\n\n    builders[name] = array;\n    builders[name].push(fn);\n    return () => builders[name].splice(builders[name].indexOf(fn, 1)) && null;\n  }\n/**\n * Builds all of the properties on an essentially blank State object, returning a State object which has all its\n * properties and API built.\n * \n * @param {?} state an uninitialized State object\n * @return {?} the built State object\n */\nbuild(state: StateObject): StateObject {\n    let {matcher, builders} = this;\n    let /** @type {?} */ parent = this.parentName(state);\n\n    if (parent && !matcher.find(parent, undefined, false)) {\n      return null;\n    }\n\n    for (let /** @type {?} */ key in builders) {\n      if (!builders.hasOwnProperty(key)) continue;\n      let /** @type {?} */ chain = builders[key].reduce((parentFn: BuilderFunction, step: BuilderFunction) => (_state) => step(_state, parentFn), noop);\n      state[key] = chain(state);\n    }\n    return state;\n  }\n/**\n * @param {?} state\n * @return {?}\n */\nparentName(state: StateObject) {\n    // name = 'foo.bar.baz.**'\n    let /** @type {?} */ name = state.name || \"\";\n    // segments = ['foo', 'bar', 'baz', '.**']\n    let /** @type {?} */ segments = name.split('.');\n    // segments = ['foo', 'bar', 'baz']\n    let /** @type {?} */ lastSegment = segments.pop();\n    // segments = ['foo', 'bar'] (ignore .** segment for future states)\n    if (lastSegment === '**') segments.pop();\n\n    if (segments.length) {\n      if (state.parent) {\n        throw new Error(`States that specify the 'parent:' property should not have a '.' in their name (${name})`);\n      }\n\n      // 'foo.bar'\n      return segments.join(\".\");\n    }\n\n    if (!state.parent) return \"\";\n    return isString(state.parent) ? state.parent : state.parent.name;\n  }\n/**\n * @param {?} state\n * @return {?}\n */\nname(state: StateObject) {\n    let /** @type {?} */ name = state.name;\n    if (name.indexOf('.') !== -1 || !state.parent) return name;\n\n    let /** @type {?} */ parentName = isString(state.parent) ? state.parent : state.parent.name;\n    return parentName ? parentName + \".\" + name : name;\n  }\n}\n\nfunction StateBuilder_tsickle_Closure_declarations() {\n/**\n * An object that contains all the BuilderFunctions registered, key'd by the name of the State property they build\n * @type {?}\n */\nStateBuilder.prototype.builders;\n/** @type {?} */\nStateBuilder.prototype.matcher;\n}\n\n","/**\n * @coreapi\n * @module params\n */\n/** */\n\nimport {extend, ancestors, Obj} from '../common/common';\nimport {StateObject} from '../state/stateObject';\n/**\n * \\@internalapi\n */\nexport class StateParams {\n  [key: string]: any;\n/**\n * @param {?=} params\n */\nconstructor(params: Obj = {}) {\n    extend(this, params);\n  }\n/**\n * Merges a set of parameters with all parameters inherited between the common parents of the\n * current state and a given destination state.\n * \n * @param {?} newParams\n * @param {?} $current\n * @param {?} $to\n * @return {?}\n */\n$inherit(newParams: Obj, $current: StateObject, $to: StateObject) {\n    let /** @type {?} */ parents = ancestors($current, $to), /** @type {?} */\n        parentParams: string[], /** @type {?} */\n        inherited: Obj = {}, /** @type {?} */\n        inheritList: string[] = [];\n\n    for (let /** @type {?} */ i in parents) {\n      if (!parents[i] || !parents[i].params) continue;\n      parentParams = Object.keys(parents[i].params);\n      if (!parentParams.length) continue;\n\n      for (let /** @type {?} */ j in parentParams) {\n        if (inheritList.indexOf(parentParams[j]) >= 0) continue;\n        inheritList.push(parentParams[j]);\n        inherited[parentParams[j]] = this[parentParams[j]];\n      }\n    }\n    return extend({}, inherited, newParams);\n  };\n}\n\n","/**\n * @coreapi\n * @module params\n */\n/** */\n\nimport { fromJson, toJson, identity, equals, inherit, map, extend, pick } from '../common/common';\nimport { isDefined, isNullOrUndefined } from '../common/predicates';\nimport { is } from '../common/hof';\nimport { services } from '../common/coreservices';\nimport { ParamType } from './paramType';\nimport { ParamTypeDefinition } from './interface';\n/**\n * A registry for parameter types.\n * \n * This registry manages the built-in (and custom) parameter types.\n * \n * The built-in parameter types are:\n * \n * - [[string]]\n * - [[path]]\n * - [[query]]\n * - [[hash]]\n * - [[int]]\n * - [[bool]]\n * - [[date]]\n * - [[json]]\n * - [[any]]\n */\nexport class ParamTypes {\n/**\n * @hidden\n */\ntypes: any;\n/**\n * @hidden\n */\nenqueue: boolean = true;\n/**\n * @hidden\n */\ntypeQueue: any[] = [];\n/**\n * Built-in parameter type: `string`\n * \n * This parameter type coerces values to strings.\n * It matches anything (`new RegExp(\".*\")`) in the URL\n */\nstatic string: ParamTypeDefinition;\n/**\n * Built-in parameter type: `path`\n * \n * This parameter type is the default type for path parameters.\n * A path parameter is any parameter declared in the path portion of a url\n * \n * - `/foo/:param1/:param2`: two path parameters\n * \n * This parameter type behaves exactly like the [[string]] type with one exception.\n * When matching parameter values in the URL, the `path` type does not match forward slashes `/`.\n * \n * #### Angular 1 note:\n * In ng1, this type is overridden with one that pre-encodes slashes as `~2F` instead of `%2F`.\n * For more details about this angular 1 behavior, see: https://github.com/angular-ui/ui-router/issues/2598\n */\nstatic path: ParamTypeDefinition;\n/**\n * Built-in parameter type: `query`\n * \n * This parameter type is the default type for query/search parameters.\n * It behaves the same as the [[string]] parameter type.\n * \n * A query parameter is any parameter declared in the query/search portion of a url\n * \n * - `/bar?param2`: a query parameter\n */\nstatic query: ParamTypeDefinition;\n/**\n * Built-in parameter type: `hash`\n * \n * This parameter type is used for the `#` parameter (the hash)\n * It behaves the same as the [[string]] parameter type.\n * \\@coreapi\n */\nstatic hash: ParamTypeDefinition;\n/**\n * Built-in parameter type: `int`\n * \n * This parameter type serializes javascript integers (`number`s which represent an integer) to the URL.\n * \n * #### Example:\n * ```js\n * .state({\n *   name: 'user',\n *   url: '/user/{id:int}'\n * });\n * ```\n * ```js\n * $state.go('user', { id: 1298547 });\n * ```\n * \n * The URL will serialize to: `/user/1298547`.\n * \n * When the parameter value is read, it will be the `number` `1298547`, not the string `\"1298547\"`.\n */\nstatic int: ParamTypeDefinition;\n/**\n * Built-in parameter type: `bool`\n * \n * This parameter type serializes `true`/`false` as `1`/`0`\n * \n * #### Example:\n * ```js\n * .state({\n *   name: 'inbox',\n *   url: '/inbox?{unread:bool}'\n * });\n * ```\n * ```js\n * $state.go('inbox', { unread: true });\n * ```\n * \n * The URL will serialize to: `/inbox?unread=1`.\n * \n * Conversely, if the url is `/inbox?unread=0`, the value of the `unread` parameter will be a `false`.\n */\nstatic bool: ParamTypeDefinition;\n/**\n * Built-in parameter type: `date`\n * \n * This parameter type can be used to serialize Javascript dates as parameter values.\n * \n * #### Example:\n * ```js\n * .state({\n *   name: 'search',\n *   url: '/search?{start:date}'\n * });\n * ```\n * ```js\n * $state.go('search', { start: new Date(2000, 0, 1) });\n * ```\n * \n * The URL will serialize to: `/search?start=2000-01-01`.\n * \n * Conversely, if the url is `/search?start=2016-12-25`, the value of the `start` parameter will be a `Date` object where:\n * \n * - `date.getFullYear() === 2016`\n * - `date.getMonth() === 11` (month is 0-based)\n * - `date.getDate() === 25`\n */\nstatic date: ParamTypeDefinition;\n/**\n * Built-in parameter type: `json`\n * \n * This parameter type can be used to serialize javascript objects into the URL using JSON serialization.\n * \n * #### Example:\n * This example serializes an plain javascript object to the URL\n * ```js\n * .state({\n *   name: 'map',\n *   url: '/map/{coords:json}'\n * });\n * ```\n * ```js\n * $state.go('map', { coords: { x: 10399.2, y: 49071 });\n * ```\n * \n * The URL will serialize to: `/map/%7B%22x%22%3A10399.2%2C%22y%22%3A49071%7D`\n */\nstatic json: ParamTypeDefinition;\n/**\n * Built-in parameter type: `any`\n * \n * This parameter type is used by default for url-less parameters (parameters that do not appear in the URL).\n * This type does not encode or decode.\n * It is compared using a deep `equals` comparison.\n * \n * #### Example:\n * This example defines a non-url parameter on a [[StateDeclaration]].\n * ```js\n * .state({\n *   name: 'new',\n *   url: '/new',\n *   params: {\n *     inrepyto: null\n *   }\n * });\n * ```\n * ```js\n * $state.go('new', { inreplyto: currentMessage });\n * ```\n */\nstatic any: ParamTypeDefinition;\n/**\n * \\@internalapi\n */\nprivate defaultTypes: any = pick(ParamTypes.prototype, [\"hash\", \"string\", \"query\", \"path\", \"int\", \"bool\", \"date\", \"json\", \"any\"]);\n/**\n * \\@internalapi\n */\nconstructor() {\n    // Register default types. Store them in the prototype of this.types.\n    const makeType = (definition: ParamTypeDefinition, name: string) =>\n        new ParamType(extend({ name }, definition));\n    this.types = inherit(map(this.defaultTypes, makeType), {});\n  }\n/**\n * \\@internalapi\n * @return {?}\n */\ndispose() {\n    this.types = {};\n  }\n/**\n * Registers a parameter type\n * \n * End users should call [[UrlMatcherFactory.type]], which delegates to this method.\n * @param {?} name\n * @param {?=} definition\n * @param {?=} definitionFn\n * @return {?}\n */\ntype(name: string, definition?: ParamTypeDefinition, definitionFn?: () => ParamTypeDefinition) {\n    if (!isDefined(definition)) return this.types[name];\n    if (this.types.hasOwnProperty(name)) throw new Error(`A type named '${name}' has already been defined.`);\n\n    this.types[name] = new ParamType(extend({ name }, definition));\n\n    if (definitionFn) {\n      this.typeQueue.push({ name, def: definitionFn });\n      if (!this.enqueue) this._flushTypeQueue();\n    }\n\n    return this;\n  }\n/**\n * \\@internalapi\n * @return {?}\n */\n_flushTypeQueue() {\n    while (this.typeQueue.length) {\n      let /** @type {?} */ type = this.typeQueue.shift();\n      if (type.pattern) throw new Error(\"You cannot override a type's .pattern at runtime.\");\n      extend(this.types[type.name], services.$injector.invoke(type.def));\n    }\n  }\n}\n\nfunction ParamTypes_tsickle_Closure_declarations() {\n/**\n * Built-in parameter type: `string`\n * \n * This parameter type coerces values to strings.\n * It matches anything (`new RegExp(\".*\")`) in the URL\n * @type {?}\n */\nParamTypes.string;\n/**\n * Built-in parameter type: `path`\n * \n * This parameter type is the default type for path parameters.\n * A path parameter is any parameter declared in the path portion of a url\n * \n * - `/foo/:param1/:param2`: two path parameters\n * \n * This parameter type behaves exactly like the [[string]] type with one exception.\n * When matching parameter values in the URL, the `path` type does not match forward slashes `/`.\n * \n * #### Angular 1 note:\n * In ng1, this type is overridden with one that pre-encodes slashes as `~2F` instead of `%2F`.\n * For more details about this angular 1 behavior, see: https://github.com/angular-ui/ui-router/issues/2598\n * @type {?}\n */\nParamTypes.path;\n/**\n * Built-in parameter type: `query`\n * \n * This parameter type is the default type for query/search parameters.\n * It behaves the same as the [[string]] parameter type.\n * \n * A query parameter is any parameter declared in the query/search portion of a url\n * \n * - `/bar?param2`: a query parameter\n * @type {?}\n */\nParamTypes.query;\n/**\n * Built-in parameter type: `hash`\n * \n * This parameter type is used for the `#` parameter (the hash)\n * It behaves the same as the [[string]] parameter type.\n * \\@coreapi\n * @type {?}\n */\nParamTypes.hash;\n/**\n * Built-in parameter type: `int`\n * \n * This parameter type serializes javascript integers (`number`s which represent an integer) to the URL.\n * \n * #### Example:\n * ```js\n * .state({\n *   name: 'user',\n *   url: '/user/{id:int}'\n * });\n * ```\n * ```js\n * $state.go('user', { id: 1298547 });\n * ```\n * \n * The URL will serialize to: `/user/1298547`.\n * \n * When the parameter value is read, it will be the `number` `1298547`, not the string `\"1298547\"`.\n * @type {?}\n */\nParamTypes.int;\n/**\n * Built-in parameter type: `bool`\n * \n * This parameter type serializes `true`/`false` as `1`/`0`\n * \n * #### Example:\n * ```js\n * .state({\n *   name: 'inbox',\n *   url: '/inbox?{unread:bool}'\n * });\n * ```\n * ```js\n * $state.go('inbox', { unread: true });\n * ```\n * \n * The URL will serialize to: `/inbox?unread=1`.\n * \n * Conversely, if the url is `/inbox?unread=0`, the value of the `unread` parameter will be a `false`.\n * @type {?}\n */\nParamTypes.bool;\n/**\n * Built-in parameter type: `date`\n * \n * This parameter type can be used to serialize Javascript dates as parameter values.\n * \n * #### Example:\n * ```js\n * .state({\n *   name: 'search',\n *   url: '/search?{start:date}'\n * });\n * ```\n * ```js\n * $state.go('search', { start: new Date(2000, 0, 1) });\n * ```\n * \n * The URL will serialize to: `/search?start=2000-01-01`.\n * \n * Conversely, if the url is `/search?start=2016-12-25`, the value of the `start` parameter will be a `Date` object where:\n * \n * - `date.getFullYear() === 2016`\n * - `date.getMonth() === 11` (month is 0-based)\n * - `date.getDate() === 25`\n * @type {?}\n */\nParamTypes.date;\n/**\n * Built-in parameter type: `json`\n * \n * This parameter type can be used to serialize javascript objects into the URL using JSON serialization.\n * \n * #### Example:\n * This example serializes an plain javascript object to the URL\n * ```js\n * .state({\n *   name: 'map',\n *   url: '/map/{coords:json}'\n * });\n * ```\n * ```js\n * $state.go('map', { coords: { x: 10399.2, y: 49071 });\n * ```\n * \n * The URL will serialize to: `/map/%7B%22x%22%3A10399.2%2C%22y%22%3A49071%7D`\n * @type {?}\n */\nParamTypes.json;\n/**\n * Built-in parameter type: `any`\n * \n * This parameter type is used by default for url-less parameters (parameters that do not appear in the URL).\n * This type does not encode or decode.\n * It is compared using a deep `equals` comparison.\n * \n * #### Example:\n * This example defines a non-url parameter on a [[StateDeclaration]].\n * ```js\n * .state({\n *   name: 'new',\n *   url: '/new',\n *   params: {\n *     inrepyto: null\n *   }\n * });\n * ```\n * ```js\n * $state.go('new', { inreplyto: currentMessage });\n * ```\n * @type {?}\n */\nParamTypes.any;\n/**\n * @hidden\n * @type {?}\n */\nParamTypes.prototype.types;\n/**\n * @hidden\n * @type {?}\n */\nParamTypes.prototype.enqueue;\n/**\n * @hidden\n * @type {?}\n */\nParamTypes.prototype.typeQueue;\n/**\n * \\@internalapi\n * @type {?}\n */\nParamTypes.prototype.defaultTypes;\n}\n\n/**\n * @hidden\n * @return {?}\n */\nfunction initDefaultTypes() {\n\n  const /** @type {?} */ makeDefaultType = (def) => {\n    const /** @type {?} */ valToString = (val: any) =>\n        val != null ? val.toString() : val;\n\n    const /** @type {?} */ defaultTypeBase = {\n      encode: valToString,\n      decode: valToString,\n      is: is(String),\n      pattern: /.*/,\n      equals: (a: any, b: any) => a == b, // allow coersion for null/undefined/\"\"\n    };\n\n    return /** @type {?} */(( extend({}, defaultTypeBase, def) as ParamTypeDefinition));\n  };\n\n  // Default Parameter Type Definitions\n  extend(ParamTypes.prototype, {\n    string: makeDefaultType({}),\n\n    path: makeDefaultType({\n      pattern: /[^/]*/,\n    }),\n\n    query: makeDefaultType({}),\n\n    hash: makeDefaultType({\n      inherit: false,\n    }),\n\n    int: makeDefaultType({\n      decode: (val: string) => parseInt(val, 10),\n      is: function(val: any) {\n        return !isNullOrUndefined(val) && this.decode(val.toString()) === val;\n      },\n      pattern: /-?\\d+/,\n    }),\n\n    bool: makeDefaultType({\n      encode: (val: any) => val && 1 || 0,\n      decode: (val: string) => parseInt(val, 10) !== 0,\n      is: is(Boolean),\n      pattern: /0|1/\n    }),\n\n    date: makeDefaultType({\n      encode: function(val: any) {\n        return !this.is(val) ? undefined : [\n          val.getFullYear(),\n          ('0' + (val.getMonth() + 1)).slice(-2),\n          ('0' + val.getDate()).slice(-2)\n        ].join(\"-\");\n      },\n      decode: function(val: string) {\n        if (this.is(val)) return /** @type {?} */(( /** @type {?} */(( <any> val)) as Date));\n        let /** @type {?} */ match = this.capture.exec(val);\n        return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;\n      },\n      is: (val: any) => val instanceof Date && !isNaN(val.valueOf()),\n/**\n * @param {?} l\n * @param {?} r\n * @return {?}\n */\nequals(l: any, r: any) {\n        return ['getFullYear', 'getMonth', 'getDate']\n            .reduce((acc, fn) => acc && l[fn]() === r[fn](), true)\n      },\n      pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,\n      capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/\n    }),\n\n    json: makeDefaultType({\n      encode: toJson,\n      decode: fromJson,\n      is: is(Object),\n      equals: equals,\n      pattern: /[^/]*/\n    }),\n\n    // does not encode/decode\n    any: makeDefaultType({\n      encode: identity,\n      decode: identity,\n      is: () => true,\n      equals: equals,\n    }),\n  })\n\n}\n\ninitDefaultTypes();\n\n","/**\n * Functions that manipulate strings\n *\n * Although these functions are exported, they are subject to change without notice.\n *\n * @module common_strings\n */ /** */\n\n\nimport { isString, isArray, isDefined, isNull, isPromise, isInjectable, isObject } from './predicates';\nimport { Rejection } from '../transition/rejectFactory';\nimport { IInjectable, identity, Obj, tail, pushR } from './common';\nimport { pattern, is, not, val, invoke } from './hof';\nimport { Transition } from '../transition/transition';\nimport { Resolvable } from '../resolve/resolvable';\n/**\n * Returns a string shortened to a maximum length\n * \n * If the string is already less than the `max` length, return the string.\n * Else return the string, shortened to `max - 3` and append three dots (\"...\").\n * \n * @param {?} max the maximum length of the string to return\n * @param {?} str the input string\n * @return {?}\n */\nexport function maxLength(max: number, str: string) {\n  if (str.length <= max) return str;\n  return str.substr(0, max - 3) + \"...\";\n}\n/**\n * Returns a string, with spaces added to the end, up to a desired str length\n * \n * If the string is already longer than the desired length, return the string.\n * Else returns the string, with extra spaces on the end, such that it reaches `length` characters.\n * \n * @param {?} length the desired length of the string to return\n * @param {?} str the input string\n * @return {?}\n */\nexport function padString(length: number, str: string) {\n  while (str.length < length) str += \" \";\n  return str;\n}\n/**\n * @param {?} camelCase\n * @return {?}\n */\nexport function kebobString(camelCase: string) {\n  return camelCase\n      .replace(/^([A-Z])/, $1 => $1.toLowerCase()) // replace first char\n      .replace(/([A-Z])/g, $1 => \"-\" + $1.toLowerCase()); // replace rest\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction _toJson(obj: Obj) {\n  return JSON.stringify(obj);\n}\n/**\n * @param {?} json\n * @return {?}\n */\nfunction _fromJson(json: string) {\n  return isString(json) ? JSON.parse(json) : json;\n}\n/**\n * @param {?} p\n * @return {?}\n */\nfunction promiseToString(p: Promise<any>) {\n  return `Promise(${JSON.stringify(p)})`;\n}\n/**\n * @param {?} fn\n * @return {?}\n */\nexport function functionToString(fn: Function) {\n  let /** @type {?} */ fnStr = fnToString(fn);\n  let /** @type {?} */ namedFunctionMatch = fnStr.match(/^(function [^ ]+\\([^)]*\\))/);\n  let /** @type {?} */ toStr = namedFunctionMatch ? namedFunctionMatch[1] : fnStr;\n\n  let /** @type {?} */ fnName = fn['name'] || \"\";\n  if (fnName && toStr.match(/function \\(/)) {\n    return 'function ' + fnName + toStr.substr(9);\n  }\n  return toStr;\n}\n/**\n * @param {?} fn\n * @return {?}\n */\nexport function fnToString(fn: IInjectable) {\n  let /** @type {?} */ _fn = isArray(fn) ? fn.slice(-1)[0] : fn;\n  return _fn && _fn.toString() || \"undefined\";\n}\n\nlet /** @type {?} */ stringifyPatternFn: (val: any) => string = null;\nlet /** @type {?} */ stringifyPattern = function(value: any) {\n  let /** @type {?} */ isRejection = Rejection.isRejectionPromise;\n\n  stringifyPatternFn = /** @type {?} */(( <any> stringifyPatternFn)) || pattern([\n    [not(isDefined),  val(\"undefined\")],\n    [isNull,          val(\"null\")],\n    [isPromise,       val(\"[Promise]\")],\n    [isRejection,     (x: any) => x._transitionRejection.toString()],\n    [is(Rejection),   invoke(\"toString\")],\n    [is(Transition),  invoke(\"toString\")],\n    [is(Resolvable),  invoke(\"toString\")],\n    [isInjectable,    functionToString],\n    [val(true),       identity]\n  ]);\n\n  return stringifyPatternFn(value);\n};\n/**\n * @param {?} o\n * @return {?}\n */\nexport function stringify(o: any) {\n  var /** @type {?} */ seen: any[] = [];\n/**\n * @param {?} val\n * @return {?}\n */\nfunction format(val: any) {\n    if (isObject(val)) {\n      if (seen.indexOf(val) !== -1) return '[circular ref]';\n      seen.push(val);\n    }\n    return stringifyPattern(val);\n  }\n\n  return JSON.stringify(o, (key, val) => format(val)).replace(/\\\\\"/g, '\"');\n}\n/**\n * Returns a function that splits a string on a character or substring\n */\nexport const beforeAfterSubstr = (char: string) => (str: string) => {\n  if (!str) return [\"\", \"\"];\n  let idx = str.indexOf(char);\n  if (idx === -1) return [str, \"\"];\n  return [str.substr(0, idx), str.substr(idx + 1)];\n};\n/**\n * Splits on a delimiter, but returns the delimiters in the array\n * \n * #### Example:\n * ```js\n * var splitOnSlashes = splitOnDelim('/');\n * splitOnSlashes(\"/foo\"); // [\"/\", \"foo\"]\n * splitOnSlashes(\"/foo/\"); // [\"/\", \"foo\", \"/\"]\n * ```\n * @param {?} delim\n * @return {?}\n */\nexport function splitOnDelim(delim: string) {\n  let /** @type {?} */ re = new RegExp(\"(\" + delim + \")\", \"g\");\n  return (str: string) =>\n      str.split(re).filter(identity);\n};\n/**\n * Reduce fn that joins neighboring strings\n * \n * Given an array of strings, returns a new array\n * where all neighboring strings have been joined.\n * \n * #### Example:\n * ```js\n * let arr = [\"foo\", \"bar\", 1, \"baz\", \"\", \"qux\" ];\n * arr.reduce(joinNeighborsR, []) // [\"foobar\", 1, \"bazqux\" ]\n * ```\n * @param {?} acc\n * @param {?} x\n * @return {?}\n */\nexport function joinNeighborsR(acc: any[], x: any) {\n  if (isString(tail(acc)) && isString(x))\n    return acc.slice(0, -1).concat(tail(acc)+ x);\n  return pushR(acc, x);\n};\n\n","/**\n * @coreapi\n * @module transition\n */\n/** for typedoc */\n\nimport { trace } from '../common/trace';\nimport { services } from '../common/coreservices';\nimport {\n  map, find, extend, mergeR, tail, omit, toJson, arrayTuples, unnestR, identity, anyTrueR,\n} from '../common/common';\nimport {isObject, isUndefined} from '../common/predicates';\nimport { prop, propEq, val, not, is } from '../common/hof';\nimport { StateDeclaration, StateOrName } from '../state/interface';\nimport {\n  TransitionOptions, TreeChanges, IHookRegistry, TransitionHookPhase, RegisteredHooks, HookRegOptions,\n  HookMatchCriteria, TransitionStateHookFn, TransitionHookFn,\n} from './interface'; // has or is using\n\nimport { TransitionHook } from './transitionHook';\nimport { matchState, makeEvent, RegisteredHook } from './hookRegistry';\nimport { HookBuilder } from './hookBuilder';\nimport { PathNode } from '../path/pathNode';\nimport { PathUtils } from '../path/pathFactory';\nimport { StateObject } from '../state/stateObject';\nimport { TargetState } from '../state/targetState';\nimport { Param } from '../params/param';\nimport { Resolvable } from '../resolve/resolvable';\nimport { ViewConfig } from '../view/interface';\nimport { ResolveContext } from '../resolve/resolveContext';\nimport { UIRouter } from '../router';\nimport { UIInjector } from '../interface';\nimport { RawParams } from '../params/interface';\nimport { ResolvableLiteral } from '../resolve/interface';\n/**\n * @hidden\n */\nconst stateSelf: (_state: StateObject) => StateDeclaration = prop(\"self\");\n/**\n * Represents a transition between two states.\n * \n * When navigating to a state, we are transitioning **from** the current state **to** the new state.\n * \n * This object contains all contextual information about the to/from states, parameters, resolves.\n * It has information about all states being entered and exited as a result of the transition.\n */\nexport class Transition implements IHookRegistry {\n/**\n * @hidden\n */\nstatic diToken = Transition;\n/**\n * A unique identifier for the transition.\n * \n * This is an auto incrementing integer, starting from `0`.\n */\n$id: number;\n/**\n * A reference to the [[UIRouter]] instance\n * \n * This reference can be used to access the router services, such as the [[StateService]]\n */\nrouter: UIRouter;\n/**\n * @hidden\n */\nprivate _deferred = services.$q.defer();\n/**\n * This promise is resolved or rejected based on the outcome of the Transition.\n * \n * When the transition is successful, the promise is resolved\n * When the transition is unsuccessful, the promise is rejected with the [[Rejection]] or javascript error\n */\npromise: Promise<any> = this._deferred.promise;\n/**\n * A boolean which indicates if the transition was successful\n * \n * After a successful transition, this value is set to true.\n * After an unsuccessful transition, this value is set to false.\n * \n * The value will be undefined if the transition is not complete\n */\nsuccess: boolean;\n/**\n * @hidden\n */\n_aborted: boolean;\n/**\n * @hidden\n */\nprivate _error: any;\n/**\n * @hidden Holds the hook registration functions such as those passed to Transition.onStart()\n */\n_registeredHooks: RegisteredHooks = { };\n/**\n * @hidden\n */\nprivate _options: TransitionOptions;\n/**\n * @hidden\n */\nprivate _treeChanges: TreeChanges;\n/**\n * @hidden\n */\nprivate _targetState: TargetState;\n/**\n * @hidden\n */\nprivate _hookBuilder = new HookBuilder(this);\n/**\n * @hidden\n * @param {?} criteria\n * @param {?} callback\n * @param {?=} options\n * @return {?}\n */\nonBefore(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function { return; }\n/**\n * \\@inheritdoc\n * @param {?} criteria\n * @param {?} callback\n * @param {?=} options\n * @return {?}\n */\nonStart(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function { return; }\n/**\n * \\@inheritdoc\n * @param {?} criteria\n * @param {?} callback\n * @param {?=} options\n * @return {?}\n */\nonExit(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function { return; }\n/**\n * \\@inheritdoc\n * @param {?} criteria\n * @param {?} callback\n * @param {?=} options\n * @return {?}\n */\nonRetain(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function { return; }\n/**\n * \\@inheritdoc\n * @param {?} criteria\n * @param {?} callback\n * @param {?=} options\n * @return {?}\n */\nonEnter(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function { return; }\n/**\n * \\@inheritdoc\n * @param {?} criteria\n * @param {?} callback\n * @param {?=} options\n * @return {?}\n */\nonFinish(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function { return; }\n/**\n * \\@inheritdoc\n * @param {?} criteria\n * @param {?} callback\n * @param {?=} options\n * @return {?}\n */\nonSuccess(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function { return; }\n/**\n * \\@inheritdoc\n * @param {?} criteria\n * @param {?} callback\n * @param {?=} options\n * @return {?}\n */\nonError(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function { return; }\n/**\n * @hidden \n * Creates the transition-level hook registration functions\n * (which can then be used to register hooks)\n * @return {?}\n */\nprivate createTransitionHookRegFns() {\n    this.router.transitionService._pluginapi._getEvents()\n        .filter(type => type.hookPhase !== TransitionHookPhase.CREATE)\n        .forEach(type => makeEvent(this, this.router.transitionService, type));\n  }\n/**\n * \\@internalapi\n * @param {?} hookName\n * @return {?}\n */\ngetHooks(hookName: string): RegisteredHook[] {\n    return this._registeredHooks[hookName];\n  }\n/**\n * Creates a new Transition object.\n * \n * If the target state is not valid, an error is thrown.\n * \n * \\@internalapi \n * \n * @param {?} fromPath The path of [[PathNode]]s from which the transition is leaving.  The last node in the `fromPath`\n *        encapsulates the \"from state\".\n * @param {?} targetState The target state and parameters being transitioned to (also, the transition options)\n * @param {?} router The [[UIRouter]] instance\n */\nconstructor(fromPath: PathNode[], targetState: TargetState, router: UIRouter) {\n    this.router = router;\n    this._targetState = targetState;\n\n    if (!targetState.valid()) {\n      throw new Error(targetState.error());\n    }\n\n    // current() is assumed to come from targetState.options, but provide a naive implementation otherwise.\n    this._options = extend({ current: val(this) }, targetState.options());\n    this.$id = router.transitionService._transitionCount++;\n    let toPath = PathUtils.buildToPath(fromPath, targetState);\n    this._treeChanges = PathUtils.treeChanges(fromPath, toPath, this._options.reloadState);\n    this.createTransitionHookRegFns();\n\n    let onCreateHooks = this._hookBuilder.buildHooksForPhase(TransitionHookPhase.CREATE);\n    TransitionHook.invokeHooks(onCreateHooks, () => null);\n\n    this.applyViewConfigs(router);\n  }\n/**\n * @param {?} router\n * @return {?}\n */\nprivate applyViewConfigs(router: UIRouter) {\n    let /** @type {?} */ enteringStates = this._treeChanges.entering.map(node => node.state);\n    PathUtils.applyViewConfigs(router.transitionService.$view, this._treeChanges.to, enteringStates);\n  }\n/**\n * \\@internalapi \n * \n * @return {?} the internal from [State] object\n */\n$from() {\n    return tail(this._treeChanges.from).state;\n  }\n/**\n * \\@internalapi \n * \n * @return {?} the internal to [State] object\n */\n$to() {\n    return tail(this._treeChanges.to).state;\n  }\n/**\n * Returns the \"from state\"\n * \n * Returns the state that the transition is coming *from*.\n * \n * @return {?} The state declaration object for the Transition's (\"from state\").\n */\nfrom(): StateDeclaration {\n    return this.$from().self;\n  }\n/**\n * Returns the \"to state\"\n * \n * Returns the state that the transition is going *to*.\n * \n * @return {?} The state declaration object for the Transition's target state (\"to state\").\n */\nto(): StateDeclaration {\n    return this.$to().self;\n  }\n/**\n * Gets the Target State\n * \n * A transition's [[TargetState]] encapsulates the [[to]] state, the [[params]], and the [[options]] as a single object.\n * \n * @return {?} the [[TargetState]] of this Transition\n */\ntargetState() {\n    return this._targetState;\n  }\n/**\n * Determines whether two transitions are equivalent.\n * @deprecated\n * @param {?} compare\n * @return {?}\n */\nis(compare: (Transition|{to?: any, from?: any})): boolean {\n    if (compare instanceof Transition) {\n      // TODO: Also compare parameters\n      return this.is({ to: compare.$to().name, from: compare.$from().name });\n    }\n    return !(\n      (compare.to && !matchState(this.$to(), compare.to)) ||\n      (compare.from && !matchState(this.$from(), compare.from))\n    );\n  }\n\n  /**\n   * Gets transition parameter values\n   *\n   * Returns the parameter values for a transition as key/value pairs.\n   * This object is immutable.\n   *\n   * By default, returns the new parameter values (for the \"to state\").\n   * To return the previous parameter values,  supply `'from'` as the `pathname` argument.\n   *\n   * @param pathname the name of the treeChanges path to get parameter values for:\n   *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n   *\n   * @returns transition parameter values for the desired path.\n   */\n  params(pathname?: string): any;\n  params<T>(pathname?: string): T;\n/**\n * @param {?=} pathname\n * @return {?}\n */\nparams(pathname: string = \"to\") {\n    return Object.freeze(this._treeChanges[pathname].map(prop(\"paramValues\")).reduce(mergeR, {}));\n  }\n/**\n * Creates a [[UIInjector]] Dependency Injector\n * \n * Returns a Dependency Injector for the Transition's target state (to state).\n * The injector provides resolve values which the target state has access to.\n * \n * The `UIInjector` can also provide values from the native root/global injector (ng1/ng2).\n * \n * #### Example:\n * ```js\n * .onEnter({ entering: 'myState' }, trans => {\n *   var myResolveValue = trans.injector().get('myResolve');\n *   // Inject a global service from the global/native injector (if it exists)\n *   var MyService = trans.injector().get('MyService');\n * })\n * ```\n * \n * In some cases (such as `onBefore`), you may need access to some resolve data but it has not yet been fetched.\n * You can use [[UIInjector.getAsync]] to get a promise for the data.\n * #### Example:\n * ```js\n * .onBefore({}, trans => {\n *   return trans.injector().getAsync('myResolve').then(myResolveValue =>\n *     return myResolveValue !== 'ABORT';\n *   });\n * });\n * ```\n * \n * If a `state` is provided, the injector that is returned will be limited to resolve values that the provided state has access to.\n * This can be useful if both a parent state `foo` and a child state `foo.bar` have both defined a resolve such as `data`.\n * #### Example:\n * ```js\n * .onEnter({ to: 'foo.bar' }, trans => {\n *   // returns result of `foo` state's `data` resolve\n *   // even though `foo.bar` also has a `data` resolve\n *   var fooData = trans.injector('foo').get('data');\n * });\n * ```\n * \n * If you need resolve data from the exiting states, pass `'from'` as `pathName`.\n * The resolve data from the `from` path will be returned.\n * #### Example:\n * ```js\n * .onExit({ exiting: 'foo.bar' }, trans => {\n *   // Gets the resolve value of `data` from the exiting state.\n *   var fooData = trans.injector(null, 'foo.bar').get('data');\n * });\n * ```\n * \n * \n * @param {?=} state Limits the resolves provided to only the resolves the provided state has access to.\n * @param {?=} pathName Default: `'to'`: Chooses the path for which to create the injector. Use this to access resolves for `exiting` states.\n * \n * @return {?} a [[UIInjector]]\n */\ninjector(state?: StateOrName, pathName = \"to\"): UIInjector {\n    let /** @type {?} */ path: PathNode[] = this._treeChanges[pathName];\n    if (state) path = PathUtils.subPath(path, node => node.state === state || node.state.name === state);\n    return new ResolveContext(path).injector();\n  }\n/**\n * Gets all available resolve tokens (keys)\n * \n * This method can be used in conjunction with [[injector]] to inspect the resolve values\n * available to the Transition.\n * \n * This returns all the tokens defined on [[StateDeclaration.resolve]] blocks, for the states\n * in the Transition's [[TreeChanges.to]] path.\n * \n * #### Example:\n * This example logs all resolve values\n * ```js\n * let tokens = trans.getResolveTokens();\n * tokens.forEach(token => console.log(token + \" = \" + trans.injector().get(token)));\n * ```\n * \n * #### Example:\n * This example creates promises for each resolve value.\n * This triggers fetches of resolves (if any have not yet been fetched).\n * When all promises have all settled, it logs the resolve values.\n * ```js\n * let tokens = trans.getResolveTokens();\n * let promise = tokens.map(token => trans.injector().getAsync(token));\n * Promise.all(promises).then(values => console.log(\"Resolved values: \" + values));\n * ```\n * \n * Note: Angular 1 users whould use `$q.all()`\n * \n * @param {?=} pathname resolve context's path name (e.g., `to` or `from`)\n * \n * @return {?} an array of resolve tokens (keys)\n */\ngetResolveTokens(pathname: string = \"to\"): any[] {\n    return new ResolveContext(this._treeChanges[pathname]).getTokens();\n  }\n/**\n * Dynamically adds a new [[Resolvable]] (i.e., [[StateDeclaration.resolve]]) to this transition.\n * \n * #### Example:\n * ```js\n * transitionService.onBefore({}, transition => {\n *   transition.addResolvable({\n *     token: 'myResolve',\n *     deps: ['MyService'],\n *     resolveFn: myService => myService.getData()\n *   });\n * });\n * ```\n * \n * @param {?} resolvable a [[ResolvableLiteral]] object (or a [[Resolvable]])\n * @param {?=} state the state in the \"to path\" which should receive the new resolve (otherwise, the root state)\n * @return {?}\n */\naddResolvable(resolvable: Resolvable|ResolvableLiteral, state: StateOrName = \"\"): void {\n    resolvable = is(Resolvable)(resolvable) ? resolvable : new Resolvable(resolvable);\n\n    let /** @type {?} */ stateName: string = (typeof state === \"string\") ? state : state.name;\n    let /** @type {?} */ topath = this._treeChanges.to;\n    let /** @type {?} */ targetNode = find(topath, node => node.state.name === stateName);\n    let /** @type {?} */ resolveContext: ResolveContext = new ResolveContext(topath);\n    resolveContext.addResolvables([ /** @type {?} */((resolvable as Resolvable))], targetNode.state);\n  }\n/**\n * Gets the transition from which this transition was redirected.\n * \n * If the current transition is a redirect, this method returns the transition that was redirected.\n * \n * #### Example:\n * ```js\n * let transitionA = $state.go('A').transition\n * transitionA.onStart({}, () => $state.target('B'));\n * $transitions.onSuccess({ to: 'B' }, (trans) => {\n *   trans.to().name === 'B'; // true\n *   trans.redirectedFrom() === transitionA; // true\n * });\n * ```\n * \n * @return {?} The previous Transition, or null if this Transition is not the result of a redirection\n */\nredirectedFrom(): Transition {\n    return this._options.redirectedFrom || null;\n  }\n/**\n * Gets the original transition in a redirect chain\n * \n * A transition might belong to a long chain of multiple redirects.\n * This method walks the [[redirectedFrom]] chain back to the original (first) transition in the chain.\n * \n * #### Example:\n * ```js\n * // states\n * registry.register({ name: 'A', redirectTo: 'B' });\n * registry.register({ name: 'B', redirectTo: 'C' });\n * registry.register({ name: 'C', redirectTo: 'D' });\n * registry.register({ name: 'D' });\n * \n * let transitionA = $state.go('A').transition\n * \n * $transitions.onSuccess({ to: 'D' }, (trans) => {\n *   trans.to().name === 'D'; // true\n *   trans.redirectedFrom().to().name === 'C'; // true\n *   trans.originalTransition() === transitionA; // true\n *   trans.originalTransition().to().name === 'A'; // true\n * });\n * ```\n * \n * @return {?} The original Transition that started a redirect chain\n */\noriginalTransition(): Transition {\n    let /** @type {?} */ rf = this.redirectedFrom();\n    return (rf && rf.originalTransition()) || this;\n  }\n/**\n * Get the transition options\n * \n * @return {?} the options for this Transition.\n */\noptions(): TransitionOptions {\n    return this._options;\n  }\n/**\n * Gets the states being entered.\n * \n * @return {?} an array of states that will be entered during this transition.\n */\nentering(): StateDeclaration[] {\n    return map(this._treeChanges.entering, prop('state')).map(stateSelf);\n  }\n/**\n * Gets the states being exited.\n * \n * @return {?} an array of states that will be exited during this transition.\n */\nexiting(): StateDeclaration[] {\n    return map(this._treeChanges.exiting, prop('state')).map(stateSelf).reverse();\n  }\n/**\n * Gets the states being retained.\n * \n * @return {?} an array of states that are already entered from a previous Transition, that will not be\n *    exited during this Transition\n */\nretained(): StateDeclaration[] {\n    return map(this._treeChanges.retained, prop('state')).map(stateSelf);\n  }\n/**\n * Get the [[ViewConfig]]s associated with this Transition\n * \n * Each state can define one or more views (template/controller), which are encapsulated as `ViewConfig` objects.\n * This method fetches the `ViewConfigs` for a given path in the Transition (e.g., \"to\" or \"entering\").\n * \n * @param {?=} pathname the name of the path to fetch views for:\n *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n * @param {?=} state If provided, only returns the `ViewConfig`s for a single state in the path\n * \n * @return {?} a list of ViewConfig objects for the given path.\n */\nviews(pathname: string = \"entering\", state?: StateObject): ViewConfig[] {\n    let /** @type {?} */ path = this._treeChanges[pathname];\n    path = !state ? path : path.filter(propEq('state', state));\n    return path.map(prop(\"views\")).filter(identity).reduce(unnestR, []);\n  }\n\n  /**\n   * Return the transition's tree changes\n   *\n   * A transition goes from one state/parameters to another state/parameters.\n   * During a transition, states are entered and/or exited.\n   *\n   * This function returns various branches (paths) which represent the changes to the\n   * active state tree that are caused by the transition.\n   *\n   * @param pathname The name of the tree changes path to get:\n   *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n   */\n  treeChanges(pathname: string): PathNode[];\n  treeChanges(): TreeChanges;\n/**\n * @param {?=} pathname\n * @return {?}\n */\ntreeChanges(pathname?: string) {\n    return pathname ? this._treeChanges[pathname] : this._treeChanges;\n  }\n/**\n * Creates a new transition that is a redirection of the current one.\n * \n * This transition can be returned from a [[TransitionService]] hook to\n * redirect a transition to a new state and/or set of parameters.\n * \n * \\@internalapi \n * \n * @param {?} targetState\n * @return {?} Returns a new [[Transition]] instance.\n */\nredirect(targetState: TargetState): Transition {\n    let /** @type {?} */ redirects = 1, /** @type {?} */ trans: Transition = this;\n    while ((trans = trans.redirectedFrom()) != null) {\n      if (++redirects > 20) throw new Error(`Too many consecutive Transition redirects (20+)`);\n    }\n\n    let /** @type {?} */ redirectOpts: TransitionOptions = { redirectedFrom: this, source: \"redirect\" };\n    // If the original transition was caused by URL sync, then use { location: 'replace' }\n    // on the new transition (unless the target state explicitly specifies location: false).\n    // This causes the original url to be replaced with the url for the redirect target\n    // so the original url disappears from the browser history.\n    if (this.options().source === 'url' && targetState.options().location !== false) {\n      redirectOpts.location = 'replace';\n    }\n\n    let /** @type {?} */ newOptions = extend({}, this.options(), targetState.options(), redirectOpts);\n\n    targetState = new TargetState(targetState.identifier(), targetState.$state(), targetState.params(), newOptions);\n\n    let /** @type {?} */ newTransition = this.router.transitionService.create(this._treeChanges.from, targetState);\n    let /** @type {?} */ originalEnteringNodes = this._treeChanges.entering;\n    let /** @type {?} */ redirectEnteringNodes = newTransition._treeChanges.entering;\n\n    // --- Re-use resolve data from original transition ---\n    // When redirecting from a parent state to a child state where the parent parameter values haven't changed\n    // (because of the redirect), the resolves fetched by the original transition are still valid in the\n    // redirected transition.\n    //\n    // This allows you to define a redirect on a parent state which depends on an async resolve value.\n    // You can wait for the resolve, then redirect to a child state based on the result.\n    // The redirected transition does not have to re-fetch the resolve.\n    // ---------------------------------------------------------\n\n    const /** @type {?} */ nodeIsReloading = (reloadState: StateObject) => (node: PathNode) => {\n      return reloadState && node.state.includes[reloadState.name];\n    };\n\n    // Find any \"entering\" nodes in the redirect path that match the original path and aren't being reloaded\n    let /** @type {?} */ matchingEnteringNodes: PathNode[] = PathUtils.matching(redirectEnteringNodes, originalEnteringNodes, PathUtils.nonDynamicParams)\n        .filter(not(nodeIsReloading(targetState.options().reloadState)));\n\n    // Use the existing (possibly pre-resolved) resolvables for the matching entering nodes.\n    matchingEnteringNodes.forEach((node, idx) => {\n      node.resolvables = originalEnteringNodes[idx].resolvables;\n    });\n\n    return newTransition;\n  }\n/**\n * @hidden If a transition doesn't exit/enter any states, returns any [[Param]] whose value changed\n * @return {?}\n */\nprivate _changedParams(): Param[] {\n    let /** @type {?} */ tc = this._treeChanges;\n\n    /** Return undefined if it's not a \"dynamic\" transition, for the following reasons */\n    // If user explicitly wants a reload\n    if (this._options.reload) return undefined;\n    // If any states are exiting or entering\n    if (tc.exiting.length || tc.entering.length) return undefined;\n    // If to/from path lengths differ\n    if (tc.to.length !== tc.from.length) return undefined;\n    // If the to/from paths are different\n    let /** @type {?} */ pathsDiffer: boolean = arrayTuples(tc.to, tc.from)\n        .map(tuple => tuple[0].state !== tuple[1].state)\n        .reduce(anyTrueR, false);\n    if (pathsDiffer) return undefined;\n\n    // Find any parameter values that differ\n    let /** @type {?} */ nodeSchemas: Param[][] = tc.to.map((node: PathNode) => node.paramSchema);\n    let [toValues, fromValues] = [tc.to, tc.from].map(path => path.map(x => x.paramValues));\n    let /** @type {?} */ tuples = arrayTuples(nodeSchemas, toValues, fromValues);\n\n    return tuples.map(([schema, toVals, fromVals]) => Param.changed(schema, toVals, fromVals)).reduce(unnestR, []);\n  }\n/**\n * Returns true if the transition is dynamic.\n * \n * A transition is dynamic if no states are entered nor exited, but at least one dynamic parameter has changed.\n * \n * @return {?} true if the Transition is dynamic\n */\ndynamic(): boolean {\n    let /** @type {?} */ changes = this._changedParams();\n    return !changes ? false : changes.map(x => x.dynamic).reduce(anyTrueR, false);\n  }\n/**\n * Returns true if the transition is ignored.\n * \n * A transition is ignored if no states are entered nor exited, and no parameter values have changed.\n * \n * @return {?} true if the Transition is ignored.\n */\nignored(): boolean {\n    return !!this._ignoredReason();\n  }\n/**\n * @hidden\n * @return {?}\n */\n_ignoredReason(): \"SameAsCurrent\"|\"SameAsPending\"|undefined {\n    const /** @type {?} */ pending = this.router.globals.transition;\n    const /** @type {?} */ reloadState = this._options.reloadState;\n\n    const /** @type {?} */ same = (pathA, pathB) => {\n      if (pathA.length !== pathB.length) return false;\n      const /** @type {?} */ matching = PathUtils.matching(pathA, pathB);\n      return pathA.length === matching.filter(node => !reloadState || !node.state.includes[reloadState.name]).length;\n    };\n\n    let /** @type {?} */ newTC = this.treeChanges();\n    let /** @type {?} */ pendTC = pending && pending.treeChanges();\n\n    if (pendTC && same(pendTC.to, newTC.to) && same(pendTC.exiting, newTC.exiting)) return \"SameAsPending\";\n    if (newTC.exiting.length === 0 && newTC.entering.length === 0 && same(newTC.from, newTC.to)) return \"SameAsCurrent\";\n  }\n/**\n * Runs the transition\n * \n * This method is generally called from the [[StateService.transitionTo]]\n * \n * \\@internalapi \n * \n * @return {?} a promise for a successful transition.\n */\nrun(): Promise<any> {\n    let /** @type {?} */ runAllHooks = TransitionHook.runAllHooks;\n\n    // Gets transition hooks array for the given phase\n    const /** @type {?} */ getHooksFor = (phase: TransitionHookPhase) =>\n        this._hookBuilder.buildHooksForPhase(phase);\n\n    // When the chain is complete, then resolve or reject the deferred\n    const /** @type {?} */ transitionSuccess = () => {\n      trace.traceSuccess(this.$to(), this);\n      this.success = true;\n      this._deferred.resolve(this.to());\n      runAllHooks(getHooksFor(TransitionHookPhase.SUCCESS));\n    };\n\n    const /** @type {?} */ transitionError = (reason: any) => {\n      trace.traceError(reason, this);\n      this.success = false;\n      this._deferred.reject(reason);\n      this._error = reason;\n      runAllHooks(getHooksFor(TransitionHookPhase.ERROR));\n    };\n\n    const /** @type {?} */ runTransition = () => {\n      // Wait to build the RUN hook chain until the BEFORE hooks are done\n      // This allows a BEFORE hook to dynamically add additional RUN hooks via the Transition object.\n      let /** @type {?} */ allRunHooks = getHooksFor(TransitionHookPhase.RUN);\n      let /** @type {?} */ done = () => services.$q.when(undefined);\n      return TransitionHook.invokeHooks(allRunHooks, done);\n    };\n\n    const /** @type {?} */ startTransition = () => {\n      let /** @type {?} */ globals = this.router.globals;\n\n      globals.lastStartedTransitionId = this.$id;\n      globals.transition = this;\n      globals.transitionHistory.enqueue(this);\n\n      trace.traceTransitionStart(this);\n\n      return services.$q.when(undefined);\n    };\n\n    let /** @type {?} */ allBeforeHooks = getHooksFor(TransitionHookPhase.BEFORE);\n    TransitionHook.invokeHooks(allBeforeHooks, startTransition)\n        .then(runTransition)\n        .then(transitionSuccess, transitionError);\n\n    return this.promise;\n  }\n/**\n * Checks if this transition is currently active/running.\n */\nisActive = () =>\n      this.router.globals.transition === this;\n/**\n * Checks if the Transition is valid\n * \n * @return {?} true if the Transition is valid\n */\nvalid() {\n    return !this.error() || this.success !== undefined;\n  }\n/**\n * Aborts this transition\n * \n * Imperative API to abort a Transition.\n * This only applies to Transitions that are not yet complete.\n * @return {?}\n */\nabort() {\n    // Do not set flag if the transition is already complete\n    if (isUndefined(this.success))  {\n      this._aborted = true;\n    }\n  }\n/**\n * The Transition error reason.\n * \n * If the transition is invalid (and could not be run), returns the reason the transition is invalid.\n * If the transition was valid and ran, but was not successful, returns the reason the transition failed.\n * \n * @return {?} an error message explaining why the transition is invalid, or the reason the transition failed.\n */\nerror() {\n    let /** @type {?} */ state: StateObject = this.$to();\n\n    if (state.self.abstract)\n      return `Cannot transition to abstract state '${state.name}'`;\n\n    const /** @type {?} */ paramDefs = state.parameters(), /** @type {?} */ values = this.params();\n    const /** @type {?} */ invalidParams = paramDefs.filter(param => !param.validates(values[param.id]));\n    if (invalidParams.length) {\n      return `Param values not valid for state '${state.name}'. Invalid params: [ ${invalidParams.map(param => param.id).join(', ')} ]`;\n    }\n\n    if (this.success === false)\n      return this._error;\n  }\n/**\n * A string representation of the Transition\n * \n * @return {?} A string representation of the Transition\n */\ntoString () {\n    let /** @type {?} */ fromStateOrName = this.from();\n    let /** @type {?} */ toStateOrName = this.to();\n\n    const /** @type {?} */ avoidEmptyHash = (params: RawParams) =>\n      (params[\"#\"] !== null && params[\"#\"] !== undefined) ? params : omit(params, [\"#\"]);\n\n    // (X) means the to state is invalid.\n    let /** @type {?} */ id = this.$id, /** @type {?} */\n        from = isObject(fromStateOrName) ? fromStateOrName.name : fromStateOrName, /** @type {?} */\n        fromParams = toJson(avoidEmptyHash(this._treeChanges.from.map(prop('paramValues')).reduce(mergeR, {}))), /** @type {?} */\n        toValid = this.valid() ? \"\" : \"(X) \", /** @type {?} */\n        to = isObject(toStateOrName) ? toStateOrName.name : toStateOrName, /** @type {?} */\n        toParams = toJson(avoidEmptyHash(this.params()));\n\n    return `Transition#${id}( '${from}'${fromParams} -> ${toValid}'${to}'${toParams} )`;\n  }\n}\n\nfunction Transition_tsickle_Closure_declarations() {\n/**\n * @hidden\n * @type {?}\n */\nTransition.diToken;\n/**\n * A unique identifier for the transition.\n * \n * This is an auto incrementing integer, starting from `0`.\n * @type {?}\n */\nTransition.prototype.$id;\n/**\n * A reference to the [[UIRouter]] instance\n * \n * This reference can be used to access the router services, such as the [[StateService]]\n * @type {?}\n */\nTransition.prototype.router;\n/**\n * @hidden\n * @type {?}\n */\nTransition.prototype._deferred;\n/**\n * This promise is resolved or rejected based on the outcome of the Transition.\n * \n * When the transition is successful, the promise is resolved\n * When the transition is unsuccessful, the promise is rejected with the [[Rejection]] or javascript error\n * @type {?}\n */\nTransition.prototype.promise;\n/**\n * A boolean which indicates if the transition was successful\n * \n * After a successful transition, this value is set to true.\n * After an unsuccessful transition, this value is set to false.\n * \n * The value will be undefined if the transition is not complete\n * @type {?}\n */\nTransition.prototype.success;\n/**\n * @hidden\n * @type {?}\n */\nTransition.prototype._aborted;\n/**\n * @hidden\n * @type {?}\n */\nTransition.prototype._error;\n/**\n * @hidden Holds the hook registration functions such as those passed to Transition.onStart()\n * @type {?}\n */\nTransition.prototype._registeredHooks;\n/**\n * @hidden\n * @type {?}\n */\nTransition.prototype._options;\n/**\n * @hidden\n * @type {?}\n */\nTransition.prototype._treeChanges;\n/**\n * @hidden\n * @type {?}\n */\nTransition.prototype._targetState;\n/**\n * @hidden\n * @type {?}\n */\nTransition.prototype._hookBuilder;\n/**\n * Checks if this transition is currently active/running.\n * @type {?}\n */\nTransition.prototype.isActive;\n}\n\n","/** @module resolve */\n/** for typedoc */\n\nimport { find, tail, uniqR, unnestR, inArray } from '../common/common';\nimport { propEq, not } from '../common/hof';\nimport { trace } from '../common/trace';\nimport { services, $InjectorLike } from '../common/coreservices';\nimport { resolvePolicies, PolicyWhen, ResolvePolicy } from './interface';\nimport { PathNode } from '../path/pathNode';\nimport { Resolvable } from './resolvable';\nimport { StateObject } from '../state/stateObject';\nimport { PathUtils } from '../path/pathFactory';\nimport { stringify } from '../common/strings';\nimport { Transition } from '../transition/transition';\nimport { UIInjector } from '../interface';\n\nconst /** @type {?} */ when = resolvePolicies.when;\nconst /** @type {?} */ ALL_WHENS = [when.EAGER, when.LAZY];\nconst /** @type {?} */ EAGER_WHENS = [when.EAGER];\n\nexport const /** @type {?} */ NATIVE_INJECTOR_TOKEN: string = \"Native Injector\";\n/**\n * Encapsulates Dependency Injection for a path of nodes\n * \n * UI-Router states are organized as a tree.\n * A nested state has a path of ancestors to the root of the tree.\n * When a state is being activated, each element in the path is wrapped as a [[PathNode]].\n * A `PathNode` is a stateful object that holds things like parameters and resolvables for the state being activated.\n * \n * The ResolveContext closes over the [[PathNode]]s, and provides DI for the last node in the path.\n */\nexport class ResolveContext {\n  _injector: UIInjector;\n/**\n * @param {?} _path\n */\nconstructor(private _path: PathNode[]) { }\n/**\n * Gets all the tokens found in the resolve context, de-duplicated\n * @return {?}\n */\ngetTokens(): any[] {\n    return this._path.reduce((acc, node) => acc.concat(node.resolvables.map(r => r.token)), []).reduce(uniqR, []);\n  }\n/**\n * Gets the Resolvable that matches the token\n * \n * Gets the last Resolvable that matches the token in this context, or undefined.\n * Throws an error if it doesn't exist in the ResolveContext\n * @param {?} token\n * @return {?}\n */\ngetResolvable(token: any): Resolvable {\n    let /** @type {?} */ matching = this._path.map(node => node.resolvables)\n        .reduce(unnestR, [])\n        .filter((r: Resolvable) => r.token === token);\n    return tail(matching);\n  }\n/**\n * Returns the [[ResolvePolicy]] for the given [[Resolvable]]\n * @param {?} resolvable\n * @return {?}\n */\ngetPolicy(resolvable: Resolvable): ResolvePolicy {\n    let /** @type {?} */ node = this.findNode(resolvable);\n    return resolvable.getPolicy(node.state);\n  }\n/**\n * Returns a ResolveContext that includes a portion of this one\n * \n * Given a state, this method creates a new ResolveContext from this one.\n * The new context starts at the first node (root) and stops at the node for the `state` parameter.\n * \n * #### Why\n * \n * When a transition is created, the nodes in the \"To Path\" are injected from a ResolveContext.\n * A ResolveContext closes over a path of [[PathNode]]s and processes the resolvables.\n * The \"To State\" can inject values from its own resolvables, as well as those from all its ancestor state's (node's).\n * This method is used to create a narrower context when injecting ancestor nodes.\n * \n * \\@example \n * `let ABCD = new ResolveContext([A, B, C, D]);`\n * \n * Given a path `[A, B, C, D]`, where `A`, `B`, `C` and `D` are nodes for states `a`, `b`, `c`, `d`:\n * When injecting `D`, `D` should have access to all resolvables from `A`, `B`, `C`, `D`.\n * However, `B` should only be able to access resolvables from `A`, `B`.\n * \n * When resolving for the `B` node, first take the full \"To Path\" Context `[A,B,C,D]` and limit to the subpath `[A,B]`.\n * `let AB = ABCD.subcontext(a)`\n * @param {?} state\n * @return {?}\n */\nsubContext(state: StateObject): ResolveContext {\n    return new ResolveContext(PathUtils.subPath(this._path, node => node.state === state));\n  }\n/**\n * Adds Resolvables to the node that matches the state\n * \n * This adds a [[Resolvable]] (generally one created on the fly; not declared on a [[StateDeclaration.resolve]] block).\n * The resolvable is added to the node matching the `state` parameter.\n * \n * These new resolvables are not automatically fetched.\n * The calling code should either fetch them, fetch something that depends on them,\n * or rely on [[resolvePath]] being called when some state is being entered.\n * \n * Note: each resolvable's [[ResolvePolicy]] is merged with the state's policy, and the global default.\n * \n * @param {?} newResolvables the new Resolvables\n * @param {?} state Used to find the node to put the resolvable on\n * @return {?}\n */\naddResolvables(newResolvables: Resolvable[], state: StateObject) {\n    let /** @type {?} */ node = /** @type {?} */(( <PathNode> find(this._path, propEq('state', state))));\n    let /** @type {?} */ keys = newResolvables.map(r => r.token);\n    node.resolvables = node.resolvables.filter(r => keys.indexOf(r.token) === -1).concat(newResolvables);\n  }\n/**\n * Returns a promise for an array of resolved path Element promises\n * \n * @param {?=} when\n * @param {?=} trans\n * @return {?}\n */\nresolvePath(when: PolicyWhen = \"LAZY\", trans?: Transition): Promise<{ token: any, value: any }[]> {\n    // This option determines which 'when' policy Resolvables we are about to fetch.\n    let /** @type {?} */ whenOption: string = inArray(ALL_WHENS, when) ? when : \"LAZY\";\n    // If the caller specified EAGER, only the EAGER Resolvables are fetched.\n    // if the caller specified LAZY, both EAGER and LAZY Resolvables are fetched.`\n    let /** @type {?} */ matchedWhens = whenOption === resolvePolicies.when.EAGER ? EAGER_WHENS : ALL_WHENS;\n    \n    // get the subpath to the state argument, if provided\n    trace.traceResolvePath(this._path, when, trans);\n\n    const /** @type {?} */ matchesPolicy = (acceptedVals: string[], whenOrAsync: \"when\"|\"async\") =>\n        (resolvable: Resolvable) =>\n            inArray(acceptedVals, this.getPolicy(resolvable)[whenOrAsync]);\n\n    // Trigger all the (matching) Resolvables in the path\n    // Reduce all the \"WAIT\" Resolvables into an array\n    let /** @type {?} */ promises: Promise<any>[] = this._path.reduce((acc, node) => {\n      let /** @type {?} */ nodeResolvables = node.resolvables.filter(matchesPolicy(matchedWhens, 'when'));\n      let /** @type {?} */ nowait = nodeResolvables.filter(matchesPolicy(['NOWAIT'], 'async'));\n      let /** @type {?} */ wait = nodeResolvables.filter(not(matchesPolicy(['NOWAIT'], 'async')));\n\n      // For the matching Resolvables, start their async fetch process.\n      let /** @type {?} */ subContext = this.subContext(node.state);\n      let /** @type {?} */ getResult = (r: Resolvable) => r.get(subContext, trans)\n          // Return a tuple that includes the Resolvable's token\n          .then(value => ({ token: r.token, value: value }));\n      nowait.forEach(getResult);\n      return acc.concat(wait.map(getResult));\n    }, []);\n\n    // Wait for all the \"WAIT\" resolvables\n    return services.$q.all(promises);\n  }\n/**\n * @return {?}\n */\ninjector(): UIInjector {\n    return this._injector || (this._injector = new UIInjectorImpl(this));\n  }\n/**\n * @param {?} resolvable\n * @return {?}\n */\nfindNode(resolvable: Resolvable): PathNode {\n    return find(this._path, (node: PathNode) => inArray(node.resolvables, resolvable));\n  }\n/**\n * Gets the async dependencies of a Resolvable\n * \n * Given a Resolvable, returns its dependencies as a Resolvable[]\n * @param {?} resolvable\n * @return {?}\n */\ngetDependencies(resolvable: Resolvable): Resolvable[] {\n    let /** @type {?} */ node = this.findNode(resolvable);\n    // Find which other resolvables are \"visible\" to the `resolvable` argument\n    // subpath stopping at resolvable's node, or the whole path (if the resolvable isn't in the path)\n    let /** @type {?} */ subPath: PathNode[] = PathUtils.subPath(this._path, x => x === node) || this._path;\n    let /** @type {?} */ availableResolvables: Resolvable[] = subPath\n        .reduce((acc, node) => acc.concat(node.resolvables), []) //all of subpath's resolvables\n        .filter(res => res !== resolvable); // filter out the `resolvable` argument\n\n    const /** @type {?} */ getDependency = (token: any) => {\n      let /** @type {?} */ matching = availableResolvables.filter(r => r.token === token);\n      if (matching.length) return tail(matching);\n\n      let /** @type {?} */ fromInjector = this.injector().getNative(token);\n      if (!fromInjector) {\n        throw new Error(\"Could not find Dependency Injection token: \" + stringify(token));\n      }\n\n      return new Resolvable(token, () => fromInjector, [], fromInjector);\n    };\n\n    return resolvable.deps.map(getDependency);\n  }\n}\n\nfunction ResolveContext_tsickle_Closure_declarations() {\n/** @type {?} */\nResolveContext.prototype._injector;\n/** @type {?} */\nResolveContext.prototype._path;\n}\n\nclass UIInjectorImpl implements UIInjector {\n  native: $InjectorLike;\n/**\n * @param {?} context\n */\nconstructor(public context: ResolveContext) {\n    this.native = this.get(NATIVE_INJECTOR_TOKEN) || services.$injector;\n  }\n/**\n * @param {?} token\n * @return {?}\n */\nget(token: any) {\n    let /** @type {?} */ resolvable = this.context.getResolvable(token);\n    if (resolvable) {\n      if (this.context.getPolicy(resolvable).async === 'NOWAIT') {\n        return resolvable.get(this.context);\n      }\n\n      if (!resolvable.resolved) {\n        throw new Error(\"Resolvable async .get() not complete:\" + stringify(resolvable.token))\n      }\n      return resolvable.data;\n    }\n    return this.native && this.native.get(token);\n  }\n/**\n * @param {?} token\n * @return {?}\n */\ngetAsync(token: any) {\n    let /** @type {?} */ resolvable = this.context.getResolvable(token);\n    if (resolvable) return resolvable.get(this.context);\n    return services.$q.when(this.native.get(token));\n  }\n/**\n * @param {?} token\n * @return {?}\n */\ngetNative(token: any) {\n    return this.native && this.native.get(token);\n  }\n}\n\nfunction UIInjectorImpl_tsickle_Closure_declarations() {\n/** @type {?} */\nUIInjectorImpl.prototype.native;\n/** @type {?} */\nUIInjectorImpl.prototype.context;\n}\n","/**\n * # The Resolve subsystem\n *\n * This subsystem is an asynchronous, hierarchical Dependency Injection system.\n *\n * Typically, resolve is configured on a state using a [[StateDeclaration.resolve]] declaration.\n *\n * @coreapi\n * @module resolve\n */ /** for typedoc */\n\nimport {Resolvable} from './resolvable';\n\n/**\n * An interface which is similar to an Angular 2 `Provider`\n */\nexport interface ProviderLike {\n  provide: any,\n  useClass?: any,\n  useFactory?: Function,\n  useValue?: any,\n  useExisting?: any,\n  deps?: any[]\n}\n\n/**\n * A plain object used to describe a [[Resolvable]]\n *\n * These objects may be used in the [[StateDeclaration.resolve]] array to declare\n * async data that the state or substates require.\n *\n * #### Example:\n * ```js\n *\n * var state = {\n *   name: 'main',\n *   resolve: [\n *     { token: 'myData', deps: [MyDataApi], resolveFn: (myDataApi) => myDataApi.getData() },\n *   ],\n * }\n * ```\n */\nexport interface ResolvableLiteral {\n  /**\n   * A Dependency Injection token\n   *\n   * This Resolvable's DI token.\n   * The Resolvable will be injectable elsewhere using the token.\n   */\n  token: any;\n\n  /**\n   * A function which fetches the Resolvable's data\n   *\n   * A function which returns one of:\n   *\n   * - The resolved value (synchronously)\n   * - A promise for the resolved value\n   * - An Observable of the resolved value(s)\n   *\n   * This function will be provided the dependencies listed in [[deps]] as its arguments.\n   * The resolve system will asynchronously fetch the dependencies before invoking this function.\n   */\n  resolveFn: Function;\n\n  /**\n   * Defines the Resolve Policy\n   *\n   * A policy that defines when to invoke the resolve,\n   * and whether to wait for async and unwrap the data\n   */\n  policy?: ResolvePolicy;\n\n  /**\n   * The Dependency Injection tokens\n   *\n   * This is an array of Dependency Injection tokens for the dependencies of the [[resolveFn]].\n   *\n   * The DI tokens are references to other `Resolvables`, or to other\n   * services from the native DI system.\n   */\n  deps?: any[];\n\n  /** Pre-resolved data. */\n  data?: any\n}\n\n/**\n * Defines how a resolve is processed during a transition\n *\n * This object is the [[StateDeclaration.resolvePolicy]] property.\n *\n * #### Example:\n * ```js\n * // Fetched when the resolve's state is being entered.\n * // Wait for the promise to resolve.\n * var policy1 = { when: \"LAZY\", async: \"WAIT\" }\n *\n * // Fetched when the Transition is starting.\n * // Do not wait for the returned promise to resolve.\n * // Inject the raw promise/value\n * var policy2 = { when: \"EAGER\", async: \"NOWAIT\" }\n * ```\n *\n * The policy for a given Resolvable is merged from three sources (highest priority first):\n *\n * - 1) Individual resolve definition\n * - 2) State definition\n * - 3) Global default\n *\n * #### Example:\n * ```js\n * // Wait for an Observable to emit one item.\n * // Since `wait` is not specified, it uses the `wait`\n * // policy defined on the state, or the global default\n * // if no `wait` policy is defined on the state\n * var myResolvablePolicy = { async: \"RXWAIT\" }\n * ```\n */\nexport interface ResolvePolicy {\n  /**\n   * Defines when a Resolvable is resolved (fetched) during a transition\n   *\n   * - `LAZY` (default)\n   *   - Resolved as the resolve's state is being entered\n   * - `EAGER`\n   *   - Resolved as the transition is starting\n   *\n   * #### Example:\n   * Resolves for `main` and `main.home` are fetched when each state is entered.\n   * All of `main` resolves are processed before fetching `main.home` resolves.\n   * ```js\n   * var state = {\n   *   name: 'main',\n   *   resolve: mainResolves, // defined elsewhere\n   *   resolvePolicy: { when: 'LAZY' }, // default\n   * }\n   *\n   * var state = {\n   *   name: 'main.home',\n   *   resolve: homeResolves, // defined elsewhere\n   *   resolvePolicy: { when: 'LAZY' }, // default\n   * }\n   * ```\n   *\n   * #### Example:\n   * Resolves for `main` and `main.home` are fetched at the same time when the transition starts.\n   * This happens earlier in the lifecycle than when states are entered.\n   * All of the `main` and `main.home` resolves are fetched as soon as possible.\n   * ```js\n   * var mainState = {\n   *   name: 'main',\n   *   resolve: mainResolves, // defined elsewhere\n   *   resolvePolicy: { when: 'EAGER' },\n   * }\n   *\n   * var homeState = {\n   *   name: 'main.home',\n   *   resolve: homeResolves, // defined elsewhere\n   *   resolvePolicy: { when: 'EAGER' },\n   * }\n   * ```\n   */\n  when?: PolicyWhen;\n\n  /**\n   * Determines the unwrapping behavior of asynchronous resolve values.\n   *\n   * - `WAIT` (default)\n   *   - If a promise is returned from the resolveFn, wait for the promise before proceeding\n   *   - The unwrapped value from the promise\n   * - `NOWAIT`\n   *   - If a promise is returned from the resolve, do not wait for the promise.\n   *   - Any other value returned is wrapped in a promise.\n   *   - The promise will not be unwrapped.\n   *   - The promise itself will be provided when the resolve is injected or bound elsewhere.\n   * - `RXWAIT`\n   *   - When an Observable is returned from the resolveFn, wait until the Observable emits at least one item.\n   *   - The Observable item will not be unwrapped.\n   *   - The Observable stream itself will be provided when the resolve is injected or bound elsewhere.\n   *\n   * #### Example:\n   * The `Transition` will not wait for the resolve promise(s) from `main` to settle before continuing.\n   * Resolves for `main` will be provided to components wrapped in a `Promise`.\n   *\n   * The `Transition` will wait for the `main.home` resolve promises.\n   * Resolved values will be unwrapped before being provided to components.\n   * ```js\n   * var mainState = {\n   *   name: 'main',\n   *   resolve: mainResolves, // defined elsewhere\n   *   resolvePolicy: { async: 'NOWAIT' },\n   * }\n   * var homeState = {\n   *   name: 'main.home',\n   *   resolve: homeResolves, // defined elsewhere\n   *   resolvePolicy: { async: 'WAIT' }, // default\n   * }\n   * ```\n   */\n  async?: PolicyAsync;\n}\n\nexport type PolicyWhen = \"LAZY\" | \"EAGER\" ;\nexport type PolicyAsync = \"WAIT\" | \"NOWAIT\" | \"RXWAIT\" ;\n/**\n * \\@internalapi\n */\nexport let resolvePolicies = {\n  when: {\n    LAZY: \"LAZY\",\n    EAGER: \"EAGER\"\n  },\n  async: {\n    WAIT: \"WAIT\",\n    NOWAIT: \"NOWAIT\",\n    RXWAIT: \"RXWAIT\"\n  }\n};\n","/**\n * @coreapi\n * @module resolve\n */ /** for typedoc */\n\nimport {extend, equals, inArray, identity} from '../common/common';\nimport {services} from '../common/coreservices';\nimport {trace} from '../common/trace';\nimport {ResolvePolicy, ResolvableLiteral, resolvePolicies} from './interface';\n\nimport {ResolveContext} from './resolveContext';\nimport {stringify} from '../common/strings';\nimport {isFunction, isObject} from '../common/predicates';\nimport {Transition} from '../transition/transition';\nimport {StateObject} from '../state/stateObject';\nimport {PathNode} from '../path/pathNode';\n\n\n// TODO: explicitly make this user configurable\nexport let /** @type {?} */ defaultResolvePolicy: ResolvePolicy = {\n  when: \"LAZY\",\n  async: \"WAIT\"\n};\n/**\n * The basic building block for the resolve system.\n * \n * Resolvables encapsulate a state's resolve's resolveFn, the resolveFn's declared dependencies, the wrapped (.promise),\n * and the unwrapped-when-complete (.data) result of the resolveFn.\n * \n * Resolvable.get() either retrieves the Resolvable's existing promise, or else invokes resolve() (which invokes the\n * resolveFn) and returns the resulting promise.\n * \n * Resolvable.get() and Resolvable.resolve() both execute within a context path, which is passed as the first\n * parameter to those fns.\n */\nexport class Resolvable implements ResolvableLiteral {\n  token: any;\n  policy: ResolvePolicy;\n  resolveFn: Function;\n  deps: any[];\n\n  data: any;\n  resolved: boolean = false;\n  promise: Promise<any> = undefined;\n/**\n * This constructor creates a Resolvable copy\n * @param {?} resolvable\n */\nconstructor(resolvable: Resolvable)\n/**\n * This constructor creates a new Resolvable from the plain old [[ResolvableLiteral]] javascript object\n * @param {?} resolvable\n */\nconstructor(resolvable: ResolvableLiteral)\n/**\n * This constructor creates a new `Resolvable`\n * \n * #### Example:\n * ```js\n * var resolvable1 = new Resolvable('mytoken', http => http.get('foo.json').toPromise(), [Http]);\n * \n * var resolvable2 = new Resolvable(UserService, dep => new UserService(dep.data), [SomeDependency]);\n * \n * var resolvable1Clone = new Resolvable(resolvable1);\n * ```\n * \n * @param {?} token The new resolvable's injection token, such as `\"userList\"` (a string) or `UserService` (a class).\n *              When this token is used during injection, the resolved value will be injected.\n * @param {?} resolveFn The function that returns the resolved value, or a promise for the resolved value\n * @param {?=} deps An array of dependencies, which will be injected into the `resolveFn`\n * @param {?=} policy the [[ResolvePolicy]] defines when and how the Resolvable is processed\n * @param {?=} data Pre-resolved data. If the resolve value is already known, it may be provided here.\n */\nconstructor(token: any, resolveFn: Function, deps?: any[], policy?: ResolvePolicy, data?: any)\n/**\n * @param {?} arg1\n * @param {?=} resolveFn\n * @param {?=} deps\n * @param {?=} policy\n * @param {?=} data\n */\nconstructor(arg1: any, resolveFn?: Function, deps?: any[], policy?: ResolvePolicy, data?: any) {\n    if (arg1 instanceof Resolvable) {\n      extend(this, arg1);\n    } else if (isFunction(resolveFn)) {\n      if (arg1 == null || arg1 == undefined) throw new Error(\"new Resolvable(): token argument is required\");\n      if (!isFunction(resolveFn)) throw new Error(\"new Resolvable(): resolveFn argument must be a function\");\n\n      this.token = arg1;\n      this.policy = policy;\n      this.resolveFn = resolveFn;\n      this.deps = deps || [];\n\n      this.data = data;\n      this.resolved = data !== undefined;\n      this.promise = this.resolved ? services.$q.when(this.data) : undefined;\n    } else if (isObject(arg1) && arg1.token && isFunction(arg1.resolveFn)) {\n      let literal = <ResolvableLiteral> arg1;\n      return new Resolvable(literal.token, literal.resolveFn, literal.deps, literal.policy, literal.data);\n    }\n  }\n/**\n * @param {?} state\n * @return {?}\n */\ngetPolicy(state:StateObject): ResolvePolicy {\n    let /** @type {?} */ thisPolicy = this.policy || {};\n    let /** @type {?} */ statePolicy = state && state.resolvePolicy || {};\n    return {\n      when: thisPolicy.when || statePolicy.when || defaultResolvePolicy.when,\n      async: thisPolicy.async || statePolicy.async || defaultResolvePolicy.async,\n    }\n  }\n/**\n * Asynchronously resolve this Resolvable's data\n * \n * Given a ResolveContext that this Resolvable is found in:\n * Wait for this Resolvable's dependencies, then invoke this Resolvable's function\n * and update the Resolvable's state\n * @param {?} resolveContext\n * @param {?=} trans\n * @return {?}\n */\nresolve(resolveContext: ResolveContext, trans?: Transition) {\n    let /** @type {?} */ $q = services.$q;\n\n    // Gets all dependencies from ResolveContext and wait for them to be resolved\n    const /** @type {?} */ getResolvableDependencies = () => /** @type {?} */((\n        $q.all(resolveContext.getDependencies(this).map(resolvable =>\n            resolvable.get(resolveContext, trans))) as Promise<any[]>));\n\n    // Invokes the resolve function passing the resolved dependencies as arguments\n    const /** @type {?} */ invokeResolveFn = (resolvedDeps: any[]) =>\n        this.resolveFn.apply(null, resolvedDeps);\n/**\n * For RXWAIT policy:\n * \n * Given an observable returned from a resolve function:\n * - enables .cache() mode (this allows multicast subscribers)\n * - then calls toPromise() (this triggers subscribe() and thus fetches)\n * - Waits for the promise, then return the cached observable (not the first emitted value).\n */\nconst waitForRx = (observable$: any) => {\n      let cached = observable$.cache(1);\n      return cached.take(1).toPromise().then(() => cached);\n    };\n\n    // If the resolve policy is RXWAIT, wait for the observable to emit something. otherwise pass through.\n    let /** @type {?} */ node: PathNode = resolveContext.findNode(this);\n    let /** @type {?} */ state: StateObject = node && node.state;\n    let /** @type {?} */ maybeWaitForRx = this.getPolicy(state).async === \"RXWAIT\" ? waitForRx : identity;\n\n    // After the final value has been resolved, update the state of the Resolvable\n    const /** @type {?} */ applyResolvedValue = (resolvedValue: any) => {\n      this.data = resolvedValue;\n      this.resolved = true;\n      trace.traceResolvableResolved(this, trans);\n      return this.data;\n    };\n\n    // Sets the promise property first, then getsResolvableDependencies in the context of the promise chain. Always waits one tick.\n    return this.promise = $q.when()\n        .then(getResolvableDependencies)\n        .then(invokeResolveFn)\n        .then(maybeWaitForRx)\n        .then(applyResolvedValue);\n  }\n/**\n * Gets a promise for this Resolvable's data.\n * \n * Fetches the data and returns a promise.\n * Returns the existing promise if it has already been fetched once.\n * @param {?} resolveContext\n * @param {?=} trans\n * @return {?}\n */\nget(resolveContext: ResolveContext, trans?: Transition): Promise<any> {\n    return this.promise || this.resolve(resolveContext, trans);\n  }\n/**\n * Gets the result of the resolvable.\n * \n * The return value depends on `policy.async`:\n * \n * * `WAIT`: Returns the resolved value of the promise, or undefined if it has not yet resolved\n * * `NOWAIT`: Returns the promise for the result\n * @return {?}\n */\nresult() {\n    return this.policy.async === 'NOWAIT' ? this.promise : this.data;\n  }\n/**\n * @return {?}\n */\ntoString() {\n    return `Resolvable(token: ${stringify(this.token)}, requires: [${this.deps.map(stringify)}])`;\n  }\n/**\n * @return {?}\n */\nclone(): Resolvable {\n    return new Resolvable(this);\n  }\n  \n  static fromData = (token: any, data: any) =>  \n      new Resolvable(token, () => data, null, null, data);\n}\n\nfunction Resolvable_tsickle_Closure_declarations() {\n/** @type {?} */\nResolvable.fromData;\n/** @type {?} */\nResolvable.prototype.token;\n/** @type {?} */\nResolvable.prototype.policy;\n/** @type {?} */\nResolvable.prototype.resolveFn;\n/** @type {?} */\nResolvable.prototype.deps;\n/** @type {?} */\nResolvable.prototype.data;\n/** @type {?} */\nResolvable.prototype.resolved;\n/** @type {?} */\nResolvable.prototype.promise;\n}\n\n","/** @module path */ /** for typedoc */\n\n\nimport {\n  extend, find, pick, omit, tail, mergeR, values, unnestR, Predicate, inArray, arrayTuples,\n} from '../common/common';\nimport {prop, propEq, not} from '../common/hof';\n\nimport {RawParams} from '../params/interface';\nimport {TreeChanges} from '../transition/interface';\nimport {ViewConfig} from '../view/interface';\nimport {_ViewDeclaration} from '../state/interface';\n\nimport {StateObject} from '../state/stateObject';\nimport {TargetState} from '../state/targetState';\nimport {GetParamsFn, PathNode} from './pathNode';\nimport {ViewService} from '../view/view';\nimport { Param } from '../params/param';\n/**\n * This class contains functions which convert TargetStates, Nodes and paths from one type to another.\n */\nexport class PathUtils {\nconstructor() { }\n/**\n * Given a PathNode[], create an TargetState\n * @param {?} path\n * @return {?}\n */\nstatic makeTargetState(path: PathNode[]): TargetState {\n    let /** @type {?} */ state = tail(path).state;\n    return new TargetState(state, state, path.map(prop(\"paramValues\")).reduce(mergeR, {}));\n  }\n/**\n * @param {?} targetState\n * @return {?}\n */\nstatic buildPath(targetState: TargetState) {\n    let /** @type {?} */ toParams = targetState.params();\n    return targetState.$state().path.map(state => new PathNode(state).applyRawParams(toParams));\n  }\n/**\n * Given a fromPath: PathNode[] and a TargetState, builds a toPath: PathNode[]\n * @param {?} fromPath\n * @param {?} targetState\n * @return {?}\n */\nstatic buildToPath(fromPath: PathNode[], targetState: TargetState): PathNode[] {\n    let /** @type {?} */ toPath: PathNode[] = PathUtils.buildPath(targetState);\n    if (targetState.options().inherit) {\n      return PathUtils.inheritParams(fromPath, toPath, Object.keys(targetState.params()));\n    }\n    return toPath;\n  }\n/**\n * Creates ViewConfig objects and adds to nodes.\n * \n * On each [[PathNode]], creates ViewConfig objects from the views: property of the node's state\n * @param {?} $view\n * @param {?} path\n * @param {?} states\n * @return {?}\n */\nstatic applyViewConfigs($view: ViewService, path: PathNode[], states: StateObject[]) {\n    // Only apply the viewConfigs to the nodes for the given states\n    path.filter(node => inArray(states, node.state)).forEach(node => {\n      let /** @type {?} */ viewDecls: _ViewDeclaration[] = values(node.state.views || {});\n      let /** @type {?} */ subPath = PathUtils.subPath(path, n => n === node);\n      let /** @type {?} */ viewConfigs: ViewConfig[][] = viewDecls.map(view => $view.createViewConfig(subPath, view));\n      node.views = viewConfigs.reduce(unnestR, []);\n    });\n  }\n/**\n * Given a fromPath and a toPath, returns a new to path which inherits parameters from the fromPath\n * \n * For a parameter in a node to be inherited from the from path:\n * - The toPath's node must have a matching node in the fromPath (by state).\n * - The parameter name must not be found in the toKeys parameter array.\n * \n * Note: the keys provided in toKeys are intended to be those param keys explicitly specified by some\n * caller, for instance, $state.transitionTo(..., toParams).  If a key was found in toParams,\n * it is not inherited from the fromPath.\n * @param {?} fromPath\n * @param {?} toPath\n * @param {?=} toKeys\n * @return {?}\n */\nstatic inheritParams(fromPath: PathNode[], toPath: PathNode[], toKeys: string[] = []): PathNode[] {\n/**\n * @param {?} path\n * @param {?} state\n * @return {?}\n */\nfunction nodeParamVals(path: PathNode[], state: StateObject): RawParams {\n      let /** @type {?} */ node: PathNode = find(path, propEq('state', state));\n      return extend({}, node && node.paramValues);\n    }\n\n    let /** @type {?} */ noInherit = fromPath.map(node => node.paramSchema)\n        .reduce(unnestR, [])\n        .filter(param => !param.inherit)\n        .map(prop('id'));\n/**\n * Given an [[PathNode]] \"toNode\", return a new [[PathNode]] with param values inherited from the\n * matching node in fromPath.  Only inherit keys that aren't found in \"toKeys\" from the node in \"fromPath\"\"\n * @param {?} toNode\n * @return {?}\n */\nfunction makeInheritedParamsNode(toNode: PathNode): PathNode {\n      // All param values for the node (may include default key/vals, when key was not found in toParams)\n      let /** @type {?} */ toParamVals = extend({}, toNode && toNode.paramValues);\n      // limited to only those keys found in toParams\n      let /** @type {?} */ incomingParamVals = pick(toParamVals, toKeys);\n      toParamVals = omit(toParamVals, toKeys);\n      let /** @type {?} */ fromParamVals = omit(nodeParamVals(fromPath, toNode.state) || {}, noInherit);\n      // extend toParamVals with any fromParamVals, then override any of those those with incomingParamVals\n      let /** @type {?} */ ownParamVals: RawParams = extend(toParamVals, fromParamVals, incomingParamVals);\n      return new PathNode(toNode.state).applyRawParams(ownParamVals);\n    }\n\n    // The param keys specified by the incoming toParams\n    return /** @type {?} */(( <PathNode[]> toPath.map(makeInheritedParamsNode)));\n  }\n\n  static nonDynamicParams = (node: PathNode): Param[] =>\n      node.state.parameters({ inherit: false })\n          .filter(param => !param.dynamic);\n/**\n * Computes the tree changes (entering, exiting) between a fromPath and toPath.\n * @param {?} fromPath\n * @param {?} toPath\n * @param {?} reloadState\n * @return {?}\n */\nstatic treeChanges(fromPath: PathNode[], toPath: PathNode[], reloadState: StateObject): TreeChanges {\n    let /** @type {?} */ keep = 0, /** @type {?} */ max = Math.min(fromPath.length, toPath.length);\n\n    const /** @type {?} */ nodesMatch = (node1: PathNode, node2: PathNode) =>\n        node1.equals(node2, PathUtils.nonDynamicParams);\n\n    while (keep < max && fromPath[keep].state !== reloadState && nodesMatch(fromPath[keep], toPath[keep])) {\n      keep++;\n    }\n/**\n * Given a retained node, return a new node which uses the to node's param values\n * @param {?} retainedNode\n * @param {?} idx\n * @return {?}\n */\nfunction applyToParams(retainedNode: PathNode, idx: number): PathNode {\n      let /** @type {?} */ cloned = PathNode.clone(retainedNode);\n      cloned.paramValues = toPath[idx].paramValues;\n      return cloned;\n    }\n\n    let /** @type {?} */ from: PathNode[], /** @type {?} */ retained: PathNode[], /** @type {?} */ exiting: PathNode[], /** @type {?} */ entering: PathNode[], /** @type {?} */ to: PathNode[];\n\n    from                  = fromPath;\n    retained              = from.slice(0, keep);\n    exiting               = from.slice(keep);\n\n    // Create a new retained path (with shallow copies of nodes) which have the params of the toPath mapped\n    let /** @type {?} */ retainedWithToParams  = retained.map(applyToParams);\n    entering              = toPath.slice(keep);\n    to                    = (retainedWithToParams).concat(entering);\n\n    return { from, to, retained, exiting, entering };\n  }\n/**\n * Returns a new path which is: the subpath of the first path which matches the second path.\n * \n * The new path starts from root and contains any nodes that match the nodes in the second path.\n * It stops before the first non-matching node.\n * \n * Nodes are compared using their state property and their parameter values.\n * If a `paramsFn` is provided, only the [[Param]] returned by the function will be considered when comparing nodes.\n * \n * @param {?} pathA the first path\n * @param {?} pathB the second path\n * @param {?=} paramsFn a function which returns the parameters to consider when comparing\n * \n * @return {?} an array of PathNodes from the first path which match the nodes in the second path\n */\nstatic matching(pathA: PathNode[], pathB: PathNode[], paramsFn?: GetParamsFn): PathNode[] {\n    let /** @type {?} */ done = false;\n    let /** @type {?} */ tuples: PathNode[][] = arrayTuples(pathA, pathB);\n    return tuples.reduce((matching, [nodeA, nodeB]) => {\n      done = done || !nodeA.equals(nodeB, paramsFn);\n      return done ? matching : matching.concat(nodeA);\n    }, []);\n  }\n/**\n * Returns true if two paths are identical.\n * \n * @param {?} pathA\n * @param {?} pathB\n * @param {?=} paramsFn a function which returns the parameters to consider when comparing\n * @return {?} true if the the states and parameter values for both paths are identical\n */\nstatic equals(pathA: PathNode[], pathB: PathNode[], paramsFn?: GetParamsFn): boolean {\n    return pathA.length === pathB.length &&\n        PathUtils.matching(pathA, pathB, paramsFn).length === pathA.length;\n  }\n/**\n * Return a subpath of a path, which stops at the first matching node\n * \n * Given an array of nodes, returns a subset of the array starting from the first node,\n * stopping when the first node matches the predicate.\n * \n * @param {?} path a path of [[PathNode]]s\n * @param {?} predicate a [[Predicate]] fn that matches [[PathNode]]s\n * @return {?} a subpath up to the matching node, or undefined if no match is found\n */\nstatic subPath(path: PathNode[], predicate: Predicate<PathNode>): PathNode[] {\n    let /** @type {?} */ node = find(path, predicate);\n    let /** @type {?} */ elementIdx = path.indexOf(node);\n    return elementIdx === -1 ? undefined : path.slice(0, elementIdx + 1);\n  }\n/**\n * Gets the raw parameter values from a path\n */\nstatic paramValues = (path: PathNode[]) =>\n      path.reduce((acc, node) => extend(acc, node.paramValues), {});\n}\n\nfunction PathUtils_tsickle_Closure_declarations() {\n/** @type {?} */\nPathUtils.nonDynamicParams;\n/**\n * Gets the raw parameter values from a path\n * @type {?}\n */\nPathUtils.paramValues;\n}\n\n","/** @module path */ /** for typedoc */\n\nimport {extend, applyPairs, find, allTrueR, pairs, arrayTuples} from '../common/common';\nimport {propEq} from '../common/hof';\nimport {StateObject} from '../state/stateObject';\nimport {RawParams} from '../params/interface';\nimport {Param} from '../params/param';\nimport {Resolvable} from '../resolve/resolvable';\nimport {ViewConfig} from '../view/interface';\n/**\n * \\@internalapi \n * \n * A node in a [[TreeChanges]] path\n * \n * For a [[TreeChanges]] path, this class holds the stateful information for a single node in the path.\n * Each PathNode corresponds to a state being entered, exited, or retained.\n * The stateful information includes parameter values and resolve data.\n */\nexport class PathNode {\n/**\n * The state being entered, exited, or retained\n */\npublic state: StateObject;\n/**\n * The parameters declared on the state\n */\npublic paramSchema: Param[];\n/**\n * The parameter values that belong to the state\n */\npublic paramValues: { [key: string]: any };\n/**\n * The individual (stateful) resolvable objects that belong to the state\n */\npublic resolvables: Resolvable[];\n/**\n * The state's declared view configuration objects\n */\npublic views: ViewConfig[];\n/**\n * Creates a copy of a PathNode\n * @param {?} node\n */\nconstructor(node: PathNode);\n/**\n * Creates a new (empty) PathNode for a State\n * @param {?} state\n */\nconstructor(state: StateObject);\n/**\n * @param {?} stateOrNode\n */\nconstructor(stateOrNode: any) {\n    if (stateOrNode instanceof PathNode) {\n      let node: PathNode = stateOrNode;\n      this.state = node.state;\n      this.paramSchema = node.paramSchema.slice();\n      this.paramValues = extend({}, node.paramValues);\n      this.resolvables = node.resolvables.slice();\n      this.views = node.views && node.views.slice();\n    } else {\n      let state: StateObject = stateOrNode;\n      this.state = state;\n      this.paramSchema = state.parameters({ inherit: false });\n      this.paramValues = {};\n      this.resolvables = state.resolvables.map(res => res.clone());\n    }\n  }\n/**\n * Sets [[paramValues]] for the node, from the values of an object hash\n * @param {?} params\n * @return {?}\n */\napplyRawParams(params: RawParams): PathNode {\n    const /** @type {?} */ getParamVal = (paramDef: Param) => [ paramDef.id, paramDef.value(params[paramDef.id]) ];\n    this.paramValues = this.paramSchema.reduce((memo, pDef) => applyPairs(memo, getParamVal(pDef)), {});\n    return this;\n  }\n/**\n * Gets a specific [[Param]] metadata that belongs to the node\n * @param {?} name\n * @return {?}\n */\nparameter(name: string): Param {\n    return find(this.paramSchema, propEq(\"id\", name));\n  }\n/**\n * @param {?} node\n * @param {?=} paramsFn\n * @return {?} true if the state and parameter values for another PathNode are\n * equal to the state and param values for this PathNode\n */\nequals(node: PathNode, paramsFn?: GetParamsFn): boolean {\n    const /** @type {?} */ diff = this.diff(node, paramsFn);\n    return diff && diff.length === 0;\n  }\n/**\n * Finds Params with different parameter values on another PathNode.\n * \n * Given another node (of the same state), finds the parameter values which differ.\n * Returns the [[Param]] (schema objects) whose parameter values differ.\n * \n * Given another node for a different state, returns `false`\n * \n * @param {?} node The node to compare to\n * @param {?=} paramsFn A function that returns which parameters should be compared.\n * @return {?} The [[Param]]s which differ, or null if the two nodes are for different states\n */\ndiff(node: PathNode, paramsFn?: GetParamsFn): Param[] | false {\n    if (this.state !== node.state) return false;\n\n    const /** @type {?} */ params: Param[] = paramsFn ? paramsFn(this) : this.paramSchema;\n    return Param.changed(params, this.paramValues, node.paramValues);\n  }\n/**\n * Returns a clone of the PathNode\n * @param {?} node\n * @return {?}\n */\nstatic clone(node: PathNode) {\n    return new PathNode(node);\n  }\n}\n\nfunction PathNode_tsickle_Closure_declarations() {\n/**\n * The state being entered, exited, or retained\n * @type {?}\n */\nPathNode.prototype.state;\n/**\n * The parameters declared on the state\n * @type {?}\n */\nPathNode.prototype.paramSchema;\n/**\n * The parameter values that belong to the state\n * @type {?}\n */\nPathNode.prototype.paramValues;\n/**\n * The individual (stateful) resolvable objects that belong to the state\n * @type {?}\n */\nPathNode.prototype.resolvables;\n/**\n * The state's declared view configuration objects\n * @type {?}\n */\nPathNode.prototype.views;\n}\n\n\n/** @hidden */\nexport type GetParamsFn = (pathNode: PathNode) => Param[];","/**\n * @coreapi\n * @module params\n */ /** for typedoc */\n\nimport { extend, filter, map, allTrueR } from '../common/common';\nimport { prop } from '../common/hof';\nimport { isInjectable, isDefined, isString, isArray, isUndefined } from '../common/predicates';\nimport { RawParams, ParamDeclaration } from '../params/interface';\nimport { services } from '../common/coreservices';\nimport { ParamType } from './paramType';\nimport { ParamTypes } from './paramTypes';\nimport { UrlMatcherFactory } from '../url/urlMatcherFactory';\n/**\n * @hidden\n */\nlet hasOwn = Object.prototype.hasOwnProperty;\n/**\n * @hidden\n */\nlet isShorthand = (cfg: ParamDeclaration) =>\n    [\"value\", \"type\", \"squash\", \"array\", \"dynamic\"].filter(hasOwn.bind(cfg || {})).length === 0;\nexport type DefType = number;\nexport let DefType: any = {};\nDefType.PATH = 0;\nDefType.SEARCH = 1;\nDefType.CONFIG = 2;\nDefType[DefType.PATH] = \"PATH\";\nDefType[DefType.SEARCH] = \"SEARCH\";\nDefType[DefType.CONFIG] = \"CONFIG\";\n\n/**\n * @hidden\n * @param {?} cfg\n * @return {?}\n */\nfunction unwrapShorthand(cfg: ParamDeclaration): ParamDeclaration {\n  cfg = isShorthand(cfg) && /** @type {?} */(( { value: cfg } as any)) || cfg;\n\n  getStaticDefaultValue['__cacheable'] = true;\n/**\n * @return {?}\n */\nfunction getStaticDefaultValue() {\n    return cfg.value;\n  }\n\n  return extend(cfg, {\n    $$fn: isInjectable(cfg.value) ? cfg.value : getStaticDefaultValue,\n  });\n}\n/**\n * @hidden\n * @param {?} cfg\n * @param {?} urlType\n * @param {?} location\n * @param {?} id\n * @param {?} paramTypes\n * @return {?}\n */\nfunction getType(cfg: ParamDeclaration, urlType: ParamType, location: DefType, id: string, paramTypes: ParamTypes) {\n  if (cfg.type && urlType && urlType.name !== 'string') throw new Error(`Param '${id}' has two type configurations.`);\n  if (cfg.type && urlType && urlType.name === 'string' && paramTypes.type( /** @type {?} */((cfg.type as string)))) return paramTypes.type( /** @type {?} */((cfg.type as string)));\n  if (urlType) return urlType;\n  if (!cfg.type) {\n    let /** @type {?} */ type = location === DefType.CONFIG ? \"any\" :\n        location === DefType.PATH ? \"path\" :\n        location === DefType.SEARCH ? \"query\" : \"string\";\n    return paramTypes.type(type);\n  }\n  return cfg.type instanceof ParamType ? cfg.type : paramTypes.type( /** @type {?} */((cfg.type as string)));\n}\n/**\n * \\@internalapi \n * returns false, true, or the squash value to indicate the \"default parameter url squash policy\".\n * @param {?} config\n * @param {?} isOptional\n * @param {?} defaultPolicy\n * @return {?}\n */\nfunction getSquashPolicy(config: ParamDeclaration, isOptional: boolean, defaultPolicy: (boolean|string)) {\n  let /** @type {?} */ squash = config.squash;\n  if (!isOptional || squash === false) return false;\n  if (!isDefined(squash) || squash == null) return defaultPolicy;\n  if (squash === true || isString(squash)) return squash;\n  throw new Error(`Invalid squash policy: '${squash}'. Valid policies: false, true, or arbitrary string`);\n}\n/**\n * \\@internalapi\n * @param {?} config\n * @param {?} arrayMode\n * @param {?} isOptional\n * @param {?} squash\n * @return {?}\n */\nfunction getReplace(config: ParamDeclaration, arrayMode: boolean, isOptional: boolean, squash: (string|boolean)) {\n  let /** @type {?} */ replace: any, /** @type {?} */ configuredKeys: string[], /** @type {?} */ defaultPolicy = [\n    {from: \"\", to: (isOptional || arrayMode ? undefined : \"\")},\n    {from: null, to: (isOptional || arrayMode ? undefined : \"\")},\n  ];\n  replace = isArray(config.replace) ? config.replace : [];\n  if (isString(squash)) replace.push({ from: squash, to: undefined });\n  configuredKeys = map(replace, prop(\"from\"));\n  return filter(defaultPolicy, item => configuredKeys.indexOf(item.from) === -1).concat(replace);\n}\n/**\n * \\@internalapi\n */\nexport class Param {\n  id: string;\n  type: ParamType;\n  location: DefType;\n  isOptional: boolean;\n  dynamic: boolean;\n  raw: boolean;\n  squash: (boolean|string);\n  replace: [{ to: any, from: any }];\n  inherit: boolean;\n  array: boolean;\n  config: any;\n/**\n * Cache the default value if it is a static value\n */\n_defaultValueCache: {\n    defaultValue: any,\n  };\n/**\n * @param {?} id\n * @param {?} type\n * @param {?} config\n * @param {?} location\n * @param {?} urlMatcherFactory\n */\nconstructor(id: string, type: ParamType, config: ParamDeclaration, location: DefType, urlMatcherFactory: UrlMatcherFactory) {\n    config = unwrapShorthand(config);\n    type = getType(config, type, location, id, urlMatcherFactory.paramTypes);\n    let arrayMode = getArrayMode();\n    type = arrayMode ? type.$asArray(arrayMode, location === DefType.SEARCH) : type;\n    let isOptional = config.value !== undefined || location === DefType.SEARCH;\n    let dynamic = isDefined(config.dynamic) ? !!config.dynamic : !!type.dynamic;\n    let raw = isDefined(config.raw) ? !!config.raw : !!type.raw;\n    let squash = getSquashPolicy(config, isOptional, urlMatcherFactory.defaultSquashPolicy());\n    let replace = getReplace(config, arrayMode, isOptional, squash);\n    let inherit = isDefined(config.inherit) ? !!config.inherit : !!type.inherit;\n\n    // array config: param name (param[]) overrides default settings.  explicit config overrides param name.\n    function getArrayMode() {\n      let arrayDefaults = { array: (location === DefType.SEARCH ? \"auto\" : false) };\n      let arrayParamNomenclature = id.match(/\\[\\]$/) ? { array: true } : {};\n      return extend(arrayDefaults, arrayParamNomenclature, config).array;\n    }\n\n    extend(this, {id, type, location, isOptional, dynamic, raw, squash, replace, inherit, array: arrayMode, config });\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nisDefaultValue(value: any): boolean {\n    return this.isOptional && this.type.equals(this.value(), value);\n  }\n/**\n * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the\n * default value, which may be the result of an injectable function.\n * @param {?=} value\n * @return {?}\n */\nvalue(value?: any): any {\n/**\n * [Internal] Get the default value of a parameter, which may be an injectable function.\n */\nconst getDefaultValue = () => {\n      if (this._defaultValueCache) return this._defaultValueCache.defaultValue;\n\n      if (!services.$injector) throw new Error(\"Injectable functions cannot be called at configuration time\");\n\n      let defaultValue = services.$injector.invoke(this.config.$$fn);\n\n      if (defaultValue !== null && defaultValue !== undefined && !this.type.is(defaultValue))\n        throw new Error(`Default value (${defaultValue}) for parameter '${this.id}' is not an instance of ParamType (${this.type.name})`);\n\n      if (this.config.$$fn['__cacheable']) {\n        this._defaultValueCache = { defaultValue };\n      }\n\n      return defaultValue;\n    };\n\n    const /** @type {?} */ replaceSpecialValues = (val: any) => {\n      for (let /** @type {?} */ tuple of this.replace) {\n        if (tuple.from === val) return tuple.to;\n      }\n      return val;\n    };\n\n    value = replaceSpecialValues(value);\n\n    return isUndefined(value) ? getDefaultValue() : this.type.$normalize(value);\n  }\n/**\n * @return {?}\n */\nisSearch(): boolean {\n    return this.location === DefType.SEARCH;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nvalidates(value: any): boolean {\n    // There was no parameter value, but the param is optional\n    if ((isUndefined(value) || value === null) && this.isOptional) return true;\n\n    // The value was not of the correct ParamType, and could not be decoded to the correct ParamType\n    const /** @type {?} */ normalized = this.type.$normalize(value);\n    if (!this.type.is(normalized)) return false;\n\n    // The value was of the correct type, but when encoded, did not match the ParamType's regexp\n    const /** @type {?} */ encoded = this.type.encode(normalized);\n    return !(isString(encoded) && !this.type.pattern.exec( /** @type {?} */((<string> encoded))));\n  }\n/**\n * @return {?}\n */\ntoString() {\n    return `{Param:${this.id} ${this.type} squash: '${this.squash}' optional: ${this.isOptional}}`;\n  }\n/**\n * @param {?} params\n * @param {?=} values\n * @return {?}\n */\nstatic values(params: Param[], values: RawParams = {}): RawParams {\n    const /** @type {?} */ paramValues = /** @type {?} */(( {} as RawParams));\n    for (let /** @type {?} */ param of params) {\n      paramValues[param.id] = param.value(values[param.id]);\n    }\n    return paramValues;\n  }\n/**\n * Finds [[Param]] objects which have different param values\n * \n * Filters a list of [[Param]] objects to only those whose parameter values differ in two param value objects\n * \n * @param {?} params\n * @param {?=} values1\n * @param {?=} values2\n * @return {?} any Param objects whose values were different between values1 and values2\n */\nstatic changed(params: Param[], values1: RawParams = {}, values2: RawParams = {}): Param[] {\n    return params.filter(param => !param.type.equals(values1[param.id], values2[param.id]));\n  }\n/**\n * Checks if two param value objects are equal (for a set of [[Param]] objects)\n * \n * @param {?} params The list of [[Param]] objects to check\n * @param {?=} values1 The first set of param values\n * @param {?=} values2 The second set of param values\n * \n * @return {?} true if the param values in values1 and values2 are equal\n */\nstatic equals(params: Param[], values1 = {}, values2 = {}): boolean {\n    return Param.changed(params, values1, values2).length === 0;\n  }\n/**\n * Returns true if a the parameter values are valid, according to the Param definitions\n * @param {?} params\n * @param {?=} values\n * @return {?}\n */\nstatic validates(params: Param[], values: RawParams = {}): boolean {\n    return params.map(param => param.validates(values[param.id])).reduce(allTrueR, true);\n  }\n}\n\nfunction Param_tsickle_Closure_declarations() {\n/** @type {?} */\nParam.prototype.id;\n/** @type {?} */\nParam.prototype.type;\n/** @type {?} */\nParam.prototype.location;\n/** @type {?} */\nParam.prototype.isOptional;\n/** @type {?} */\nParam.prototype.dynamic;\n/** @type {?} */\nParam.prototype.raw;\n/** @type {?} */\nParam.prototype.squash;\n/** @type {?} */\nParam.prototype.replace;\n/** @type {?} */\nParam.prototype.inherit;\n/** @type {?} */\nParam.prototype.array;\n/** @type {?} */\nParam.prototype.config;\n/**\n * Cache the default value if it is a static value\n * @type {?}\n */\nParam.prototype._defaultValueCache;\n}\n","/**\n * @coreapi\n * @module params\n */\n/** */\n\nimport {extend, filter, map} from '../common/common';\nimport {isArray, isDefined} from '../common/predicates';\nimport {ParamTypeDefinition} from './interface';\n/**\n * An internal class which implements [[ParamTypeDefinition]].\n * \n * A [[ParamTypeDefinition]] is a plain javascript object used to register custom parameter types.\n * When a param type definition is registered, an instance of this class is created internally.\n * \n * This class has naive implementations for all the [[ParamTypeDefinition]] methods.\n * \n * Used by [[UrlMatcher]] when matching or formatting URLs, or comparing and validating parameter values.\n * \n * #### Example:\n * ```js\n * var paramTypeDef = {\n *   decode: function(val) { return parseInt(val, 10); },\n *   encode: function(val) { return val && val.toString(); },\n *   equals: function(a, b) { return this.is(a) && a === b; },\n *   is: function(val) { return angular.isNumber(val) && isFinite(val) && val % 1 === 0; },\n *   pattern: /\\d+/\n * }\n * \n * var paramType = new ParamType(paramTypeDef);\n * ```\n * \\@internalapi\n */\nexport class ParamType implements ParamTypeDefinition {\n/**\n * \\@inheritdoc\n */\npattern: RegExp = /.*/;\n/**\n * The name/id of the parameter type\n */\nname: string;\n/**\n * \\@inheritdoc\n */\nraw: boolean;\n/**\n * \\@inheritdoc\n */\ndynamic: boolean;\n/**\n * \\@inheritdoc\n */\ninherit = true;\n/**\n * @param {?} def  A configuration object which contains the custom type definition.  The object's\n *        properties will override the default methods and/or pattern in `ParamType`'s public interface.\n */\nconstructor(def: ParamTypeDefinition) {\n    extend(this, def);\n  }\n/**\n * \\@inheritdoc\n * @param {?} val\n * @param {?=} key\n * @return {?}\n */\nis(val: any, key?: string): boolean { return true; }\n/**\n * \\@inheritdoc\n * @param {?} val\n * @param {?=} key\n * @return {?}\n */\nencode(val: any, key?: string): (string|string[]) { return val; }\n/**\n * \\@inheritdoc\n * @param {?} val\n * @param {?=} key\n * @return {?}\n */\ndecode(val: string, key?: string): any { return val; }\n/**\n * \\@inheritdoc\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nequals(a: any, b: any): boolean { return a == b; }\n/**\n * @return {?}\n */\n$subPattern() {\n    let /** @type {?} */ sub = this.pattern.toString();\n    return sub.substr(1, sub.length - 2);\n  }\n/**\n * @return {?}\n */\ntoString() {\n    return `{ParamType:${this.name}}`;\n  }\n/**\n * Given an encoded string, or a decoded object, returns a decoded object\n * @param {?} val\n * @return {?}\n */\n$normalize(val: any) {\n    return this.is(val) ? val : this.decode(val);\n  }\n/**\n * Wraps an existing custom ParamType as an array of ParamType, depending on 'mode'.\n * e.g.:\n * - urlmatcher pattern \"/path?{queryParam[]:int}\"\n * - url: \"/path?queryParam=1&queryParam=2\n * - $stateParams.queryParam will be [1, 2]\n * if `mode` is \"auto\", then\n * - url: \"/path?queryParam=1 will create $stateParams.queryParam: 1\n * - url: \"/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]\n * @param {?} mode\n * @param {?} isSearch\n * @return {?}\n */\n$asArray(mode: (boolean|\"auto\"), isSearch: boolean) {\n    if (!mode) return this;\n    if (mode === \"auto\" && !isSearch) throw new Error(\"'auto' array mode is for query parameters only\");\n    return new ( /** @type {?} */((<any> ArrayType)))(this, mode);\n  }\n}\n\nfunction ParamType_tsickle_Closure_declarations() {\n/**\n * \\@inheritdoc\n * @type {?}\n */\nParamType.prototype.pattern;\n/**\n * The name/id of the parameter type\n * @type {?}\n */\nParamType.prototype.name;\n/**\n * \\@inheritdoc\n * @type {?}\n */\nParamType.prototype.raw;\n/**\n * \\@inheritdoc\n * @type {?}\n */\nParamType.prototype.dynamic;\n/**\n * \\@inheritdoc\n * @type {?}\n */\nParamType.prototype.inherit;\n}\n\n/**\n * Wraps up a `ParamType` object to handle array values.\n * \\@internalapi\n * @param {?} type\n * @param {?} mode\n * @return {?}\n */\nfunction ArrayType(type: ParamType, mode: (boolean|\"auto\")) {\n/**\n * @param {?} val\n * @return {?}\n */\nfunction arrayWrap(val: any): any[] {\n    return isArray(val) ? val : (isDefined(val) ? [ val ] : []);\n  }\n/**\n * @param {?} val\n * @return {?}\n */\nfunction arrayUnwrap(val: any) {\n    switch (val.length) {\n      case 0: return undefined;\n      case 1: return mode === \"auto\" ? val[0] : val;\n      default: return val;\n    }\n  }\n/**\n * @param {?} callback\n * @param {?=} allTruthyMode\n * @return {?}\n */\nfunction arrayHandler(callback: (x: any) => any, allTruthyMode?: boolean) {\n    return function handleArray(val: any) {\n      if (isArray(val) && val.length === 0) return val;\n      let /** @type {?} */ arr = arrayWrap(val);\n      let /** @type {?} */ result = map(arr, callback);\n      return (allTruthyMode === true) ? filter(result, x => !x).length === 0 : arrayUnwrap(result);\n    };\n  }\n/**\n * @param {?} callback\n * @return {?}\n */\nfunction arrayEqualsHandler(callback: (l: any, r: any) => boolean) {\n    return function handleArray(val1: any, val2: any) {\n      let /** @type {?} */ left = arrayWrap(val1), /** @type {?} */ right = arrayWrap(val2);\n      if (left.length !== right.length) return false;\n      for (let /** @type {?} */ i = 0; i < left.length; i++) {\n        if (!callback(left[i], right[i])) return false;\n      }\n      return true;\n    };\n  }\n\n  ['encode', 'decode', 'equals', '$normalize'].forEach(name => {\n    var /** @type {?} */ paramTypeFn = type[name].bind(type);\n    var /** @type {?} */ wrapperFn: Function = name === 'equals' ? arrayEqualsHandler : arrayHandler;\n    this[name] = wrapperFn(paramTypeFn);\n  });\n\n  extend(this, {\n    dynamic: type.dynamic,\n    name: type.name,\n    pattern: type.pattern,\n    inherit: type.inherit,\n    is: arrayHandler(type.is.bind(type), true),\n    $arrayMode: mode\n  });\n}\n","/**\n * @coreapi\n * @module transition\n */ /** for typedoc */\n\n\nimport {extend, tail, assertPredicate, unnestR, identity} from '../common/common';\nimport {isArray} from '../common/predicates';\n\nimport {\n    TransitionOptions, TransitionHookOptions, IHookRegistry, TreeChanges, IMatchingNodes,\n    TransitionHookPhase, TransitionHookScope\n} from './interface';\n\nimport {Transition} from './transition';\nimport {TransitionHook} from './transitionHook';\nimport {StateObject} from '../state/stateObject';\nimport {PathNode} from '../path/pathNode';\nimport {TransitionService} from './transitionService';\nimport {TransitionEventType} from './transitionEventType';\nimport {RegisteredHook} from './hookRegistry';\n/**\n * This class returns applicable TransitionHooks for a specific Transition instance.\n * \n * Hooks ([[RegisteredHook]]) may be registered globally, e.g., $transitions.onEnter(...), or locally, e.g.\n * myTransition.onEnter(...).  The HookBuilder finds matching RegisteredHooks (where the match criteria is\n * determined by the type of hook)\n * \n * The HookBuilder also converts RegisteredHooks objects to TransitionHook objects, which are used to run a Transition.\n * \n * The HookBuilder constructor is given the $transitions service and a Transition instance.  Thus, a HookBuilder\n * instance may only be used for one specific Transition object. (side note: the _treeChanges accessor is private\n * in the Transition class, so we must also provide the Transition's _treeChanges)\n * \n */\nexport class HookBuilder {\n/**\n * @param {?} transition\n */\nconstructor(private transition: Transition) { }\n/**\n * @param {?} phase\n * @return {?}\n */\nbuildHooksForPhase(phase: TransitionHookPhase): TransitionHook[] {\n    let /** @type {?} */ $transitions = this.transition.router.transitionService;\n    return $transitions._pluginapi._getEvents(phase)\n        .map(type => this.buildHooks(type))\n        .reduce(unnestR, [])\n        .filter(identity);\n  }\n/**\n * Returns an array of newly built TransitionHook objects.\n * \n * - Finds all RegisteredHooks registered for the given `hookType` which matched the transition's [[TreeChanges]].\n * - Finds [[PathNode]] (or `PathNode[]`) to use as the TransitionHook context(s)\n * - For each of the [[PathNode]]s, creates a TransitionHook\n * \n * @param {?} hookType the type of the hook registration function, e.g., 'onEnter', 'onFinish'.\n * @return {?}\n */\nbuildHooks(hookType: TransitionEventType): TransitionHook[] {\n    let /** @type {?} */ transition = this.transition;\n    let /** @type {?} */ treeChanges = transition.treeChanges();\n\n    // Find all the matching registered hooks for a given hook type\n    let /** @type {?} */ matchingHooks = this.getMatchingHooks(hookType, treeChanges);\n    if (!matchingHooks) return [];\n\n    let /** @type {?} */ baseHookOptions = /** @type {?} */(( <TransitionHookOptions> {\n      transition: transition,\n      current: transition.options().current\n    }));\n\n    const /** @type {?} */ makeTransitionHooks = (hook: RegisteredHook) => {\n       // Fetch the Nodes that caused this hook to match.\n       let /** @type {?} */ matches: IMatchingNodes = hook.matches(treeChanges);\n       // Select the PathNode[] that will be used as TransitionHook context objects\n       let /** @type {?} */ matchingNodes: PathNode[] = matches[hookType.criteriaMatchPath.name];\n\n       // Return an array of HookTuples\n       return matchingNodes.map(node => {\n         let /** @type {?} */ _options = extend({\n           bind: hook.bind,\n           traceData: { hookType: hookType.name, context: node }\n         }, baseHookOptions);\n\n         let /** @type {?} */ state = hookType.criteriaMatchPath.scope === TransitionHookScope.STATE ? node.state.self : null;\n         let /** @type {?} */ transitionHook = new TransitionHook(transition, state, hook, _options);\n         return /** @type {?} */(( <HookTuple> { hook, node, transitionHook }));\n       });\n    };\n\n    return matchingHooks.map(makeTransitionHooks)\n        .reduce(unnestR, [])\n        .sort(tupleSort(hookType.reverseSort))\n        .map(tuple => tuple.transitionHook);\n  }\n/**\n * Finds all RegisteredHooks from:\n * - The Transition object instance hook registry\n * - The TransitionService ($transitions) global hook registry\n * \n * which matched:\n * - the eventType\n * - the matchCriteria (to, from, exiting, retained, entering)\n * \n * @param {?} hookType\n * @param {?} treeChanges\n * @return {?} an array of matched [[RegisteredHook]]s\n */\npublic getMatchingHooks(hookType: TransitionEventType, treeChanges: TreeChanges): RegisteredHook[] {\n    let /** @type {?} */ isCreate = hookType.hookPhase === TransitionHookPhase.CREATE;\n\n    // Instance and Global hook registries\n    let /** @type {?} */ $transitions = this.transition.router.transitionService;\n    let /** @type {?} */ registries = isCreate ? [ $transitions ] : [ this.transition, $transitions ];\n\n    return registries.map((reg: IHookRegistry) => reg.getHooks(hookType.name))    // Get named hooks from registries\n        .filter(assertPredicate(isArray, `broken event named: ${hookType.name}`)) // Sanity check\n        .reduce(unnestR, [])                                                      // Un-nest RegisteredHook[][] to RegisteredHook[] array\n        .filter(hook => hook.matches(treeChanges));                               // Only those satisfying matchCriteria\n  }\n}\n\nfunction HookBuilder_tsickle_Closure_declarations() {\n/** @type {?} */\nHookBuilder.prototype.transition;\n}\n\n\ninterface HookTuple { hook: RegisteredHook, node: PathNode, transitionHook: TransitionHook }\n/**\n * A factory for a sort function for HookTuples.\n * \n * The sort function first compares the PathNode depth (how deep in the state tree a node is), then compares\n * the EventHook priority.\n * \n * @param {?=} reverseDepthSort a boolean, when true, reverses the sort order for the node depth\n * @return {?} a tuple sort function\n */\nfunction tupleSort(reverseDepthSort = false) {\n  return function nodeDepthThenPriority(l: HookTuple, r: HookTuple): number {\n    let /** @type {?} */ factor = reverseDepthSort ? -1 : 1;\n    let /** @type {?} */ depthDelta = (l.node.state.path.length - r.node.state.path.length) * factor;\n    return depthDelta !== 0 ? depthDelta : r.hook.priority - l.hook.priority;\n  }\n}","/**\n * @coreapi\n * @module transition\n */ /** for typedoc */\n\nimport { extend, removeFrom, tail, values, identity, map } from '../common/common';\nimport {isString, isFunction} from '../common/predicates';\nimport {PathNode} from '../path/pathNode';\nimport {\n    TransitionStateHookFn, TransitionHookFn, TransitionHookPhase, TransitionHookScope, IHookRegistry, PathType\n} from './interface'; // has or is using\n\n\nimport {\n    HookRegOptions, HookMatchCriteria, TreeChanges,\n    HookMatchCriterion, IMatchingNodes, HookFn\n} from './interface';\nimport {Glob} from '../common/glob';\nimport {StateObject} from '../state/stateObject';\nimport {TransitionEventType} from './transitionEventType';\nimport { TransitionService } from './transitionService';\n/**\n * Determines if the given state matches the matchCriteria\n * \n * @hidden \n * \n * @param {?} state a State Object to test against\n * @param {?} criterion \n * - If a string, matchState uses the string as a glob-matcher against the state name\n * - If an array (of strings), matchState uses each string in the array as a glob-matchers against the state name\n *   and returns a positive match if any of the globs match.\n * - If a function, matchState calls the function with the state and returns true if the function's result is truthy.\n * @return {?}\n */\nexport function matchState(state: StateObject, criterion: HookMatchCriterion) {\n  let /** @type {?} */ toMatch = isString(criterion) ? [criterion] : criterion;\n/**\n * @param {?} _state\n * @return {?}\n */\nfunction matchGlobs(_state: StateObject) {\n    let /** @type {?} */ globStrings = /** @type {?} */(( <string[]> toMatch));\n    for (let /** @type {?} */ i = 0; i < globStrings.length; i++) {\n      let /** @type {?} */ glob = new Glob(globStrings[i]);\n\n      if ((glob && glob.matches(_state.name)) || (!glob && globStrings[i] === _state.name)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  let /** @type {?} */ matchFn = /** @type {?} */(( <any> (isFunction(toMatch) ? toMatch : matchGlobs)));\n  return !!matchFn(state);\n}\n/**\n * \\@internalapi \n * The registration data for a registered transition hook\n */\nexport class RegisteredHook {\n  priority: number;\n  bind: any;\n  _deregistered: boolean;\n/**\n * @param {?} tranSvc\n * @param {?} eventType\n * @param {?} callback\n * @param {?} matchCriteria\n * @param {?=} options\n */\nconstructor(public tranSvc: TransitionService,\npublic eventType: TransitionEventType,\npublic callback: HookFn,\npublic matchCriteria: HookMatchCriteria,\n              options: HookRegOptions = /** @type {?} */(( {} as any))) {\n    this.priority = options.priority || 0;\n    this.bind = options.bind || null;\n    this._deregistered = false;\n  }\n/**\n * Gets the matching [[PathNode]]s\n * \n * Given an array of [[PathNode]]s, and a [[HookMatchCriterion]], returns an array containing\n * the [[PathNode]]s that the criteria matches, or `null` if there were no matching nodes.\n * \n * Returning `null` is significant to distinguish between the default\n * \"match-all criterion value\" of `true` compared to a `() => true` function,\n * when the nodes is an empty array.\n * \n * This is useful to allow a transition match criteria of `entering: true`\n * to still match a transition, even when `entering === []`.  Contrast that\n * with `entering: (state) => true` which only matches when a state is actually\n * being entered.\n * @param {?} nodes\n * @param {?} criterion\n * @return {?}\n */\nprivate _matchingNodes(nodes: PathNode[], criterion: HookMatchCriterion): PathNode[] {\n    if (criterion === true) return nodes;\n    let /** @type {?} */ matching = nodes.filter(node => matchState(node.state, criterion));\n    return matching.length ? matching : null;\n  }\n/**\n * Gets the default match criteria (all `true`)\n * \n * Returns an object which has all the criteria match paths as keys and `true` as values, i.e.:\n * \n * ```js\n * {\n *   to: true,\n *   from: true,\n *   entering: true,\n *   exiting: true,\n *   retained: true,\n * }\n * @return {?}\n */\nprivate _getDefaultMatchCriteria(): HookMatchCriteria {\n    return map(this.tranSvc._pluginapi._getPathTypes(), () => true);\n  }\n/**\n * Gets matching nodes as [[IMatchingNodes]]\n * \n * Create a IMatchingNodes object from the TransitionHookTypes that is roughly equivalent to:\n * \n * ```js\n * let matches: IMatchingNodes = {\n *   to:       _matchingNodes([tail(treeChanges.to)],   mc.to),\n *   from:     _matchingNodes([tail(treeChanges.from)], mc.from),\n *   exiting:  _matchingNodes(treeChanges.exiting,      mc.exiting),\n *   retained: _matchingNodes(treeChanges.retained,     mc.retained),\n *   entering: _matchingNodes(treeChanges.entering,     mc.entering),\n * };\n * ```\n * @param {?} treeChanges\n * @return {?}\n */\nprivate _getMatchingNodes(treeChanges: TreeChanges): IMatchingNodes {\n    let /** @type {?} */ criteria = extend(this._getDefaultMatchCriteria(), this.matchCriteria);\n    let /** @type {?} */ paths: PathType[] = values(this.tranSvc._pluginapi._getPathTypes());\n\n    return paths.reduce((mn: IMatchingNodes, pathtype: PathType) => {\n      // STATE scope criteria matches against every node in the path.\n      // TRANSITION scope criteria matches against only the last node in the path\n      let /** @type {?} */ isStateHook = pathtype.scope === TransitionHookScope.STATE;\n      let /** @type {?} */ path = treeChanges[pathtype.name] || [];\n      let /** @type {?} */ nodes: PathNode[] = isStateHook ? path : [tail(path)];\n\n      mn[pathtype.name] = this._matchingNodes(nodes, criteria[pathtype.name]);\n      return mn;\n    }, /** @type {?} */(( {} as IMatchingNodes)));\n  }\n/**\n * Determines if this hook's [[matchCriteria]] match the given [[TreeChanges]]\n * \n * @param {?} treeChanges\n * @return {?} an IMatchingNodes object, or null. If an IMatchingNodes object is returned, its values\n * are the matching [[PathNode]]s for each [[HookMatchCriterion]] (to, from, exiting, retained, entering)\n */\nmatches(treeChanges: TreeChanges): IMatchingNodes {\n    let /** @type {?} */ matches = this._getMatchingNodes(treeChanges);\n\n    // Check if all the criteria matched the TreeChanges object\n    let /** @type {?} */ allMatched = values(matches).every(identity);\n    return allMatched ? matches : null;\n  }\n}\n\nfunction RegisteredHook_tsickle_Closure_declarations() {\n/** @type {?} */\nRegisteredHook.prototype.priority;\n/** @type {?} */\nRegisteredHook.prototype.bind;\n/** @type {?} */\nRegisteredHook.prototype._deregistered;\n/** @type {?} */\nRegisteredHook.prototype.tranSvc;\n/** @type {?} */\nRegisteredHook.prototype.eventType;\n/** @type {?} */\nRegisteredHook.prototype.callback;\n/** @type {?} */\nRegisteredHook.prototype.matchCriteria;\n}\n\n/**\n * @hidden Return a registration function of the requested type.\n * @param {?} registry\n * @param {?} transitionService\n * @param {?} eventType\n * @return {?}\n */\nexport function makeEvent(registry: IHookRegistry, transitionService: TransitionService, eventType: TransitionEventType) {\n  // Create the object which holds the registered transition hooks.\n  let /** @type {?} */ _registeredHooks = registry._registeredHooks = (registry._registeredHooks || {});\n  let /** @type {?} */ hooks = _registeredHooks[eventType.name] = [];\n\n  // Create hook registration function on the IHookRegistry for the event\n  registry[eventType.name] = hookRegistrationFn;\n/**\n * @param {?} matchObject\n * @param {?} callback\n * @param {?=} options\n * @return {?}\n */\nfunction hookRegistrationFn(matchObject, callback, options = {}) {\n    let /** @type {?} */ registeredHook = new RegisteredHook(transitionService, eventType, callback, matchObject, options);\n    hooks.push(registeredHook);\n\n    return function deregisterEventHook() {\n      registeredHook._deregistered = true;\n      removeFrom(hooks)(registeredHook);\n    };\n  }\n\n  return hookRegistrationFn;\n}","/**\n * @coreapi\n * @module transition\n */\n/** for typedoc */\n\nimport { TransitionHookOptions, HookResult, TransitionHookPhase } from './interface';\nimport { defaults, noop, silentRejection } from '../common/common';\nimport { fnToString, maxLength } from '../common/strings';\nimport { isPromise } from '../common/predicates';\nimport { is, parse } from '../common/hof';\nimport { trace } from '../common/trace';\nimport { services } from '../common/coreservices';\nimport { Rejection } from './rejectFactory';\nimport { TargetState } from '../state/targetState';\nimport { Transition } from './transition';\nimport { TransitionEventType } from './transitionEventType';\nimport { RegisteredHook } from './hookRegistry';\nimport { StateDeclaration } from '../state/interface';\n\nlet /** @type {?} */ defaultOptions: TransitionHookOptions = {\n  current: noop,\n  transition: null,\n  traceData: {},\n  bind: null,\n};\n\nexport type GetResultHandler = (hook: TransitionHook) => ResultHandler;\nexport type GetErrorHandler  = (hook: TransitionHook) => ErrorHandler;\n\nexport type ResultHandler = (result: HookResult)      => Promise<HookResult>;\nexport type ErrorHandler  = (error: any)              => Promise<any>;\n/**\n * @hidden\n */\nexport class TransitionHook {\n  type: TransitionEventType;\n/**\n * @param {?} transition\n * @param {?} stateContext\n * @param {?} registeredHook\n * @param {?} options\n */\nconstructor(private transition: Transition,\nprivate stateContext: StateDeclaration,\nprivate registeredHook: RegisteredHook,\nprivate options: TransitionHookOptions) {\n    this.options = defaults(options, defaultOptions);\n    this.type = registeredHook.eventType;\n  }\n/**\n * These GetResultHandler(s) are used by [[invokeHook]] below\n * Each HookType chooses a GetResultHandler (See: [[TransitionService._defineCoreEvents]])\n */\nstatic HANDLE_RESULT: GetResultHandler = (hook: TransitionHook) => (result: HookResult) =>\n      hook.handleHookResult(result);\n/**\n * If the result is a promise rejection, log it.\n * Otherwise, ignore the result.\n */\nstatic LOG_REJECTED_RESULT: GetResultHandler = (hook: TransitionHook) => (result: HookResult) => {\n    isPromise(result) && result.catch(err =>\n        hook.logError(Rejection.normalize(err)));\n    return undefined;\n  }\n/**\n * These GetErrorHandler(s) are used by [[invokeHook]] below\n * Each HookType chooses a GetErrorHandler (See: [[TransitionService._defineCoreEvents]])\n */\nstatic LOG_ERROR: GetErrorHandler = (hook: TransitionHook) => (error: any) =>\n      hook.logError(error);\n\n  static REJECT_ERROR: GetErrorHandler = (hook: TransitionHook) => (error: any) =>\n      silentRejection(error);\n\n  static THROW_ERROR: GetErrorHandler = (hook: TransitionHook) => (error: any) => {\n    throw error;\n  }\nprivate isSuperseded = () =>\n    this.type.hookPhase === TransitionHookPhase.RUN && !this.options.transition.isActive();\n/**\n * @param {?} err\n * @return {?}\n */\nlogError(err): any {\n    this.transition.router.stateService.defaultErrorHandler()(err);\n  }\n/**\n * @return {?}\n */\ninvokeHook(): Promise<HookResult> | void {\n    let /** @type {?} */ hook = this.registeredHook;\n    if (hook._deregistered) return;\n\n    let /** @type {?} */ notCurrent = this.getNotCurrentRejection();\n    if (notCurrent) return notCurrent;\n\n    let /** @type {?} */ options = this.options;\n    trace.traceHookInvocation(this, this.transition, options);\n\n    const /** @type {?} */ invokeCallback = () =>\n        hook.callback.call(options.bind, this.transition, this.stateContext);\n\n    const /** @type {?} */ normalizeErr = err =>\n        Rejection.normalize(err).toPromise();\n\n    const /** @type {?} */ handleError = err =>\n        hook.eventType.getErrorHandler(this)(err);\n\n    const /** @type {?} */ handleResult = result =>\n        hook.eventType.getResultHandler(this)(result);\n\n    try {\n      let /** @type {?} */ result = invokeCallback();\n\n      if (!this.type.synchronous && isPromise(result)) {\n        return result.catch(normalizeErr)\n            .then(handleResult, handleError);\n      } else {\n        return handleResult(result);\n      }\n    } catch ( /** @type {?} */err) {\n      // If callback throws (synchronously)\n      return handleError(Rejection.normalize(err));\n    }\n  }\n/**\n * This method handles the return value of a Transition Hook.\n * \n * A hook can return false (cancel), a TargetState (redirect),\n * or a promise (which may later resolve to false or a redirect)\n * \n * This also handles \"transition superseded\" -- when a new transition\n * was started while the hook was still running\n * @param {?} result\n * @return {?}\n */\nhandleHookResult(result: HookResult): Promise<HookResult> {\n    let /** @type {?} */ notCurrent = this.getNotCurrentRejection();\n    if (notCurrent) return notCurrent;\n\n    // Hook returned a promise\n    if (isPromise(result)) {\n      // Wait for the promise, then reprocess with the resulting value\n      return result.then(val => this.handleHookResult(val));\n    }\n\n    trace.traceHookResult(result, this.transition, this.options);\n\n    // Hook returned false\n    if (result === false) {\n      // Abort this Transition\n      return Rejection.aborted(\"Hook aborted transition\").toPromise();\n    }\n\n    const /** @type {?} */ isTargetState = is(TargetState);\n    // hook returned a TargetState\n    if (isTargetState(result)) {\n      // Halt the current Transition and redirect (a new Transition) to the TargetState.\n      return Rejection.redirected(result).toPromise();\n    }\n  }\n/**\n * Return a Rejection promise if the transition is no longer current due\n * to a stopped router (disposed), or a new transition has started and superseded this one.\n * @return {?}\n */\nprivate getNotCurrentRejection() {\n    let /** @type {?} */ router = this.transition.router;\n\n    // The router is stopped\n    if (router._disposed) {\n      return Rejection.aborted(`UIRouter instance #${router.$id} has been stopped (disposed)`).toPromise();\n    }\n\n    if (this.transition._aborted) {\n      return Rejection.aborted().toPromise();\n    }\n\n    // This transition is no longer current.\n    // Another transition started while this hook was still running.\n    if (this.isSuperseded()) {\n      // Abort this transition\n      return Rejection.superseded(this.options.current()).toPromise();\n    }\n  }\n/**\n * @return {?}\n */\ntoString() {\n    let { options, registeredHook } = this;\n    let /** @type {?} */ event = parse(\"traceData.hookType\")(options) || \"internal\", /** @type {?} */\n        context = parse(\"traceData.context.state.name\")(options) || parse(\"traceData.context\")(options) || \"unknown\", /** @type {?} */\n        name = fnToString(registeredHook.callback);\n    return `${event} context: ${context}, ${maxLength(200, name)}`;\n  }\n/**\n * Chains together an array of TransitionHooks.\n * \n * Given a list of [[TransitionHook]] objects, chains them together.\n * Each hook is invoked after the previous one completes.\n * \n * #### Example:\n * ```js\n * var hooks: TransitionHook[] = getHooks();\n * let promise: Promise<any> = TransitionHook.chain(hooks);\n * \n * promise.then(handleSuccess, handleError);\n * ```\n * \n * @param {?} hooks the list of hooks to chain together\n * @param {?=} waitFor if provided, the chain is `.then()`'ed off this promise\n * @return {?} a `Promise` for sequentially invoking the hooks (in order)\n */\nstatic chain(hooks: TransitionHook[], waitFor?: Promise<any>): Promise<any> {\n    // Chain the next hook off the previous\n    const /** @type {?} */ createHookChainR = (prev: Promise<any>, nextHook: TransitionHook) =>\n        prev.then(() => nextHook.invokeHook());\n    return hooks.reduce(createHookChainR, waitFor || services.$q.when());\n  }\n/**\n * Invokes all the provided TransitionHooks, in order.\n * Each hook's return value is checked.\n * If any hook returns a promise, then the rest of the hooks are chained off that promise, and the promise is returned.\n * If no hook returns a promise, then all hooks are processed synchronously.\n * \n * @template T\n * @param {?} hooks the list of TransitionHooks to invoke\n * @param {?} doneCallback a callback that is invoked after all the hooks have successfully completed\n * \n * @return {?} a promise for the async result, or the result of the callback\n */\nstatic invokeHooks<T>(hooks: TransitionHook[], doneCallback: (result?: HookResult) => T): Promise<any> | T {\n    for (let /** @type {?} */ idx = 0; idx < hooks.length; idx++) {\n      let /** @type {?} */ hookResult = hooks[idx].invokeHook();\n\n      if (isPromise(hookResult)) {\n        let /** @type {?} */ remainingHooks = hooks.slice(idx + 1);\n\n        return TransitionHook.chain(remainingHooks, hookResult)\n            .then(doneCallback);\n      }\n    }\n\n    return doneCallback();\n  }\n/**\n * Run all TransitionHooks, ignoring their return value.\n * @param {?} hooks\n * @return {?}\n */\nstatic runAllHooks(hooks: TransitionHook[]): void {\n    hooks.forEach(hook => hook.invokeHook());\n  }\n\n}\n\nfunction TransitionHook_tsickle_Closure_declarations() {\n/**\n * These GetResultHandler(s) are used by [[invokeHook]] below\n * Each HookType chooses a GetResultHandler (See: [[TransitionService._defineCoreEvents]])\n * @type {?}\n */\nTransitionHook.HANDLE_RESULT;\n/**\n * If the result is a promise rejection, log it.\n * Otherwise, ignore the result.\n * @type {?}\n */\nTransitionHook.LOG_REJECTED_RESULT;\n/**\n * These GetErrorHandler(s) are used by [[invokeHook]] below\n * Each HookType chooses a GetErrorHandler (See: [[TransitionService._defineCoreEvents]])\n * @type {?}\n */\nTransitionHook.LOG_ERROR;\n/** @type {?} */\nTransitionHook.REJECT_ERROR;\n/** @type {?} */\nTransitionHook.THROW_ERROR;\n/** @type {?} */\nTransitionHook.prototype.type;\n/** @type {?} */\nTransitionHook.prototype.isSuperseded;\n/** @type {?} */\nTransitionHook.prototype.transition;\n/** @type {?} */\nTransitionHook.prototype.stateContext;\n/** @type {?} */\nTransitionHook.prototype.registeredHook;\n/** @type {?} */\nTransitionHook.prototype.options;\n}\n","/**\n * @coreapi\n * @module state\n */ /** for typedoc */\n\n\nimport { StateDeclaration, StateOrName, TargetStateDef } from './interface';\nimport { ParamsOrArray } from '../params/interface';\nimport { TransitionOptions } from '../transition/interface';\nimport { StateObject } from './stateObject';\nimport { toJson } from '../common/common';\nimport { isString } from '../common/predicates';\n/**\n * Encapsulate the target (destination) state/params/options of a [[Transition]].\n * \n * This class is frequently used to redirect a transition to a new destination.\n * \n * See:\n * \n * - [[HookResult]]\n * - [[TransitionHookFn]]\n * - [[TransitionService.onStart]]\n * \n * To create a `TargetState`, use [[StateService.target]].\n * \n * ---\n * \n * This class wraps:\n * \n * 1) an identifier for a state\n * 2) a set of parameters\n * 3) and transition options\n * 4) the registered state object (the [[StateDeclaration]])\n * \n * Many UI-Router APIs such as [[StateService.go]] take a [[StateOrName]] argument which can\n * either be a *state object* (a [[StateDeclaration]] or [[StateObject]]) or a *state name* (a string).\n * The `TargetState` class normalizes those options.\n * \n * A `TargetState` may be valid (the state being targeted exists in the registry)\n * or invalid (the state being targeted is not registered).\n */\nexport class TargetState {\nprivate _params: ParamsOrArray;\n/**\n * The TargetState constructor\n * \n * Note: Do not construct a `TargetState` manually.\n * To create a `TargetState`, use the [[StateService.target]] factory method.\n * \n * \\@internalapi\n * @param {?} _identifier An identifier for a state.\n *    Either a fully-qualified state name, or the object used to define the state.\n * @param {?=} _definition The internal state representation, if exists.\n * @param {?=} _params Parameters for the target state\n * @param {?=} _options Transition options.\n * \n */\nconstructor(\nprivate _identifier: StateOrName,\nprivate _definition?: StateObject,\n    _params?: ParamsOrArray,\nprivate _options: TransitionOptions = {}\n  ) {\n    this._params = _params || {};\n  }\n/**\n * The name of the state this object targets\n * @return {?}\n */\nname(): String {\n    return this._definition && this._definition.name || /** @type {?} */(( <String> this._identifier));\n  }\n/**\n * The identifier used when creating this TargetState\n * @return {?}\n */\nidentifier(): StateOrName {\n    return this._identifier;\n  }\n/**\n * The target parameter values\n * @return {?}\n */\nparams(): ParamsOrArray {\n    return this._params;\n  }\n/**\n * The internal state object (if it was found)\n * @return {?}\n */\n$state(): StateObject {\n    return this._definition;\n  }\n/**\n * The internal state declaration (if it was found)\n * @return {?}\n */\nstate(): StateDeclaration {\n    return this._definition && this._definition.self;\n  }\n/**\n * The target options\n * @return {?}\n */\noptions() {\n    return this._options;\n  }\n/**\n * True if the target state was found\n * @return {?}\n */\nexists(): boolean {\n    return !!(this._definition && this._definition.self);\n  }\n/**\n * True if the object is valid\n * @return {?}\n */\nvalid(): boolean {\n    return !this.error();\n  }\n/**\n * If the object is invalid, returns the reason why\n * @return {?}\n */\nerror(): string {\n    let /** @type {?} */ base = /** @type {?} */(( <any> this.options().relative));\n    if (!this._definition && !!base) {\n      let /** @type {?} */ stateName = base.name ? base.name : base;\n      return `Could not resolve '${this.name()}' from state '${stateName}'`;\n    }\n    if (!this._definition)\n      return `No such state '${this.name()}'`;\n    if (!this._definition.self)\n      return `State '${this.name()}' has an invalid definition`;\n  }\n/**\n * @return {?}\n */\ntoString() {\n    return `'${this.name()}'${toJson(this.params())}`;\n  }\n/**\n * Returns true if the object has a state property that might be a state or state name\n */\nstatic isDef = (obj): obj is TargetStateDef =>\n      obj && obj.state && (isString(obj.state) || isString(obj.state.name));\n\n  // /** Returns a new TargetState based on this one, but using the specified options */\n  // withOptions(_options: TransitionOptions): TargetState {\n  //   return extend(this._clone(), { _options });\n  // }\n  //\n  // /** Returns a new TargetState based on this one, but using the specified params */\n  // withParams(_params: ParamsOrArray): TargetState {\n  //   return extend(this._clone(), { _params });\n  // }\n\n  // private _clone = () =>\n  //     new TargetState(this._identifier, this._definition, this._params, this._options);\n}\n\nfunction TargetState_tsickle_Closure_declarations() {\n/**\n * Returns true if the object has a state property that might be a state or state name\n * @type {?}\n */\nTargetState.isDef;\n/** @type {?} */\nTargetState.prototype._params;\n/** @type {?} */\nTargetState.prototype._identifier;\n/** @type {?} */\nTargetState.prototype._definition;\n/** @type {?} */\nTargetState.prototype._options;\n}\n\n","/**\n * @coreapi\n * @module transition\n */ /** for typedoc */\n\nimport {StateDeclaration} from '../state/interface';\nimport {Predicate} from '../common/common';\n\nimport {Transition} from './transition';\nimport {StateObject} from '../state/stateObject';\nimport {PathNode} from '../path/pathNode';\nimport {TargetState} from '../state/targetState';\nimport {RegisteredHook} from './hookRegistry';\n\n/**\n * The TransitionOptions object can be used to change the behavior of a transition.\n *\n * It is passed as the third argument to [[StateService.go]], [[StateService.transitionTo]].\n * It can also be used with a `uiSref`.\n */\nexport interface TransitionOptions {\n  /**\n   * This option changes how the Transition interacts with the browser's location bar (URL).\n   *\n   * - If `true`, it will update the url in the location bar.\n   * - If `false`, it will not update the url in the location bar.\n   * - If it is the string `\"replace\"`, it will update the url and also replace the last history record.\n   *\n   * @default `true`\n   */\n  location    ?: (boolean|string);\n\n  /**\n   * When transitioning to relative path (e.g '`^`'), this option defines which state to be relative from.\n   * @default `$state.current`\n   */\n  relative    ?: (string|StateDeclaration|StateObject);\n\n  /**\n   * This option sets whether or not the transition's parameter values should be inherited from\n   * the current parameter values.\n   *\n   * - If `true`, it will inherit parameter values from the current parameter values.\n   * - If `false`, only the parameters which are provided to `transitionTo` will be used.\n   *\n   * @default `false`\n   */\n  inherit     ?: boolean;\n\n  /**\n   * @deprecated\n   */\n  notify      ?: boolean;\n\n  /**\n   * This option may be used to force states which are currently active to reload.\n   *\n   * During a normal transition, a state is \"retained\" if:\n   * - It was previously active\n   * - The state's parameter values have not changed\n   * - All the parent states' parameter values have not changed\n   *\n   * Forcing a reload of a state will cause it to be exited and entered, which will:\n   * - Refetch that state's resolve data\n   * - Exit the state (onExit hook)\n   * - Re-enter the state (onEnter hook)\n   * - Re-render the views (controllers and templates)\n   *\n   * - When `true`, the destination state (and all parent states) will be reloaded.\n   * - When it is a string and is the name of a state, or when it is a State object,\n   *   that state and any children states will be reloaded.\n   *\n   * @default `false`\n   */\n  reload      ?: (boolean|string|StateDeclaration|StateObject);\n  /**\n   * You can define your own Transition Options inside this property and use them, e.g., from a Transition Hook\n   */\n  custom      ?: any;\n  /** @internalapi */\n  reloadState ?: (StateObject);\n  /** @internalapi\n   * If this transition is a redirect, this property should be the original Transition (which was redirected to this one)\n   */\n  redirectedFrom?: Transition;\n  /** @internalapi */\n  current     ?: () => Transition;\n  /** @internalapi */\n  source      ?: \"sref\" | \"url\" | \"redirect\" | \"otherwise\" | \"unknown\";\n}\n\n/** @internalapi */\nexport interface TransitionHookOptions {\n  current             ?: () => Transition;  //path?\n  transition          ?: Transition;\n  hookType            ?: string;\n  target              ?: any;\n  traceData           ?: any;\n  bind                ?: any;\n  stateHook           ?: boolean;\n}\n\n/**\n * TreeChanges encapsulates the various Paths that are involved in a Transition.\n *\n * Get a TreeChanges object using [[Transition.treeChanges]]\n *\n * A UI-Router Transition is from one Path in a State Tree to another Path.  For a given Transition,\n * this object stores the \"to\" and \"from\" paths, as well as subsets of those: the \"retained\",\n * \"exiting\" and \"entering\" paths.\n *\n * Each path in TreeChanges is an array of [[PathNode]] objects. Each PathNode in the array corresponds to a portion\n * of a nested state.\n *\n * For example, if you had a nested state named `foo.bar.baz`, it would have three\n * portions, `foo, bar, baz`.  If you transitioned **to** `foo.bar.baz` and inspected the [[TreeChanges.to]]\n * Path, you would find a node in the array for each portion: `foo`, `bar`, and `baz`.\n *\n * ---\n *\n * @todo show visual state tree\n */\nexport interface TreeChanges {\n  /** @nodoc */\n  [key: string]: PathNode[];\n\n  /** The path of nodes in the state tree that the transition is coming *from* */\n  from: PathNode[];\n\n  /** The path of nodes in the state tree that the transition is going *to* */\n  to: PathNode[];\n\n  /**\n   * The path of active nodes that the transition is retaining.\n   *\n   * These nodes are neither exited, nor entered.\n   * Before and after the transition is successful, these nodes are active.\n   */\n  retained: PathNode[];\n\n  /**\n   * The path of previously active nodes that the transition is exiting.\n   *\n   * After the Transition is successful, these nodes are no longer active.\n   *\n   * Note that a state that is being reloaded (due to parameter values changing, or `reload: true`) may be in both the\n   * `exiting` and `entering` paths.\n   */\n  exiting: PathNode[];\n\n  /**\n   * The path of nodes that the transition is entering.\n   *\n   * After the Transition is successful, these nodes will be active.\n   * Because they are entering, they have their resolves fetched, `onEnter` hooks run, and their views\n   * (component(s) or controller(s)+template(s)) refreshed.\n   *\n   * Note that a state that is reloaded (due to parameter values changing, or `reload: true`) may be in both the\n   * `exiting` and `entering` paths.\n   */\n  entering: PathNode[];\n}\n\nexport type IHookRegistration = (matchCriteria: HookMatchCriteria, callback: HookFn, options?: HookRegOptions) => Function;\n\n/**\n * The signature for Transition Hooks.\n *\n * Transition hooks are callback functions that hook into the lifecycle of transitions.\n * As a transition runs, it reaches certain lifecycle events.\n * As each event occurs, the hooks which are registered for the event are called (in priority order).\n *\n * A transition hook may alter a Transition by returning a [[HookResult]].\n *\n * #### See:\n *\n * - [[IHookRegistry.onBefore]]\n * - [[IHookRegistry.onStart]]\n * - [[IHookRegistry.onFinish]]\n * - [[IHookRegistry.onSuccess]]\n * - [[IHookRegistry.onError]]\n *\n * @param transition the current [[Transition]]\n * @param injector (for ng1 or ng2 only) the injector service\n *\n * @returns a [[HookResult]] which may alter the transition\n *\n */\nexport interface TransitionHookFn {\n  (transition: Transition) : HookResult;\n}\n\n/**\n * The signature for Transition State Hooks.\n *\n * A function which hooks into a lifecycle event for a specific state.\n *\n * Transition State Hooks are callback functions that hook into the lifecycle events of specific states during a transition.\n * As a transition runs, it may exit some states, retain (keep) states, and enter states.\n * As each lifecycle event occurs, the hooks which are registered for the event and that state are called (in priority order).\n *\n * #### See:\n *\n * - [[IHookRegistry.onExit]]\n * - [[IHookRegistry.onRetain]]\n * - [[IHookRegistry.onEnter]]\n *\n * @param transition the current [[Transition]]\n * @param state the [[StateObject]] that the hook is bound to\n * @param injector (for ng1 or ng2 only) the injector service\n *\n * @returns a [[HookResult]] which may alter the transition\n */\nexport interface TransitionStateHookFn {\n  (transition: Transition, state: StateDeclaration) : HookResult;\n}\n\n/**\n * The signature for Transition onCreate Hooks.\n *\n * Transition onCreate Hooks are callbacks that allow customization or preprocessing of\n * a Transition before it is returned from [[TransitionService.create]]\n *\n * @param transition the [[Transition]] that was just created\n * @return a [[Transition]] which will then be returned from [[TransitionService.create]]\n */\nexport interface TransitionCreateHookFn {\n  (transition: Transition): void;\n}\n\nexport type HookFn = (TransitionHookFn|TransitionStateHookFn|TransitionCreateHookFn);\n\n/**\n * The return value of a [[TransitionHookFn]] or [[TransitionStateHookFn]]\n *\n * When returned from a [[TransitionHookFn]] or [[TransitionStateHookFn]], these values alter the running [[Transition]]:\n *\n * - `false`: the transition will be cancelled.\n * - [[TargetState]]: the transition will be redirected to the new target state (see: [[StateService.target]])\n * - `Promise`: the transition will wait for the promise to resolve or reject\n *    - If the promise is rejected (or resolves to `false`), the transition will be cancelled\n *    - If the promise resolves to a [[TargetState]], the transition will be redirected\n *    - If the promise resolves to anything else, the transition will resume\n * - Anything else: the transition will resume\n */\nexport type HookResult = (boolean | TargetState | void | Promise<boolean|TargetState|void>);\n\n/**\n * These options may be provided when registering a Transition Hook (such as `onStart`)\n */\nexport interface HookRegOptions {\n  /**\n   * Sets the priority of the registered hook\n   *\n   * Hooks of the same type (onBefore, onStart, etc) are invoked in priority order.  A hook with a higher priority\n   * is invoked before a hook with a lower priority.\n   *\n   * The default hook priority is 0\n   */\n  priority?: number;\n\n  /**\n   * Specifies what `this` is bound to during hook invocation.\n   */\n  bind?: any;\n}\n\n/**\n * This interface specifies the api for registering Transition Hooks.  Both the\n * [[TransitionService]] and also the [[Transition]] object itself implement this interface.\n * Note: the Transition object only allows hooks to be registered before the Transition is started.\n */\nexport interface IHookRegistry {\n  /**\n   * Registers a [[TransitionHookFn]], called *before a transition starts*.\n   *\n   * Registers a transition lifecycle hook, which is invoked before a transition even begins.\n   * This hook can be useful to implement logic which prevents a transition from even starting, such\n   * as authentication, redirection\n   *\n   * See [[TransitionHookFn]] for the signature of the function.\n   *\n   * The [[HookMatchCriteria]] is used to determine which Transitions the hook should be invoked for.\n   * To match all Transitions, use an empty criteria object `{}`.\n   *\n   * ### Lifecycle\n   *\n   * `onBefore` hooks are invoked *before a Transition starts*.\n   * No resolves have been fetched yet.\n   * Each `onBefore` hook is invoked synchronously, in the same call stack as [[StateService.transitionTo]].\n   * The registered `onBefore` hooks are invoked in priority order.\n   *\n   * Note: during the `onBefore` phase, additional hooks can be added to the specific [[Transition]] instance.\n   * These \"on-the-fly\" hooks only affect the currently running transition..\n   *\n   * ### Return value\n   *\n   * The hook's return value can be used to pause, cancel, or redirect the current Transition.\n   * See [[HookResult]] for more information.\n   *\n   * If any hook modifies the transition *synchronously* (by throwing, returning `false`, or returning\n   * a [[TargetState]]), the remainder of the hooks are skipped.\n   * If a hook returns a promise, the remainder of the `onBefore` hooks are still invoked synchronously.\n   * All promises are resolved, and processed asynchronously before the `onStart` phase of the Transition.\n   *\n   * ### Examples\n   *\n   * #### Default Substate\n   *\n   * This example redirects any transition from 'home' to 'home.dashboard'.  This is commonly referred to as a\n   * \"default substate\".\n   *\n   * @example\n   * ```js\n   * // ng2\n   * transitionService.onBefore({ to: 'home' }, (trans: Transition) =>\n   *     trans.router.stateService.target(\"home.dashboard\"));\n   * ```\n   *\n   * #### Data Driven Default Substate\n   *\n   * This example provides data-driven default substate functionality. It matches on a transition to any state\n   * which has `defaultSubstate: \"some.sub.state\"` defined.  See: [[Transition.to]] which returns the \"to state\"\n   * definition.\n   *\n   * @example\n   * ```js\n   * // ng1\n   * // state declaration\n   * {\n   *   name: 'home',\n   *   template: '<div ui-view/>',\n   *   defaultSubstate: 'home.dashboard'\n   * }\n   *\n   * var criteria = {\n   *   to: function(state) {\n   *     return state.defaultSubstate != null;\n   *   }\n   * }\n   *\n   * $transitions.onBefore(criteria, function(trans: Transition) {\n   *   var substate = trans.to().defaultSubstate;\n   *   return trans.router.stateService.target(substate);\n   * });\n   * ```\n   *\n   *\n   * #### Require authentication\n   *\n   * This example cancels a transition to a state which requires authentication, if the user is not currently authenticated.\n   *\n   * This example assumes a state tree where all states which require authentication are children of a parent `'requireauth'` state.\n   * This example assumes `MyAuthService` synchronously returns a boolean from `isAuthenticated()`.\n   *\n   * #### Example:\n   * ```js\n   * // ng1\n   * $transitions.onBefore( { to: 'requireauth.**' }, function(trans) {\n   *   var myAuthService = trans.injector().get('MyAuthService');\n   *   // If isAuthenticated returns false, the transition is cancelled.\n   *   return myAuthService.isAuthenticated();\n   * });\n   * ```\n   *\n   * @param matchCriteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be invoked.\n   * @returns a function which deregisters the hook.\n   */\n  onBefore(matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function;\n\n  /**\n   * Registers a [[TransitionHookFn]], called when a transition starts.\n   *\n   * Registers a transition lifecycle hook, which is invoked as a transition starts running.\n   * This hook can be useful to perform some asynchronous action before completing a transition.\n   *\n   * See [[TransitionHookFn]] for the signature of the function.\n   *\n   * The [[HookMatchCriteria]] is used to determine which Transitions the hook should be invoked for.\n   * To match all Transitions, use an empty criteria object `{}`.\n   *\n   * ### Lifecycle\n   *\n   * `onStart` hooks are invoked asynchronously when the Transition starts running.\n   * This happens after the `onBefore` phase is complete.\n   * At this point, the Transition has not yet exited nor entered any states.\n   * The registered `onStart` hooks are invoked in priority order.\n   *\n   * Note: A built-in `onStart` hook with high priority is used to fetch any eager resolve data.\n   *\n   * ### Return value\n   *\n   * The hook's return value can be used to pause, cancel, or redirect the current Transition.\n   * See [[HookResult]] for more information.\n   *\n   * ### Example\n   *\n   * #### Login during transition\n   *\n   * This example intercepts any transition to a state which requires authentication, when the user is\n   * not currently authenticated.  It allows the user to authenticate asynchronously, then resumes the\n   * transition.  If the user did not authenticate successfully, it redirects to the \"guest\" state, which\n   * does not require authentication.\n   *\n   * This example assumes:\n   * - a state tree where all states which require authentication are children of a parent `'auth'` state.\n   * - `MyAuthService.isAuthenticated()` synchronously returns a boolean.\n   * - `MyAuthService.authenticate()` presents a login dialog, and returns a promise which is resolved\n   *   or rejected, whether or not the login attempt was successful.\n   *\n   * #### Example:\n   * ```js\n   * // ng1\n   * $transitions.onStart( { to: 'auth.**' }, function(trans) {\n   *   var $state = trans.router.stateService;\n   *   var MyAuthService = trans.injector().get('MyAuthService');\n   *\n   *   // If the user is not authenticated\n   *   if (!MyAuthService.isAuthenticated()) {\n   *\n   *     // Then return a promise for a successful login.\n   *     // The transition will wait for this promise to settle\n   *\n   *     return MyAuthService.authenticate().catch(function() {\n   *\n   *       // If the authenticate() method failed for whatever reason,\n   *       // redirect to a 'guest' state which doesn't require auth.\n   *       return $state.target(\"guest\");\n   *     });\n   *   }\n   * });\n   * ```\n   *\n   * @param matchCriteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be injected and invoked.\n   * @returns a function which deregisters the hook.\n   */\n  onStart(matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function;\n\n  /**\n   * Registers a [[TransitionStateHookFn]], called when a specific state is entered.\n   *\n   * Registers a lifecycle hook, which is invoked (during a transition) when a specific state is being entered.\n   *\n   * Since this hook is run only when the specific state is being *entered*, it can be useful for\n   * performing tasks when entering a submodule/feature area such as initializing a stateful service, \n   * or for guarding access to a submodule/feature area.\n   *\n   * See [[TransitionStateHookFn]] for the signature of the function.\n   *\n   * The [[HookMatchCriteria]] is used to determine which Transitions the hook should be invoked for.\n   * `onEnter` hooks generally specify `{ entering: 'somestate' }`.\n   * To match all Transitions, use an empty criteria object `{}`.\n   *\n   * ### Lifecycle\n   *\n   * `onEnter` hooks are invoked when the Transition is entering a state.\n   * States are entered after the `onRetain` phase is complete.\n   * If more than one state is being entered, the parent state is entered first.\n   * The registered `onEnter` hooks for a state are invoked in priority order.\n   *\n   * Note: A built-in `onEnter` hook with high priority is used to fetch lazy resolve data for states being entered.\n   *\n   * ### Return value\n   *\n   * The hook's return value can be used to pause, cancel, or redirect the current Transition.\n   * See [[HookResult]] for more information.\n   *\n   * ### Inside a state declaration\n   *\n   * Instead of registering `onEnter` hooks using the [[TransitionService]], you may define an `onEnter` hook\n   * directly on a state declaration (see: [[StateDeclaration.onEnter]]).\n   * \n   *\n   * ### Examples\n   *\n   * #### Audit Log\n   *\n   * This example uses a service to log that a user has entered the admin section of an app.\n   * This assumes that there are substates of the \"admin\" state, such as \"admin.users\", \"admin.pages\", etc.\n   * @example\n   * ```\n   *\n   * $transitions.onEnter({ entering: 'admin' }, function(transition, state) {\n   *   var AuditService = trans.injector().get('AuditService');\n   *   AuditService.log(\"Entered \" + state.name + \" module while transitioning to \" + transition.to().name);\n   * }\n   * ```\n   *\n   * #### Audit Log (inside a state declaration)\n   *\n   * The `onEnter` inside this state declaration is syntactic sugar for the previous Audit Log example.\n   * ```\n   * {\n   *   name: 'admin',\n   *   component: 'admin',\n   *   onEnter: function($transition$, $state$) {\n   *     var AuditService = $transition$.injector().get('AuditService');\n   *     AuditService.log(\"Entered \" + state.name + \" module while transitioning to \" + transition.to().name);\n   *   }\n   * }\n   * ```\n   *\n   * Note: A state declaration's `onEnter` function is injected for Angular 1 only.\n   *\n   * @param matchCriteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be injected and invoked.\n   * @returns a function which deregisters the hook.\n   */\n  onEnter(matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function;\n\n  /**\n   * Registers a [[TransitionStateHookFn]], called when a specific state is retained/kept.\n   *\n   * Registers a lifecycle hook, which is invoked (during a transition) for\n   * a specific state that was previously active will remain active (is not being entered nor exited).\n   * \n   * This hook is invoked when a state is \"retained\" or \"kept\".\n   * It means the transition is coming *from* a substate of the retained state *to* a substate of the retained state.\n   * This hook can be used to perform actions when the user moves from one substate to another, such as between steps in a wizard.\n   *\n   * The [[HookMatchCriteria]] is used to determine which Transitions the hook should be invoked for.\n   * `onRetain` hooks generally specify `{ retained: 'somestate' }`.\n   * To match all Transitions, use an empty criteria object `{}`.\n   *\n   * ### Lifecycle\n   *\n   * `onRetain` hooks are invoked after any `onExit` hooks have been fired.\n   * If more than one state is retained, the child states' `onRetain` hooks are invoked first.\n   * The registered `onRetain` hooks for a state are invoked in priority order.\n   *\n   * ### Return value\n   *\n   * The hook's return value can be used to pause, cancel, or redirect the current Transition.\n   * See [[HookResult]] for more information.\n   *\n   * ### Inside a state declaration\n   *\n   * Instead of registering `onRetain` hooks using the [[TransitionService]], you may define an `onRetain` hook\n   * directly on a state declaration (see: [[StateDeclaration.onRetain]]).\n   *\n   * Note: A state declaration's `onRetain` function is injected for Angular 1 only.\n   *\n   * @param matchCriteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be injected and invoked.\n   * @returns a function which deregisters the hook.\n   */\n  onRetain(matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function;\n\n  /**\n   * Registers a [[TransitionStateHookFn]], called when a specific state is exited.\n   *\n   * Registers a lifecycle hook, which is invoked (during a transition) when a specific state is being exited.\n   *\n   * Since this hook is run only when the specific state is being *exited*, it can be useful for\n   * performing tasks when leaving a submodule/feature area such as cleaning up a stateful service, \n   * or for preventing the user from leaving a state or submodule until some criteria is satisfied.\n   *\n   * See [[TransitionStateHookFn]] for the signature of the function.\n   *\n   * The [[HookMatchCriteria]] is used to determine which Transitions the hook should be invoked for.\n   * `onExit` hooks generally specify `{ exiting: 'somestate' }`.\n   * To match all Transitions, use an empty criteria object `{}`.\n   *\n   * ### Lifecycle\n   *\n   * `onExit` hooks are invoked when the Transition is exiting a state.\n   * States are exited after any `onStart` phase is complete.\n   * If more than one state is being exited, the child states are exited first.\n   * The registered `onExit` hooks for a state are invoked in priority order.\n   *\n   * ### Return value\n   *\n   * The hook's return value can be used to pause, cancel, or redirect the current Transition.\n   * See [[HookResult]] for more information.\n   *\n   * ### Inside a state declaration\n   *\n   * Instead of registering `onExit` hooks using the [[TransitionService]], you may define an `onExit` hook\n   * directly on a state declaration (see: [[StateDeclaration.onExit]]).\n   *\n   * Note: A state declaration's `onExit` function is injected for Angular 1 only.\n   *\n   * @param matchCriteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be injected and invoked.\n   * @returns a function which deregisters the hook.\n   */\n  onExit(matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function;\n\n  /**\n   * Registers a [[TransitionHookFn]], called *just before a transition finishes*.\n   *\n   * Registers a transition lifecycle hook, which is invoked just before a transition finishes.\n   * This hook is a last chance to cancel or redirect a transition.\n   *\n   * See [[TransitionHookFn]] for the signature of the function.\n   *\n   * The [[HookMatchCriteria]] is used to determine which Transitions the hook should be invoked for.\n   * To match all Transitions, use an empty criteria object `{}`.\n   *\n   * ### Lifecycle\n   *\n   * `onFinish` hooks are invoked after the `onEnter` phase is complete.\n   * These hooks are invoked just before the transition is \"committed\".\n   * Each hook is invoked in priority order.\n   *\n   * ### Return value\n   *\n   * The hook's return value can be used to pause, cancel, or redirect the current Transition.\n   * See [[HookResult]] for more information.\n   *\n   * @param matchCriteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be injected and invoked.\n   * @returns a function which deregisters the hook.\n   */\n  onFinish(matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function;\n\n  /**\n   * Registers a [[TransitionHookFn]], called after a successful transition completed.\n   *\n   * Registers a transition lifecycle hook, which is invoked after a transition successfully completes.\n   *\n   * See [[TransitionHookFn]] for the signature of the function.\n   *\n   * The [[HookMatchCriteria]] is used to determine which Transitions the hook should be invoked for.\n   * To match all Transitions, use an empty criteria object `{}`.\n   *\n   * ### Lifecycle\n   *\n   * `onSuccess` hooks are chained off the Transition's promise (see [[Transition.promise]]).\n   * If the Transition is successful and its promise is resolved, then the `onSuccess` hooks are invoked.\n   * Since these hooks are run after the transition is over, their return value is ignored.\n   * The `onSuccess` hooks are invoked in priority order.\n   *\n   * ### Return value\n   *\n   * Since the Transition is already completed, the hook's return value is ignored\n   *\n   * @param matchCriteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be injected and invoked.\n   * @returns a function which deregisters the hook.\n   */\n  onSuccess(matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function;\n\n  /**\n   * Registers a [[TransitionHookFn]], called after a transition has errored.\n   *\n   * Registers a transition lifecycle hook, which is invoked after a transition has been rejected for any reason.\n   *\n   * See [[TransitionHookFn]] for the signature of the function.\n   *\n   * The [[HookMatchCriteria]] is used to determine which Transitions the hook should be invoked for.\n   * To match all Transitions, use an empty criteria object `{}`.\n   *\n   * ### Lifecycle\n   *\n   * The `onError` hooks are chained off the Transition's promise (see [[Transition.promise]]).\n   * If a Transition fails, its promise is rejected and the `onError` hooks are invoked.\n   * The `onError` hooks are invoked in priority order.\n   *\n   * Since these hooks are run after the transition is over, their return value is ignored.\n   *\n   * A transition \"errors\" if it was started, but failed to complete (for any reason).\n   * A *non-exhaustive list* of reasons a transition can error:\n   *\n   * - A transition was cancelled because a new transition started while it was still running (`Transition superseded`)\n   * - A transition was cancelled by a Transition Hook returning false\n   * - A transition was redirected by a Transition Hook returning a [[TargetState]]\n   * - A Transition Hook or resolve function threw an error\n   * - A Transition Hook returned a rejected promise\n   * - A resolve function returned a rejected promise\n   *\n   * To check the failure reason, inspect the return value of [[Transition.error]].\n   * \n   * Note: `onError` should be used for targeted error handling, or error recovery.\n   * For simple catch-all error reporting, use [[StateService.defaultErrorHandler]].\n   *\n   * ### Return value\n   *\n   * Since the Transition is already completed, the hook's return value is ignored\n   *\n   * @param matchCriteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be injected and invoked.\n   * @returns a function which deregisters the hook.\n   */\n  onError(matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function;\n\n  /**\n   * Returns all the registered hooks of a given `hookName` type\n   *\n   * #### Example:\n   * ```\n   * $transitions.getHooks(\"onEnter\")\n   * ```\n   */\n  getHooks(hookName: string): RegisteredHook[];\n\n  /** @hidden place to store the hooks */\n  _registeredHooks: { [key: string]: RegisteredHook[] };\n}\n\n/** A predicate type which tests if a [[StateDeclaration]] passes some test. Returns a boolean. */\nexport type IStateMatch = Predicate<StateDeclaration>\n\n/**\n * This object is used to configure whether or not a Transition Hook is invoked for a particular transition,\n * based on the Transition's \"to state\" and \"from state\".\n *\n * Each property (`to`, `from`, `exiting`, `retained`, and `entering`) can be a state [[Glob]] string,\n * a boolean, or a function that takes a state and returns a boolean (see [[HookMatchCriterion]])\n *\n * All properties are optional.  If any property is omitted, it is replaced with the value `true`, and always matches.\n * To match any transition, use an empty criteria object `{}`.\n *\n * #### Example:\n * ```js\n * // This matches a transition coming from the `parent` state and going to the `parent.child` state.\n * var match = {\n *   to: 'parent',\n *   from: 'parent.child'\n * }\n * ```\n *\n * #### Example:\n * ```js\n * // This matches a transition coming from any substate of `parent` and going directly to the `parent` state.\n * var match = {\n *   to: 'parent',\n *   from: 'parent.**'\n * }\n * ```\n *\n * #### Example:\n * ```js\n * // This matches a transition coming from any state and going to any substate of `mymodule`\n * var match = {\n *   to: 'mymodule.**'\n * }\n * ```\n *\n * #### Example:\n * ```js\n * // This matches a transition coming from any state and going to any state that has `data.authRequired`\n * // set to a truthy value.\n * var match = {\n *   to: function(state) {\n *     return state.data != null && state.data.authRequired === true;\n *   }\n * }\n * ```\n *\n * #### Example:\n * ```js\n * // This matches a transition that is exiting `parent.child`\n * var match = {\n *   exiting: 'parent.child'\n * }\n * ```\n */\nexport interface HookMatchCriteria {\n  [key: string]: HookMatchCriterion;\n\n  /** A [[HookMatchCriterion]] to match the destination state */\n  to?: HookMatchCriterion | undefined;\n  /** A [[HookMatchCriterion]] to match the original (from) state */\n  from?: HookMatchCriterion | undefined;\n  /** A [[HookMatchCriterion]] to match any state that would be exiting */\n  exiting?: HookMatchCriterion | undefined;\n  /** A [[HookMatchCriterion]] to match any state that would be retained */\n  retained?: HookMatchCriterion | undefined;\n  /** A [[HookMatchCriterion]] to match any state that would be entering */\n  entering?: HookMatchCriterion | undefined;\n}\n\nexport interface IMatchingNodes {\n  [key: string]: PathNode[];\n\n  to: PathNode[];\n  from: PathNode[];\n  exiting: PathNode[];\n  retained: PathNode[];\n  entering: PathNode[];\n}\n\n/** @hidden */\nexport interface RegisteredHooks {\n  [key: string]: RegisteredHook[];\n}\n\n/** @hidden */\nexport interface PathTypes {\n  [key: string]: PathType;\n\n  to: PathType;\n  from: PathType;\n  exiting: PathType;\n  retained: PathType;\n  entering: PathType;\n}\n\n/** @hidden */\nexport interface PathType {\n  name: string;\n  scope: TransitionHookScope;\n}\n\n/**\n * Hook Criterion used to match a transition.\n *\n * A [[Glob]] string that matches the name of a state.\n *\n * Or, a function with the signature `function(state) { return matches; }`\n * which should return a boolean to indicate if a state matches.\n *\n * Or, `true` to always match\n */\nexport type HookMatchCriterion = (string|IStateMatch|boolean)\nexport type TransitionHookPhase = number;\nexport let TransitionHookPhase: any = {};\nTransitionHookPhase.CREATE = 0;\nTransitionHookPhase.BEFORE = 1;\nTransitionHookPhase.RUN = 2;\nTransitionHookPhase.SUCCESS = 3;\nTransitionHookPhase.ERROR = 4;\nTransitionHookPhase[TransitionHookPhase.CREATE] = \"CREATE\";\nTransitionHookPhase[TransitionHookPhase.BEFORE] = \"BEFORE\";\nTransitionHookPhase[TransitionHookPhase.RUN] = \"RUN\";\nTransitionHookPhase[TransitionHookPhase.SUCCESS] = \"SUCCESS\";\nTransitionHookPhase[TransitionHookPhase.ERROR] = \"ERROR\";\n\nexport type TransitionHookScope = number;\nexport let TransitionHookScope: any = {};\nTransitionHookScope.TRANSITION = 0;\nTransitionHookScope.STATE = 1;\nTransitionHookScope[TransitionHookScope.TRANSITION] = \"TRANSITION\";\nTransitionHookScope[TransitionHookScope.STATE] = \"STATE\";\n\n","/**\n * # Transition tracing (debug)\n *\n * Enable transition tracing to print transition information to the console,\n * in order to help debug your application.\n * Tracing logs detailed information about each Transition to your console.\n *\n * To enable tracing, import the [[Trace]] singleton and enable one or more categories.\n *\n * ### ES6\n * ```js\n * import {trace} from \"ui-router-ng2\"; // or \"angular-ui-router\"\n * trace.enable(1, 5); // TRANSITION and VIEWCONFIG\n * ```\n *\n * ### CJS\n * ```js\n * let trace = require(\"angular-ui-router\").trace; // or \"ui-router-ng2\"\n * trace.enable(\"TRANSITION\", \"VIEWCONFIG\");\n * ```\n *\n * ### Globals\n * ```js\n * let trace = window[\"angular-ui-router\"].trace; // or \"ui-router-ng2\"\n * trace.enable(); // Trace everything (very verbose)\n * ```\n *\n * ### Angular 1:\n * ```js\n * app.run($trace => $trace.enable());\n * ```\n *\n * @coreapi\n * @module trace\n */ /** for typedoc */\n\nimport {parse} from '../common/hof';\nimport {isNumber} from '../common/predicates';\nimport {Transition} from '../transition/transition';\nimport {ActiveUIView, ViewConfig, ViewContext} from '../view/interface';\nimport {stringify, functionToString, maxLength, padString} from './strings';\nimport {Resolvable} from '../resolve/resolvable';\nimport {PathNode} from '../path/pathNode';\nimport {PolicyWhen} from '../resolve/interface';\nimport {TransitionHook} from '../transition/transitionHook';\nimport {HookResult} from '../transition/interface';\nimport {StateObject} from '../state/stateObject';\n/**\n * @hidden\n * @param {?} uiview\n * @return {?}\n */\nfunction uiViewString (uiview: ActiveUIView) {\n    if (!uiview) return 'ui-view (defunct)';\n    const /** @type {?} */ state = uiview.creationContext ? uiview.creationContext.name || '(root)' : '(none)';\n    return `[ui-view#${uiview.id} ${uiview.$type}:${uiview.fqn} (${uiview.name}@${state})]`;\n}\n/**\n * @hidden\n */\nconst viewConfigString = (viewConfig: ViewConfig) => {\n  let view = viewConfig.viewDecl;\n  const state = view.$context.name || '(root)';\n  return `[View#${viewConfig.$id} from '${state}' state]: target ui-view: '${view.$uiViewName}@${view.$uiViewContextAnchor}'`;\n};\n/**\n * @hidden\n * @param {?} input\n * @return {?}\n */\nfunction normalizedCat(input: Category|string): string {\n  return isNumber(input) ? Category[input] : Category[Category[input]];\n}\nexport type Category = number;\nexport let Category: any = {};\nCategory.RESOLVE = 0;\nCategory.TRANSITION = 1;\nCategory.HOOK = 2;\nCategory.UIVIEW = 3;\nCategory.VIEWCONFIG = 4;\nCategory[Category.RESOLVE] = \"RESOLVE\";\nCategory[Category.TRANSITION] = \"TRANSITION\";\nCategory[Category.HOOK] = \"HOOK\";\nCategory[Category.UIVIEW] = \"UIVIEW\";\nCategory[Category.VIEWCONFIG] = \"VIEWCONFIG\";\n\n/**\n * @hidden\n */\nconst _tid = parse(\"$id\");\n/**\n * @hidden\n */\nconst _rid = parse(\"router.$id\");\n/**\n * @hidden\n */\nconst transLbl = (trans) => `Transition #${_tid(trans)}-${_rid(trans)}`;\n/**\n * Prints UI-Router Transition trace information to the console.\n */\nexport class Trace {\n/**\n * @hidden\n */\napproximateDigests: number;\n/**\n * @hidden\n */\nconstructor() {\n    this.approximateDigests = 0;\n  }\n/**\n * @hidden\n */\nprivate _enabled: { [key: string]: boolean } = {};\n/**\n * @hidden\n * @param {?} enabled\n * @param {?} categories\n * @return {?}\n */\nprivate _set(enabled: boolean, categories: Category[]) {\n    if (!categories.length) {\n      categories = /** @type {?} */(( <any> Object.keys(Category)\n          .map(k => parseInt(k, 10))\n          .filter(k => !isNaN(k))\n          .map(key => Category[key])));\n    }\n    categories.map(normalizedCat).forEach(category => this._enabled[category] = enabled);\n  }\n\n  /**\n   * Enables a trace [[Category]]\n   *\n   * ```js\n   * trace.enable(\"TRANSITION\");\n   * ```\n   *\n   * @param categories categories to enable. If `categories` is omitted, all categories are enabled.\n   *        Also takes strings (category name) or ordinal (category position)\n   */\n  enable(...categories: (Category|string|number)[]);\n/**\n * @param {...?} categories\n * @return {?}\n */\nenable(...categories: any[]) { this._set(true, categories); }\n  /**\n   * Disables a trace [[Category]]\n   *\n   * ```js\n   * trace.disable(\"VIEWCONFIG\");\n   * ```\n   *\n   * @param categories categories to disable. If `categories` is omitted, all categories are disabled.\n   *        Also takes strings (category name) or ordinal (category position)\n   */\n  disable(...categories: (Category|string|number)[]);\n/**\n * @param {...?} categories\n * @return {?}\n */\ndisable(...categories: any[]) { this._set(false, categories); }\n/**\n * Retrieves the enabled stateus of a [[Category]]\n * \n * ```js\n * trace.enabled(\"VIEWCONFIG\"); // true or false\n * ```\n * \n * @param {?} category\n * @return {?} boolean true if the category is enabled\n */\nenabled(category: (Category|string|number)): boolean {\n    return !!this._enabled[normalizedCat(category)];\n  }\n/**\n * \\@internalapi called by ui-router code\n * @param {?} trans\n * @return {?}\n */\ntraceTransitionStart(trans: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    console.log(`${transLbl(trans)}: Started  -> ${stringify(trans)}`);\n  }\n/**\n * \\@internalapi called by ui-router code\n * @param {?} trans\n * @return {?}\n */\ntraceTransitionIgnored(trans: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    console.log(`${transLbl(trans)}: Ignored  <> ${stringify(trans)}`);\n  }\n/**\n * \\@internalapi called by ui-router code\n * @param {?} step\n * @param {?} trans\n * @param {?} options\n * @return {?}\n */\ntraceHookInvocation(step: TransitionHook, trans: Transition, options: any) {\n    if (!this.enabled(Category.HOOK)) return;\n    let /** @type {?} */ event = parse(\"traceData.hookType\")(options) || \"internal\", /** @type {?} */\n        context = parse(\"traceData.context.state.name\")(options) || parse(\"traceData.context\")(options) || \"unknown\", /** @type {?} */\n        name = functionToString(( /** @type {?} */((step as any))).registeredHook.callback);\n    console.log(`${transLbl(trans)}:   Hook -> ${event} context: ${context}, ${maxLength(200, name)}`);\n  }\n/**\n * \\@internalapi called by ui-router code\n * @param {?} hookResult\n * @param {?} trans\n * @param {?} transitionOptions\n * @return {?}\n */\ntraceHookResult(hookResult: HookResult, trans: Transition, transitionOptions: any) {\n    if (!this.enabled(Category.HOOK)) return;\n    console.log(`${transLbl(trans)}:   <- Hook returned: ${maxLength(200, stringify(hookResult))}`);\n  }\n/**\n * \\@internalapi called by ui-router code\n * @param {?} path\n * @param {?} when\n * @param {?=} trans\n * @return {?}\n */\ntraceResolvePath(path: PathNode[], when: PolicyWhen, trans?: Transition) {\n    if (!this.enabled(Category.RESOLVE)) return;\n    console.log(`${transLbl(trans)}:         Resolving ${path} (${when})`);\n  }\n/**\n * \\@internalapi called by ui-router code\n * @param {?} resolvable\n * @param {?=} trans\n * @return {?}\n */\ntraceResolvableResolved(resolvable: Resolvable, trans?: Transition) {\n    if (!this.enabled(Category.RESOLVE)) return;\n    console.log(`${transLbl(trans)}:               <- Resolved  ${resolvable} to: ${maxLength(200, stringify(resolvable.data))}`);\n  }\n/**\n * \\@internalapi called by ui-router code\n * @param {?} reason\n * @param {?} trans\n * @return {?}\n */\ntraceError(reason: any, trans: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    console.log(`${transLbl(trans)}: <- Rejected ${stringify(trans)}, reason: ${reason}`);\n  }\n/**\n * \\@internalapi called by ui-router code\n * @param {?} finalState\n * @param {?} trans\n * @return {?}\n */\ntraceSuccess(finalState: StateObject, trans: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    console.log(`${transLbl(trans)}: <- Success  ${stringify(trans)}, final state: ${finalState.name}`);\n  }\n/**\n * \\@internalapi called by ui-router code\n * @param {?} event\n * @param {?} viewData\n * @param {?=} extra\n * @return {?}\n */\ntraceUIViewEvent(event: string, viewData: ActiveUIView, extra = \"\") {\n    if (!this.enabled(Category.UIVIEW)) return;\n    console.log(`ui-view: ${padString(30, event)} ${uiViewString(viewData)}${extra}`);\n  }\n/**\n * \\@internalapi called by ui-router code\n * @param {?} viewData\n * @param {?} context\n * @return {?}\n */\ntraceUIViewConfigUpdated(viewData: ActiveUIView, context: ViewContext) {\n    if (!this.enabled(Category.UIVIEW)) return;\n    this.traceUIViewEvent(\"Updating\", viewData, ` with ViewConfig from context='${context}'`);\n  }\n/**\n * \\@internalapi called by ui-router code\n * @param {?} viewData\n * @param {?} html\n * @return {?}\n */\ntraceUIViewFill(viewData: ActiveUIView, html: string) {\n    if (!this.enabled(Category.UIVIEW)) return;\n    this.traceUIViewEvent(\"Fill\", viewData, ` with: ${maxLength(200, html)}`);\n  }\n/**\n * \\@internalapi called by ui-router code\n * @param {?} pairs\n * @return {?}\n */\ntraceViewSync(pairs: any[]) {\n    if (!this.enabled(Category.VIEWCONFIG)) return;\n    const /** @type {?} */ mapping = pairs.map(([ uiViewData, config ]) => {\n      const /** @type {?} */ uiView = `${uiViewData.$type}:${uiViewData.fqn}`;\n      const /** @type {?} */ view = config && `${config.viewDecl.$context.name}: ${config.viewDecl.$name} (${config.viewDecl.$type})`;\n\n      return { 'ui-view fqn': uiView, 'state: view name': view };\n    }).sort((a, b) => a['ui-view fqn'].localeCompare(b['ui-view fqn']));\n\n    console.table(mapping);\n  }\n/**\n * \\@internalapi called by ui-router code\n * @param {?} event\n * @param {?} viewConfig\n * @return {?}\n */\ntraceViewServiceEvent(event: string, viewConfig: ViewConfig) {\n    if (!this.enabled(Category.VIEWCONFIG)) return;\n    console.log(`VIEWCONFIG: ${event} ${viewConfigString(viewConfig)}`);\n  }\n/**\n * \\@internalapi called by ui-router code\n * @param {?} event\n * @param {?} viewData\n * @return {?}\n */\ntraceViewServiceUIViewEvent(event: string, viewData: ActiveUIView) {\n    if (!this.enabled(Category.VIEWCONFIG)) return;\n    console.log(`VIEWCONFIG: ${event} ${uiViewString(viewData)}`);\n  }\n}\n\nfunction Trace_tsickle_Closure_declarations() {\n/**\n * @hidden\n * @type {?}\n */\nTrace.prototype.approximateDigests;\n/**\n * @hidden\n * @type {?}\n */\nTrace.prototype._enabled;\n}\n\n/**\n * The [[Trace]] singleton\n * \n * #### Example:\n * ```js\n * import {trace} from \"angular-ui-router\";\n * trace.enable(1, 5);\n * ```\n */\nlet trace = new Trace();\nexport {trace};\n","/**\n * @coreapi\n * @module transition\n */ /** for typedoc */\n\"use strict\";\nimport {extend, silentRejection} from '../common/common';\nimport {stringify} from '../common/strings';\nimport { is } from '../common/hof';\nexport type RejectType = number;\nexport let RejectType: any = {};\nRejectType.SUPERSEDED = 2;\nRejectType.ABORTED = 3;\nRejectType.INVALID = 4;\nRejectType.IGNORED = 5;\nRejectType.ERROR = 6;\nRejectType[RejectType.SUPERSEDED] = \"SUPERSEDED\";\nRejectType[RejectType.ABORTED] = \"ABORTED\";\nRejectType[RejectType.INVALID] = \"INVALID\";\nRejectType[RejectType.IGNORED] = \"IGNORED\";\nRejectType[RejectType.ERROR] = \"ERROR\";\n\n/**\n * @hidden\n */\nlet id = 0;\nexport class Rejection {\n  $id = id++;\n  type: number;\n  message: string;\n  detail: any;\n  redirected: boolean;\n/**\n * @param {?} type\n * @param {?=} message\n * @param {?=} detail\n */\nconstructor(type: number, message?: string, detail?: any) {\n    this.type = type;\n    this.message = message;\n    this.detail = detail;\n  }\n/**\n * @return {?}\n */\ntoString() {\n    const /** @type {?} */ detailString = (d: any) => \n        d && d.toString !== Object.prototype.toString ? d.toString() : stringify(d);\n    let /** @type {?} */ detail = detailString(this.detail);\n    let { $id, type, message } = this;\n    return `Transition Rejection($id: ${$id} type: ${type}, message: ${message}, detail: ${detail})`;\n  }\n/**\n * @return {?}\n */\ntoPromise(): Promise<any> {\n    return extend(silentRejection(this), { _transitionRejection: this });\n  }\n/**\n * Returns true if the obj is a rejected promise created from the `asPromise` factory\n * @param {?} obj\n * @return {?}\n */\nstatic isRejectionPromise(obj: any): boolean {\n    return obj && (typeof obj.then === 'function') && is(Rejection)(obj._transitionRejection);\n  }\n/**\n * Returns a Rejection due to transition superseded\n * @param {?=} detail\n * @param {?=} options\n * @return {?}\n */\nstatic superseded(detail?: any, options?: any): Rejection {\n    let /** @type {?} */ message = \"The transition has been superseded by a different transition\";\n    let /** @type {?} */ rejection = new Rejection(RejectType.SUPERSEDED, message, detail);\n    if (options && options.redirected) {\n      rejection.redirected = true;\n    }\n    return rejection;\n  }\n/**\n * Returns a Rejection due to redirected transition\n * @param {?=} detail\n * @return {?}\n */\nstatic redirected(detail?: any): Rejection {\n    return Rejection.superseded(detail, { redirected: true });\n  }\n/**\n * Returns a Rejection due to invalid transition\n * @param {?=} detail\n * @return {?}\n */\nstatic invalid(detail?: any): Rejection {\n    let /** @type {?} */ message = \"This transition is invalid\";\n    return new Rejection(RejectType.INVALID, message, detail);\n  }\n/**\n * Returns a Rejection due to ignored transition\n * @param {?=} detail\n * @return {?}\n */\nstatic ignored(detail?: any): Rejection {\n    let /** @type {?} */ message = \"The transition was ignored\";\n    return new Rejection(RejectType.IGNORED, message, detail);\n  }\n/**\n * Returns a Rejection due to aborted transition\n * @param {?=} detail\n * @return {?}\n */\nstatic aborted(detail?: any): Rejection {\n    let /** @type {?} */ message = \"The transition has been aborted\";\n    return new Rejection(RejectType.ABORTED, message, detail);\n  }\n/**\n * Returns a Rejection due to aborted transition\n * @param {?=} detail\n * @return {?}\n */\nstatic errored(detail?: any): Rejection {\n    let /** @type {?} */ message = \"The transition errored\";\n    return new Rejection(RejectType.ERROR, message, detail);\n  }\n/**\n * Returns a Rejection\n * \n * Normalizes a value as a Rejection.\n * If the value is already a Rejection, returns it.\n * Otherwise, wraps and returns the value as a Rejection (Rejection type: ERROR).\n * \n * @param {?=} detail\n * @return {?} `detail` if it is already a `Rejection`, else returns an ERROR Rejection.\n */\nstatic normalize(detail?: Rejection | Error | any): Rejection {\n    return is(Rejection)(detail) ? detail : Rejection.errored(detail);\n  }\n}\n\nfunction Rejection_tsickle_Closure_declarations() {\n/** @type {?} */\nRejection.prototype.$id;\n/** @type {?} */\nRejection.prototype.type;\n/** @type {?} */\nRejection.prototype.message;\n/** @type {?} */\nRejection.prototype.detail;\n/** @type {?} */\nRejection.prototype.redirected;\n}\n\n","\n/**\n * for typedoc\n */\nexport class Queue<T> {\n/**\n * @param {?=} _items\n * @param {?=} _limit\n */\nconstructor(private _items: T[] = [],\nprivate _limit: number = null) { }\n/**\n * @param {?} item\n * @return {?}\n */\nenqueue(item: T) {\n    let /** @type {?} */ items = this._items;\n    items.push(item);\n    if (this._limit && items.length > this._limit) items.shift();\n    return item;\n  }\n/**\n * @return {?}\n */\ndequeue(): T {\n    if (this.size())\n      return this._items.splice(0, 1)[0];\n  }\n/**\n * @return {?}\n */\nclear(): Array<T> {\n    let /** @type {?} */ current = this._items;\n    this._items = [];\n    return current;\n  }\n/**\n * @return {?}\n */\nsize(): number {\n    return this._items.length;\n  }\n/**\n * @param {?} item\n * @return {?}\n */\nremove(item: T) {\n    let /** @type {?} */ idx = this._items.indexOf(item);\n    return idx > -1 && this._items.splice(idx, 1)[0];\n  }\n/**\n * @return {?}\n */\npeekTail(): T {\n    return this._items[this._items.length - 1];\n  }\n/**\n * @return {?}\n */\npeekHead(): T {\n    if (this.size())\n      return this._items[0];\n  }\n}\n\nfunction Queue_tsickle_Closure_declarations() {\n/** @type {?} */\nQueue.prototype._items;\n/** @type {?} */\nQueue.prototype._limit;\n}\n\n","/**\n * Random utility functions used in the UI-Router code\n *\n * These functions are exported, but are subject to change without notice.\n *\n * @preferred\n * @module common\n */\n/** for typedoc */\n\nimport { isFunction, isString, isArray, isRegExp, isDate, isDefined } from './predicates';\nimport { all, any, prop, curry, val, not } from './hof';\nimport { services } from './coreservices';\nimport { StateObject } from '../state/stateObject';\n\nlet /** @type {?} */ w: any = typeof window === 'undefined' ? {} : window;\nlet /** @type {?} */ angular = w.angular || {};\nexport const /** @type {?} */ fromJson = angular.fromJson || JSON.parse.bind(JSON);\nexport const /** @type {?} */ toJson = angular.toJson || JSON.stringify.bind(JSON);\nexport const /** @type {?} */ copy = angular.copy || _copy;\nexport const /** @type {?} */ forEach = angular.forEach || _forEach;\nexport const /** @type {?} */ extend = Object.assign || _extend;\nexport const /** @type {?} */ equals = angular.equals || _equals;\n/**\n * @param {?} x\n * @return {?}\n */\nexport function identity(x: any) { return x; }\n/**\n * @return {?}\n */\nexport function noop(): any {}\n\nexport type Mapper<X, T> = (x: X, key?: (string|number)) => T;\nexport interface TypedMap<T> { [key: string]: T; }\nexport type Predicate<X> = (x?: X) => boolean;\n/**\n * An ng1-style injectable\n *\n * This could be a (non-minified) function such as:\n * ```js\n * function injectableFunction(SomeDependency) {\n *\n * }\n * ```\n *\n * or an explicitly annotated function (minify safe)\n * ```js\n * injectableFunction.$inject = [ 'SomeDependency' ];\n * function injectableFunction(SomeDependency) {\n *\n * }\n * ```\n *\n * or an array style annotated function (minify safe)\n * ```js\n * ['SomeDependency', function injectableFunction(SomeDependency) {\n *\n * }];\n * ```\n *\n * @publicapi\n */\nexport type IInjectable = (Function|any[]);\n\nexport interface Obj extends Object {\n  [key: string]: any\n}\n/**\n * Builds proxy functions on the `to` object which pass through to the `from` object.\n * \n * For each key in `fnNames`, creates a proxy function on the `to` object.\n * The proxy function calls the real function on the `from` object.\n * \n * \n * #### Example:\n * This example creates an new class instance whose functions are prebound to the new'd object.\n * ```js\n * class Foo {\n *   constructor(data) {\n *     // Binds all functions from Foo.prototype to 'this',\n *     // then copies them to 'this'\n *     bindFunctions(Foo.prototype, this, this);\n *     this.data = data;\n *   }\n * \n *   log() {\n *     console.log(this.data);\n *   }\n * }\n * \n * let myFoo = new Foo([1,2,3]);\n * var logit = myFoo.log;\n * logit(); // logs [1, 2, 3] from the myFoo 'this' instance\n * ```\n * \n * #### Example:\n * This example creates a bound version of a service function, and copies it to another object\n * ```\n * \n * var SomeService = {\n *   this.data = [3, 4, 5];\n *   this.log = function() {\n *     console.log(this.data);\n *   }\n * }\n * \n * // Constructor fn\n * function OtherThing() {\n *   // Binds all functions from SomeService to SomeService,\n *   // then copies them to 'this'\n *   bindFunctions(SomeService, this, SomeService);\n * }\n * \n * let myOtherThing = new OtherThing();\n * myOtherThing.log(); // logs [3, 4, 5] from SomeService's 'this'\n * ```\n * \n * @param {?} source A function that returns the source object which contains the original functions to be bound\n * @param {?} target A function that returns the target object which will receive the bound functions\n * @param {?} bind A function that returns the object which the functions will be bound to\n * @param {?=} fnNames The function names which will be bound (Defaults to all the functions found on the 'from' object)\n * @param {?=} latebind If true, the binding of the function is delayed until the first time it's invoked\n * @return {?}\n */\nexport function createProxyFunctions(source: Function, target: Obj, bind: Function, fnNames?: string[], latebind = false): Obj {\n  const /** @type {?} */ bindFunction = (fnName) =>\n      source()[fnName].bind(bind());\n\n  const /** @type {?} */ makeLateRebindFn = fnName => function lateRebindFunction() {\n    target[fnName] = bindFunction(fnName);\n    return target[fnName].apply(null, arguments);\n  };\n\n  fnNames = fnNames || Object.keys(source());\n\n  return fnNames.reduce((acc, name) => {\n    acc[name] = latebind ? makeLateRebindFn(name) : bindFunction(name);\n    return acc;\n  }, target);\n}\n/**\n * prototypal inheritance helper.\n * Creates a new object which has `parent` object as its prototype, and then copies the properties from `extra` onto it\n */\nexport const inherit = (parent: Obj, extra?: Obj) =>\n    extend(Object.create(parent), extra);\n/**\n * Given an arguments object, converts the arguments at index idx and above to an array.\n * This is similar to es6 rest parameters.\n * \n * Optionally, the argument at index idx may itself already be an array.\n * \n * For example,\n * given either:\n *        arguments = [ obj, \"foo\", \"bar\" ]\n * or:\n *        arguments = [ obj, [\"foo\", \"bar\"] ]\n * then:\n *        restArgs(arguments, 1) == [\"foo\", \"bar\"]\n * \n * This allows functions like pick() to be implemented such that it allows either a bunch\n * of string arguments (like es6 rest parameters), or a single array of strings:\n * \n * given:\n *        var obj = { foo: 1, bar: 2, baz: 3 };\n * then:\n *        pick(obj, \"foo\", \"bar\");   // returns { foo: 1, bar: 2 }\n *        pick(obj, [\"foo\", \"bar\"]); // returns { foo: 1, bar: 2 }\n */\nconst restArgs = (args: IArguments, idx = 0) =>\n    Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(args, idx));\n/**\n * Given an array, returns true if the object is found in the array, (using indexOf)\n */\nexport const inArray: typeof _inArray = curry(_inArray) as any;\nexport function _inArray(array: any[], obj: any): boolean;\nexport function _inArray(array: any[]): (obj: any) => boolean;\n/**\n * @param {?} array\n * @param {?=} obj\n * @return {?}\n */\nexport function _inArray(array, obj?): any {\n  return array.indexOf(obj) !== -1;\n}\n/**\n * Given an array, and an item, if the item is found in the array, it removes it (in-place).\n * The same array is returned\n */\nexport const removeFrom: typeof _removeFrom = curry(_removeFrom) as any;\nexport function _removeFrom<T>(array: T[], obj: T): T[];\nexport function _removeFrom<T>(array: T[]): (obj: T) => T[];\n/**\n * @param {?} array\n * @param {?=} obj\n * @return {?}\n */\nexport function _removeFrom(array, obj?) {\n  let /** @type {?} */ idx = array.indexOf(obj);\n  if (idx >= 0) array.splice(idx, 1);\n  return array;\n}\n/**\n * pushes a values to an array and returns the value\n */\nexport const pushTo: typeof _pushTo = curry(_pushTo) as any;\nexport function _pushTo<T>(arr: T[], val: T): T ;\nexport function _pushTo<T>(arr: T[]): (val: T) => T ;\n/**\n * @param {?} arr\n * @param {?=} val\n * @return {?}\n */\nexport function _pushTo(arr, val?): any {\n  return (arr.push(val), val);\n}\n/**\n * Given an array of (deregistration) functions, calls all functions and removes each one from the source array\n */\nexport const deregAll = (functions: Function[]) =>\n    functions.slice().forEach(fn => {\n      typeof fn === 'function' && fn();\n      removeFrom(functions, fn);\n    });\n/**\n * Applies a set of defaults to an options object.  The options object is filtered\n * to only those properties of the objects in the defaultsList.\n * Earlier objects in the defaultsList take precedence when applying defaults.\n * @param {?} opts\n * @param {...?} defaultsList\n * @return {?}\n */\nexport function defaults(opts, ...defaultsList: Obj[]) {\n  let /** @type {?} */ _defaultsList = defaultsList.concat({}).reverse();\n  let /** @type {?} */ defaultVals = extend.apply(null, _defaultsList);\n  return extend({}, defaultVals, pick(opts || {}, Object.keys(defaultVals)));\n}\n/**\n * Reduce function that merges each element of the list into a single object, using extend\n */\nexport const mergeR = (memo: Obj, item: Obj) => extend(memo, item);\n/**\n * Finds the common ancestor path between two states.\n * \n * @param {?} first\n * @param {?} second\n * @return {?}\n */\nexport function ancestors(first: StateObject, second: StateObject) {\n  let /** @type {?} */ path: StateObject[] = [];\n\n  for (let /** @type {?} */ n in first.path) {\n    if (first.path[n] !== second.path[n]) break;\n    path.push(first.path[n]);\n  }\n  return path;\n}\n/**\n * Return a copy of the object only containing the whitelisted properties.\n * \n * #### Example:\n * ```\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = pick(foo, ['a', 'b']); // { a: 1, b: 2 }\n * ```\n * @param {?} obj the source object\n * @param {?} propNames an Array of strings, which are the whitelisted property names\n * @return {?}\n */\nexport function pick(obj: Obj, propNames: string[]): Obj {\n  let /** @type {?} */ objCopy = {};\n  for (let /** @type {?} */ prop in obj) {\n    if (propNames.indexOf(prop) !== -1) {\n      objCopy[prop] = obj[prop];\n    }\n  }\n  return objCopy;\n}\n/**\n * Return a copy of the object omitting the blacklisted properties.\n * \n * \\@example \n * ```\n * \n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = omit(foo, ['a', 'b']); // { c: 3 }\n * ```\n * @param {?} obj the source object\n * @param {?} propNames an Array of strings, which are the blacklisted property names\n * @return {?}\n */\nexport function omit(obj: Obj, propNames: string[]): Obj {\n  return Object.keys(obj)\n      .filter(not(inArray(propNames)))\n      .reduce((acc, key) => (acc[key] = obj[key], acc), {});\n}\n\n\n/** Given an array of objects, maps each element to a named property of the element. */\nexport function pluck<T>(collection: Obj[], propName: string): T[];\n/** Given an object, maps each property of the object to a named property of the property. */\nexport function pluck(collection: { [key: string]: any }, propName: string): { [key: string]: any };\n/**\n * Maps an array, or object to a property (by name)\n * @param {?} collection\n * @param {?} propName\n * @return {?}\n */\nexport function pluck(collection: any, propName: string): any {\n  return map(collection, /** @type {?} */(( <Mapper<any, string>> prop(propName))));\n}\n\n\n/** Given an array of objects, returns a new array containing only the elements which passed the callback predicate */\nexport function filter<T>(collection: T[], callback: (t: T, key?: number) => boolean): T[];\n/** Given an object, returns a new object with only those properties that passed the callback predicate */\nexport function filter<T>(collection: TypedMap<T>, callback: (t: T, key?: string) => boolean): TypedMap<T>;\n/**\n * Filters an Array or an Object's properties based on a predicate\n * @template T\n * @param {?} collection\n * @param {?} callback\n * @return {?}\n */\nexport function filter<T>(collection: any, callback: Function): T {\n  let /** @type {?} */ arr = isArray(collection), /** @type {?} */ result: any = arr ? [] : {};\n  let /** @type {?} */ accept = arr ? x => result.push(x) : (x, key) => result[key] = x;\n  forEach(collection, function(item, i) {\n    if (callback(item, i)) accept(item, i);\n  });\n  return /** @type {?} */(( <T>result));\n}\n\n\n/** Given an object, return the first property of that object which passed the callback predicate */\nexport function find<T>(collection: TypedMap<T>, callback: Predicate<T>): T;\n/** Given an array of objects, returns the first object which passed the callback predicate */\nexport function find<T>(collection: T[], callback: Predicate<T>): T;\n/**\n * Finds an object from an array, or a property of an object, that matches a predicate\n * @param {?} collection\n * @param {?} callback\n * @return {?}\n */\nexport function find(collection: any, callback: any) {\n  let /** @type {?} */ result;\n\n  forEach(collection, function(item, i) {\n    if (result) return;\n    if (callback(item, i)) result = item;\n  });\n\n  return result;\n}\n/**\n * Given an object, returns a new object, where each property is transformed by the callback function\n */\nexport let mapObj: <T,U>(collection: { [key: string]: T }, callback: Mapper<T,U>) => { [key: string]: U } = map;\n/** Given an array, returns a new array, where each element is transformed by the callback function */\nexport function map<T, U>(collection: T[], callback: Mapper<T, U>): U[];\nexport function map<T, U>(collection: { [key: string]: T }, callback: Mapper<T, U>): { [key: string]: U }\n/**\n * Maps an array or object properties using a callback function\n * @param {?} collection\n * @param {?} callback\n * @return {?}\n */\nexport function map(collection: any, callback: any): any {\n  let /** @type {?} */ result = isArray(collection) ? [] : {};\n  forEach(collection, (item, i) => result[i] = callback(item, i));\n  return result;\n}\n/**\n * Given an object, return its enumerable property values\n * \n * \\@example \n * ```\n * \n * let foo = { a: 1, b: 2, c: 3 }\n * let vals = values(foo); // [ 1, 2, 3 ]\n * ```\n */\nexport const values: (<T> (obj: TypedMap<T>) => T[]) = (obj: Obj) =>\n    Object.keys(obj).map(key => obj[key]);\n/**\n * Reduce function that returns true if all of the values are truthy.\n * \n * \\@example \n * ```\n * \n * let vals = [ 1, true, {}, \"hello world\"];\n * vals.reduce(allTrueR, true); // true\n * \n * vals.push(0);\n * vals.reduce(allTrueR, true); // false\n * ```\n */\nexport const allTrueR  = (memo: boolean, elem: any) => memo && elem;\n/**\n * Reduce function that returns true if any of the values are truthy.\n * \n *  * \\@example\n * ```\n * \n * let vals = [ 0, null, undefined ];\n * vals.reduce(anyTrueR, true); // false\n * \n * vals.push(\"hello world\");\n * vals.reduce(anyTrueR, true); // true\n * ```\n */\nexport const anyTrueR  = (memo: boolean, elem: any) => memo || elem;\n/**\n * Reduce function which un-nests a single level of arrays\n * \\@example \n * ```\n * \n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n * ```\n */\nexport const unnestR   = (memo: any[], elem: any[]) => memo.concat(elem);\n/**\n * Reduce function which recursively un-nests all arrays\n * \n * \\@example \n * ```\n * \n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n * ```\n */\nexport const flattenR  = (memo: any[], elem: any) =>\n    isArray(elem) ? memo.concat(elem.reduce(flattenR, [])) : pushR(memo, elem);\n/**\n * Reduce function that pushes an object to an array, then returns the array.\n * Mostly just for [[flattenR]] and [[uniqR]]\n * @param {?} arr\n * @param {?} obj\n * @return {?}\n */\nexport function pushR(arr: any[], obj: any) {\n  arr.push(obj);\n  return arr;\n}\n/**\n * Reduce function that filters out duplicates\n */\nexport const uniqR = <T> (acc: T[], token: T): T[] =>\n    inArray(acc, token) ? acc : pushR(acc, token);\n/**\n * Return a new array with a single level of arrays unnested.\n * \n * \\@example \n * ```\n * \n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * unnest(input) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n * ```\n */\nexport const unnest    = (arr: any[]) => arr.reduce(unnestR, []);\n/**\n * Return a completely flattened version of an array.\n * \n * \\@example \n * ```\n * \n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * flatten(input) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n * ```\n */\nexport const flatten   = (arr: any[]) => arr.reduce(flattenR, []);\n/**\n * Given a .filter Predicate, builds a .filter Predicate which throws an error if any elements do not pass.\n * \\@example \n * ```\n * \n * let isNumber = (obj) => typeof(obj) === 'number';\n * let allNumbers = [ 1, 2, 3, 4, 5 ];\n * allNumbers.filter(assertPredicate(isNumber)); //OK\n * \n * let oneString = [ 1, 2, 3, 4, \"5\" ];\n * oneString.filter(assertPredicate(isNumber, \"Not all numbers\")); // throws Error(\"\"Not all numbers\"\");\n * ```\n */\nexport const assertPredicate: <T> (predicate: Predicate<T>, errMsg: (string|Function)) => Predicate<T> = assertFn;\n/**\n * Given a .map function, builds a .map function which throws an error if any mapped elements do not pass a truthyness test.\n * \\@example \n * ```\n * \n * var data = { foo: 1, bar: 2 };\n * \n * let keys = [ 'foo', 'bar' ]\n * let values = keys.map(assertMap(key => data[key], \"Key not found\"));\n * // values is [1, 2]\n * \n * let keys = [ 'foo', 'bar', 'baz' ]\n * let values = keys.map(assertMap(key => data[key], \"Key not found\"));\n * // throws Error(\"Key not found\")\n * ```\n */\nexport const assertMap: <T, U> (mapFn: (t: T) => U, errMsg: (string|Function)) => (t: T) => U = assertFn;\n/**\n * @param {?} predicateOrMap\n * @param {?=} errMsg\n * @return {?}\n */\nexport function assertFn(predicateOrMap: Function, errMsg: (string|Function) = \"assert failure\"): any {\n  return (obj) => {\n    let /** @type {?} */ result = predicateOrMap(obj);\n    if (!result) {\n      throw new Error(isFunction(errMsg) ? ( /** @type {?} */((<Function> errMsg)))(obj) : errMsg);\n    }\n    return result;\n  };\n}\n/**\n * Like _.pairs: Given an object, returns an array of key/value pairs\n * \n * \\@example \n * ```\n * \n * pairs({ foo: \"FOO\", bar: \"BAR }) // [ [ \"foo\", \"FOO\" ], [ \"bar\": \"BAR\" ] ]\n * ```\n */\nexport const pairs = (obj: Obj) =>\n    Object.keys(obj).map(key => [ key, obj[key]] );\n/**\n * Given two or more parallel arrays, returns an array of tuples where\n * each tuple is composed of [ a[i], b[i], ... z[i] ]\n * \n * \\@example \n * ```\n * \n * let foo = [ 0, 2, 4, 6 ];\n * let bar = [ 1, 3, 5, 7 ];\n * let baz = [ 10, 30, 50, 70 ];\n * arrayTuples(foo, bar);       // [ [0, 1], [2, 3], [4, 5], [6, 7] ]\n * arrayTuples(foo, bar, baz);  // [ [0, 1, 10], [2, 3, 30], [4, 5, 50], [6, 7, 70] ]\n * ```\n * @param {...?} args\n * @return {?}\n */\nexport function arrayTuples(...args: any[]): any[] {\n  if (args.length === 0) return [];\n  let /** @type {?} */ maxArrayLen = args.reduce((min, arr) => Math.min(arr.length, min), 9007199254740991); // aka 2^53 − 1 aka Number.MAX_SAFE_INTEGER\n\n  let /** @type {?} */ i, /** @type {?} */ result = [];\n\n  for (i = 0; i < maxArrayLen; i++) {\n    // This is a hot function\n    // Unroll when there are 1-4 arguments\n    switch (args.length) {\n      case 1: result.push([args[0][i]]); break;\n      case 2: result.push([args[0][i], args[1][i]]); break;\n      case 3: result.push([args[0][i], args[1][i], args[2][i]]); break;\n      case 4: result.push([args[0][i], args[1][i], args[2][i], args[3][i]]); break;\n      default:\n        result.push(args.map(array => array[i])); break;\n    }\n  }\n\n  return result;\n}\n/**\n * Reduce function which builds an object from an array of [key, value] pairs.\n * \n * Each iteration sets the key/val pair on the memo object, then returns the memo for the next iteration.\n * \n * Each keyValueTuple should be an array with values [ key: string, value: any ]\n * \n * \\@example \n * ```\n * \n * var pairs = [ [\"fookey\", \"fooval\"], [\"barkey\", \"barval\"] ]\n * \n * var pairsToObj = pairs.reduce((memo, pair) => applyPairs(memo, pair), {})\n * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n * \n * // Or, more simply:\n * var pairsToObj = pairs.reduce(applyPairs, {})\n * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n * ```\n * @param {?} memo\n * @param {?} keyValTuple\n * @return {?}\n */\nexport function applyPairs(memo: TypedMap<any>, keyValTuple: any[]) {\n  let /** @type {?} */ key: string, /** @type {?} */ value: any;\n  if (isArray(keyValTuple)) [key, value] = keyValTuple;\n  if (!isString(key)) throw new Error(\"invalid parameters to applyPairs\");\n  memo[key] = value;\n  return memo;\n}\n/**\n * Get the last element of an array\n * @template T\n * @param {?} arr\n * @return {?}\n */\nexport function tail<T>(arr: T[]): T {\n  return arr.length && arr[arr.length - 1] || undefined;\n}\n/**\n * shallow copy from src to dest\n * \n * note: This is a shallow copy, while angular.copy is a deep copy.\n * ui-router uses `copy` only to make copies of state parameters.\n * @param {?} src\n * @param {?} dest\n * @return {?}\n */\nfunction _copy(src: Obj, dest: Obj) {\n  if (dest) Object.keys(dest).forEach(key => delete dest[key]);\n  if (!dest) dest = {};\n  return extend(dest, src);\n}\n/**\n * Naive forEach implementation works with Objects or Arrays\n * @param {?} obj\n * @param {?} cb\n * @param {?} _this\n * @return {?}\n */\nfunction _forEach(obj: (any[]|any), cb: (el, idx?) => void, _this: Obj) {\n  if (isArray(obj)) return obj.forEach(cb, _this);\n  Object.keys(obj).forEach(key => cb(obj[key], key));\n}\n\n/** Like Object.assign() */\nexport function _extend(toObj: Obj, ...fromObjs: Obj[]): any;\n/**\n * @param {?} toObj\n * @return {?}\n */\nexport function _extend(toObj: Obj): any {\n  for (let /** @type {?} */ i = 1; i < arguments.length; i++) {\n    let /** @type {?} */ obj = arguments[i];\n    if (!obj) continue;\n    let /** @type {?} */ keys = Object.keys(obj);\n\n    for (let /** @type {?} */ j = 0; j < keys.length; j++) {\n      toObj[keys[j]] = obj[keys[j]];\n    }\n  }\n\n  return toObj;\n}\n/**\n * @param {?} o1\n * @param {?} o2\n * @return {?}\n */\nfunction _equals(o1: any, o2: any): boolean {\n  if (o1 === o2) return true;\n  if (o1 === null || o2 === null) return false;\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n  let /** @type {?} */ t1 = typeof o1, /** @type {?} */ t2 = typeof o2;\n  if (t1 !== t2 || t1 !== 'object') return false;\n\n  const /** @type {?} */ tup = [o1, o2];\n  if (all(isArray)(tup)) return _arraysEq(o1, o2);\n  if (all(isDate)(tup)) return o1.getTime() === o2.getTime();\n  if (all(isRegExp)(tup)) return o1.toString() === o2.toString();\n  if (all(isFunction)(tup)) return true; // meh\n\n  let /** @type {?} */ predicates = [isFunction, isArray, isDate, isRegExp];\n  if (predicates.map(any).reduce((b, fn) => b || !!fn(tup), false)) return false;\n\n  let /** @type {?} */ key: string, /** @type {?} */ keys: { [i: string]: boolean } = {};\n  for (key in o1) {\n    if (!_equals(o1[key], o2[key])) return false;\n    keys[key] = true;\n  }\n  for (key in o2) {\n    if (!keys[key]) return false;\n  }\n\n  return true;\n}\n/**\n * @param {?} a1\n * @param {?} a2\n * @return {?}\n */\nfunction _arraysEq(a1: any[], a2: any[]) {\n  if (a1.length !== a2.length) return false;\n  return arrayTuples(a1, a2).reduce((b, t) => b && _equals(t[0], t[1]), true);\n}\n\nexport type sortfn = (a: any, b: any) => number;\n/**\n * Create a sort function\n * \n * Creates a sort function which sorts by a numeric property.\n * \n * The `propFn` should return the property as a number which can be sorted.\n * \n * #### Example:\n * This example returns the `priority` prop.\n * ```js\n * var sortfn = sortBy(obj => obj.priority)\n * // equivalent to:\n * var longhandSortFn = (a, b) => a.priority - b.priority;\n * ```\n * \n * #### Example:\n * This example uses [[prop]]\n * ```js\n * var sortfn = sortBy(prop('priority'))\n * ```\n * \n * The `checkFn` can be used to exclude objects from sorting.\n * \n * #### Example:\n * This example only sorts objects with type === 'FOO'\n * ```js\n * var sortfn = sortBy(prop('priority'), propEq('type', 'FOO'))\n * ```\n * \n * @param propFn a function that returns the property (as a number)\n * @param checkFn a predicate\n * \n * @return a sort function like: `(a, b) => (checkFn(a) && checkFn(b)) ? propFn(a) - propFn(b) : 0`\n */\nexport const sortBy = (propFn: (a) => number, checkFn: Predicate<any> = val(true)) =>\n    (a, b) =>\n        (checkFn(a) && checkFn(b)) ? propFn(a) - propFn(b) : 0;\n/**\n * Composes a list of sort functions\n * \n * Creates a sort function composed of multiple sort functions.\n * Each sort function is invoked in series.\n * The first sort function to return non-zero \"wins\".\n * \n * @param sortFns list of sort functions\n */\nexport const composeSort = (...sortFns: sortfn[]): sortfn =>\n    function composedSort(a, b) {\n      return sortFns.reduce((prev, fn) => prev || fn(a, b), 0);\n    };\n\n// issue #2676\nexport const /** @type {?} */ silenceUncaughtInPromise = (promise: Promise<any>) =>\n    promise.catch(e => 0) && promise;\nexport const /** @type {?} */ silentRejection = (error: any) =>\n    silenceUncaughtInPromise(services.$q.reject(error));\n","/**\n * This module is a stub for core services such as Dependency Injection or Browser Location.\n * Core services may be implemented by a specific framework, such as ng1 or ng2, or be pure javascript.\n *\n * @module common\n */\n/** for typedoc */\n\nimport {IInjectable, Obj} from './common';\nimport { Disposable } from '../interface';\nimport { UrlParts } from '../url/interface';\n\nexport let /** @type {?} */ notImplemented = (fnname: string) => () => {\n  throw new Error(`${fnname}(): No coreservices implementation for UI-Router is loaded.`);\n};\n\nlet /** @type {?} */ services: CoreServices = {\n  $q: undefined,\n  $injector: undefined,\n};\n\nexport interface $QLikeDeferred {\n  resolve: (val?: any) => void;\n  reject: (reason?: any) => void;\n  promise: Promise<any>;\n}\n\nexport interface $QLike {\n  when<T>(val?: T): Promise<T>;\n  reject<T>(reason: any): Promise<T>;\n  defer(): $QLikeDeferred;\n  all(promises: { [key: string]: Promise<any> }): Promise<any>;\n  all(promises: Promise<any>[]): Promise<any[]>;\n}\n\nexport interface $InjectorLike {\n  get(token: any): any;\n  get<T>(token: any): T;\n  has(token: any): boolean;\n  invoke(fn: IInjectable, context?: any, locals?: Obj): any;\n  annotate(fn: IInjectable, strictDi?: boolean): any[];\n  strictDi?: boolean;\n}\n\nexport interface CoreServices {\n  $q: $QLike;\n  $injector: $InjectorLike;\n}\n\nexport interface LocationServices extends Disposable {\n  /**\n   * Gets the current url string\n   *\n   * The URL is normalized using the internal [[path]]/[[search]]/[[hash]] values.\n   *\n   * For example, the URL may be stored in the hash ([[HashLocationServices]]) or\n   * have a base HREF prepended ([[PushStateLocationServices]]).\n   *\n   * The raw URL in the browser might be:\n   *\n   * ```\n   * http://mysite.com/somepath/index.html#/internal/path/123?param1=foo#anchor\n   * ```\n   *\n   * or\n   *\n   * ```\n   * http://mysite.com/basepath/internal/path/123?param1=foo#anchor\n   * ```\n   *\n   * then this method returns:\n   *\n   * ```\n   * /internal/path/123?param1=foo#anchor\n   * ```\n   *\n   *\n   * #### Example:\n   * ```js\n   * locationServices.url(); // \"/some/path?query=value#anchor\"\n   * ```\n   *\n   * @returns the current value of the url, as a string.\n   */\n  url(): string;\n\n  /**\n   * Updates the url, or gets the current url\n   *\n   * Updates the url, changing it to the value in `newurl`\n   *\n   * #### Example:\n   * ```js\n   * locationServices.url(\"/some/path?query=value#anchor\", true);\n   * ```\n   *\n   * @param newurl The new value for the URL.\n   *               This url should reflect only the new internal [[path]], [[search]], and [[hash]] values.\n   *               It should not include the protocol, site, port, or base path of an absolute HREF.\n   * @param replace When true, replaces the current history entry (instead of appending it) with this new url\n   * @param state The history's state object, i.e., pushState (if the LocationServices implementation supports it)\n   * @return the url (after potentially being processed)\n   */\n  url(newurl: string, replace?: boolean, state?: any): string;\n\n  /**\n   * Gets the path part of the current url\n   *\n   * If the current URL is `/some/path?query=value#anchor`, this returns `/some/path`\n   *\n   * @return the path portion of the url\n   */\n  path(): string;\n\n  /**\n   * Gets the search part of the current url as an object\n   *\n   * If the current URL is `/some/path?query=value#anchor`, this returns `{ query: 'value' }`\n   *\n   * @return the search (querystring) portion of the url, as an object\n   */\n  search(): { [key: string]: any };\n\n  /**\n   * Gets the hash part of the current url\n   *\n   * If the current URL is `/some/path?query=value#anchor`, this returns `anchor`\n   *\n   * @return the hash (anchor) portion of the url\n   */\n  hash(): string;\n\n  /**\n   * Registers a url change handler\n   *\n   * #### Example:\n   * ```js\n   * let deregisterFn = locationServices.onChange((evt) => console.log(\"url change\", evt));\n   * ```\n   *\n   * @param callback a function that will be called when the url is changing\n   * @return a function that de-registers the callback\n   */\n  onChange(callback: Function): Function;\n}\n\n/**\n * This service returns the location configuration\n *\n * This service returns information about the location configuration.\n * This service is primarily used when building URLs (e.g., for `hrefs`)\n */\nexport interface LocationConfig extends Disposable {\n  /**\n   * Gets the port, e.g., `80`\n   *\n   * @return the port number\n   */\n  port(): number;\n  /**\n   * Gets the protocol, e.g., `http`\n   *\n   * @return the protocol\n   */\n  protocol(): string;\n  /**\n   * Gets the host, e.g., `localhost`\n   *\n   * @return the protocol\n   */\n  host(): string;\n  /**\n   * Gets the base Href, e.g., `http://localhost/approot/`\n   *\n   * @return the application's base href\n   */\n  baseHref(): string;\n  /**\n   * Returns true when running in pushstate mode\n   *\n   * @return true when running in pushstate mode\n   */\n  html5Mode(): boolean;\n  /**\n   * Gets the hashPrefix (when not running in pushstate mode)\n   *\n   * If the current url is `http://localhost/app#!/uirouter/path/#anchor`, it returns `!` which is the prefix for the \"hashbang\" portion.\n   *\n   * @return the hash prefix\n   */\n  hashPrefix(): string;\n  /**\n   * Sets the hashPrefix (when not running in pushstate mode)\n   *\n   * @return the new hash prefix\n   */\n  hashPrefix(newprefix: string): string;\n}\n\nexport {services};\n","/** Predicates\n *\n * These predicates return true/false based on the input.\n * Although these functions are exported, they are subject to change without notice.\n *\n * @module common_predicates\n */\n/** */\n\nimport { and, not, pipe, prop, or } from './hof';\nimport { Predicate } from './common'; // has or is using\n\nimport { StateObject } from '../state/stateObject';\n\nconst /** @type {?} */ toStr = Object.prototype.toString;\nconst /** @type {?} */ tis = (t: string) => (x: any) => typeof(x) === t;\nexport const /** @type {?} */ isUndefined = tis('undefined');\nexport const /** @type {?} */ isDefined = not(isUndefined);\nexport const /** @type {?} */ isNull = (o: any) => o === null;\nexport const /** @type {?} */ isNullOrUndefined = or(isNull, isUndefined);\nexport const /** @type {?} */ isFunction: (x: any) => x is Function = /** @type {?} */(( <any> tis('function')));\nexport const /** @type {?} */ isNumber: (x: any) => x is number = /** @type {?} */(( <any> tis('number')));\nexport const /** @type {?} */ isString = /** @type {?} */(( <(x: any) => x is string> tis('string')));\nexport const /** @type {?} */ isObject = (x: any) => x !== null && typeof x === 'object';\nexport const /** @type {?} */ isArray = Array.isArray;\nexport const /** @type {?} */ isDate: (x: any) => x is Date = /** @type {?} */(( <any> ((x: any) => toStr.call(x) === '[object Date]')));\nexport const /** @type {?} */ isRegExp: (x: any) => x is RegExp = /** @type {?} */(( <any> ((x: any) => toStr.call(x) === '[object RegExp]')));\nexport const /** @type {?} */ isState: (x: any) => x is StateObject = StateObject.isState;\n/**\n * Predicate which checks if a value is injectable\n * \n * A value is \"injectable\" if it is a function, or if it is an ng1 array-notation-style array\n * where all the elements in the array are Strings, except the last one, which is a Function\n * @param {?} val\n * @return {?}\n */\nexport function isInjectable(val: any) {\n  if (isArray(val) && val.length) {\n    let /** @type {?} */ head = val.slice(0, -1), /** @type {?} */ tail = val.slice(-1);\n    return !(head.filter(not(isString)).length || tail.filter(not(isFunction)).length);\n  }\n  return isFunction(val);\n}\n/**\n * Predicate which checks if a value looks like a Promise\n * \n * It is probably a Promise if it's an object, and it has a `then` property which is a Function\n */\nexport const isPromise = <(x: any) => x is Promise<any>> and(isObject, pipe(prop('then'), isFunction));\n\n","/**\n * @coreapi\n * @module state\n */\n/** for typedoc */\n\nimport { StateDeclaration, _ViewDeclaration, _StateDeclaration } from './interface';\nimport { defaults, values, find, inherit } from '../common/common';\nimport { propEq } from '../common/hof';\nimport { Param } from '../params/param';\nimport { UrlMatcher } from '../url/urlMatcher';\nimport { Resolvable } from '../resolve/resolvable';\nimport { TransitionStateHookFn } from '../transition/interface';\nimport { TargetState } from './targetState';\nimport { Transition } from '../transition/transition';\nimport { Glob } from '../common/glob';\nimport { isObject, isFunction } from '../common/predicates';\n/**\n * Internal representation of a UI-Router state.\n * \n * Instances of this class are created when a [[StateDeclaration]] is registered with the [[StateRegistry]].\n * \n * A registered [[StateDeclaration]] is augmented with a getter ([[StateDeclaration.$$state]]) which returns the corresponding [[StateObject]] object.\n * \n * This class prototypally inherits from the corresponding [[StateDeclaration]].\n * Each of its own properties (i.e., `hasOwnProperty`) are built using builders from the [[StateBuilder]].\n */\nexport class StateObject {\n/**\n * The parent [[StateObject]]\n */\npublic parent: StateObject;\n/**\n * The name used to register the state\n */\npublic name: string;\n/**\n * Prototypally inherits from [[StateDeclaration.abstract]]\n */\npublic abstract: boolean;\n/**\n * Prototypally inherits from [[StateDeclaration.resolve]]\n */\npublic resolve: ({ [key: string]: (string|any[]|Function) }|any[]);\n/**\n * A list of [[Resolvable]] objects.  The internal representation of [[resolve]].\n */\npublic resolvables: Resolvable[];\n/**\n * Prototypally inherits from [[StateDeclaration.resolvePolicy]]\n */\npublic resolvePolicy: any;\n/**\n * A compiled URLMatcher which detects when the state's URL is matched\n */\npublic url: UrlMatcher;\n/**\n * The parameters for the state, built from the URL and [[StateDeclaration.params]]\n */\npublic params: { [key: string]: Param };\n/**\n * The views for the state.\n * Note: `\\@uirouter/core` does not register a builder for views.\n * The framework specific code should register a `views` builder.\n */\npublic views: { [key: string]: _ViewDeclaration; };\n/**\n * The original [[StateDeclaration]] used to build this [[StateObject]].\n * Note: `this` object also prototypally inherits from the `self` declaration object.\n */\npublic self: StateDeclaration;\n/**\n * The nearest parent [[StateObject]] which has a URL\n */\npublic navigable: StateObject;\n/**\n * The parent [[StateObject]] objects from this state up to the root\n */\npublic path: StateObject[];\n/**\n * Prototypally inherits from [[StateDeclaration.data]]\n * Note: This is the only field on the [[StateDeclaration]] which is mutated.\n * The definition object's `data` field is replaced with a new object\n * which prototypally inherits from the parent state definition's `data` field.\n */\npublic data: any;\n/**\n * An object containing the parent States' names as keys and\n * true as their values.\n */\npublic includes: { [name: string]: boolean };\n/**\n * Prototypally inherits from [[StateDeclaration.onExit]]\n */\npublic onExit: TransitionStateHookFn;\n/**\n * Prototypally inherits from [[StateDeclaration.onRetain]]\n */\npublic onRetain: TransitionStateHookFn;\n/**\n * Prototypally inherits from [[StateDeclaration.onEnter]]\n */\npublic onEnter: TransitionStateHookFn;\n/**\n * Prototypally inherits from [[StateDeclaration.lazyLoad]]\n */\npublic lazyLoad: (transition: Transition, state: StateDeclaration) => any;\n/**\n * Prototypally inherits from [[StateDeclaration.redirectTo]]\n */\nredirectTo: (\n      string |\n      (($transition$: Transition) => TargetState) |\n      { state: (string|StateDeclaration), params: { [key: string]: any }}\n  );\n/**\n * @hidden\n */\n__stateObjectCache: {\n    /** Might be null */\n    nameGlob?: Glob\n  };\n/**\n * @deprecated use State.create()\n * @param {?=} config\n */\nconstructor(config?: StateDeclaration) {\n    return StateObject.create(config || {});\n  }\n/**\n * Create a state object to put the private/internal implementation details onto.\n * The object's prototype chain looks like:\n * (Internal State Object) -> (Copy of State.prototype) -> (State Declaration object) -> (State Declaration's prototype...)\n * \n * @param {?} stateDecl the user-supplied State Declaration\n * @return {?}\n */\nstatic create(stateDecl: _StateDeclaration): StateObject {\n    stateDecl = StateObject.isStateClass(stateDecl) ? new stateDecl() : stateDecl;\n\n    let /** @type {?} */ state = /** @type {?} */(( inherit(inherit(stateDecl, StateObject.prototype)) as StateObject));\n    stateDecl.$$state = () => state;\n    state.self = stateDecl;\n    state.__stateObjectCache = {\n      nameGlob: Glob.fromString(state.name) // might return null\n    };\n    return state;\n  }\n/**\n * Predicate which returns true if the object is an class with \\@State() decorator\n */\nstatic isStateClass = (stateDecl: _StateDeclaration): stateDecl is ({ new (): StateDeclaration }) =>\n      isFunction(stateDecl) && stateDecl['__uiRouterState'] === true;\n/**\n * Predicate which returns true if the object is an internal [[StateObject]] object\n */\nstatic isState = (obj: any): obj is StateObject =>\n      isObject(obj['__stateObjectCache']);\n/**\n * Returns true if the provided parameter is the same state.\n * \n * Compares the identity of the state against the passed value, which is either an object\n * reference to the actual `State` instance, the original definition object passed to\n * `$stateProvider.state()`, or the fully-qualified name.\n * \n * @param {?} ref Can be one of (a) a `State` instance, (b) an object that was passed\n *        into `$stateProvider.state()`, (c) the fully-qualified name of a state as a string.\n * @return {?} Returns `true` if `ref` matches the current `State` instance.\n */\nis(ref: StateObject|StateDeclaration|string): boolean {\n    return this === ref || this.self === ref || this.fqn() === ref;\n  }\n/**\n * @deprecated this does not properly handle dot notation\n * @return {?} Returns a dot-separated name of the state.\n */\nfqn(): string {\n    if (!this.parent || !(this.parent instanceof this.constructor)) return this.name;\n    let /** @type {?} */ name = this.parent.fqn();\n    return name ? name + \".\" + this.name : this.name;\n  }\n/**\n * Returns the root node of this state's tree.\n * \n * @return {?} The root of this state's tree.\n */\nroot(): StateObject {\n    return this.parent && this.parent.root() || this;\n  }\n/**\n * Gets the state's `Param` objects\n * \n * Gets the list of [[Param]] objects owned by the state.\n * If `opts.inherit` is true, it also includes the ancestor states' [[Param]] objects.\n * If `opts.matchingKeys` exists, returns only `Param`s whose `id` is a key on the `matchingKeys` object\n * \n * @param {?=} opts options\n * @return {?}\n */\nparameters(opts?: { inherit?: boolean, matchingKeys?: any }): Param[] {\n    opts = defaults(opts, { inherit: true, matchingKeys: null });\n    let /** @type {?} */ inherited = opts.inherit && this.parent && this.parent.parameters() || [];\n    return inherited.concat(values(this.params))\n        .filter(param => !opts.matchingKeys || opts.matchingKeys.hasOwnProperty(param.id));\n  }\n/**\n * Returns a single [[Param]] that is owned by the state\n * \n * If `opts.inherit` is true, it also searches the ancestor states` [[Param]]s.\n * @param {?} id the name of the [[Param]] to return\n * @param {?=} opts options\n * @return {?}\n */\nparameter(id: string, opts: { inherit?: boolean } = {}): Param {\n    return (\n        this.url && this.url.parameter(id, opts) ||\n        find(values(this.params), propEq('id', id)) ||\n        opts.inherit && this.parent && this.parent.parameter(id)\n    );\n  }\n/**\n * @return {?}\n */\ntoString() {\n    return this.fqn();\n  }\n}\n\nfunction StateObject_tsickle_Closure_declarations() {\n/**\n * Predicate which returns true if the object is an class with \\@State() decorator\n * @type {?}\n */\nStateObject.isStateClass;\n/**\n * Predicate which returns true if the object is an internal [[StateObject]] object\n * @type {?}\n */\nStateObject.isState;\n/**\n * The parent [[StateObject]]\n * @type {?}\n */\nStateObject.prototype.parent;\n/**\n * The name used to register the state\n * @type {?}\n */\nStateObject.prototype.name;\n/**\n * Prototypally inherits from [[StateDeclaration.abstract]]\n * @type {?}\n */\nStateObject.prototype.abstract;\n/**\n * Prototypally inherits from [[StateDeclaration.resolve]]\n * @type {?}\n */\nStateObject.prototype.resolve;\n/**\n * A list of [[Resolvable]] objects.  The internal representation of [[resolve]].\n * @type {?}\n */\nStateObject.prototype.resolvables;\n/**\n * Prototypally inherits from [[StateDeclaration.resolvePolicy]]\n * @type {?}\n */\nStateObject.prototype.resolvePolicy;\n/**\n * A compiled URLMatcher which detects when the state's URL is matched\n * @type {?}\n */\nStateObject.prototype.url;\n/**\n * The parameters for the state, built from the URL and [[StateDeclaration.params]]\n * @type {?}\n */\nStateObject.prototype.params;\n/**\n * The views for the state.\n * Note: `\\@uirouter/core` does not register a builder for views.\n * The framework specific code should register a `views` builder.\n * @type {?}\n */\nStateObject.prototype.views;\n/**\n * The original [[StateDeclaration]] used to build this [[StateObject]].\n * Note: `this` object also prototypally inherits from the `self` declaration object.\n * @type {?}\n */\nStateObject.prototype.self;\n/**\n * The nearest parent [[StateObject]] which has a URL\n * @type {?}\n */\nStateObject.prototype.navigable;\n/**\n * The parent [[StateObject]] objects from this state up to the root\n * @type {?}\n */\nStateObject.prototype.path;\n/**\n * Prototypally inherits from [[StateDeclaration.data]]\n * Note: This is the only field on the [[StateDeclaration]] which is mutated.\n * The definition object's `data` field is replaced with a new object\n * which prototypally inherits from the parent state definition's `data` field.\n * @type {?}\n */\nStateObject.prototype.data;\n/**\n * An object containing the parent States' names as keys and\n * true as their values.\n * @type {?}\n */\nStateObject.prototype.includes;\n/**\n * Prototypally inherits from [[StateDeclaration.onExit]]\n * @type {?}\n */\nStateObject.prototype.onExit;\n/**\n * Prototypally inherits from [[StateDeclaration.onRetain]]\n * @type {?}\n */\nStateObject.prototype.onRetain;\n/**\n * Prototypally inherits from [[StateDeclaration.onEnter]]\n * @type {?}\n */\nStateObject.prototype.onEnter;\n/**\n * Prototypally inherits from [[StateDeclaration.lazyLoad]]\n * @type {?}\n */\nStateObject.prototype.lazyLoad;\n/**\n * Prototypally inherits from [[StateDeclaration.redirectTo]]\n * @type {?}\n */\nStateObject.prototype.redirectTo;\n/**\n * @hidden\n * @type {?}\n */\nStateObject.prototype.__stateObjectCache;\n}\n\n","\n/**\n * Matches state names using glob-like pattern strings.\n * \n * Globs can be used in specific APIs including:\n * \n * - [[StateService.is]]\n * - [[StateService.includes]]\n * - The first argument to Hook Registration functions like [[TransitionService.onStart]]\n *    - [[HookMatchCriteria]] and [[HookMatchCriterion]]\n * \n * A `Glob` string is a pattern which matches state names.\n * Nested state names are split into segments (separated by a dot) when processing.\n * The state named `foo.bar.baz` is split into three segments ['foo', 'bar', 'baz']\n * \n * Globs work according to the following rules:\n * \n * ### Exact match:\n * \n * The glob `'A.B'` matches the state named exactly `'A.B'`.\n * \n * | Glob        |Matches states named|Does not match state named|\n * |:------------|:--------------------|:---------------------|\n * | `'A'`       | `'A'`               | `'B'` , `'A.C'`      |\n * | `'A.B'`     | `'A.B'`             | `'A'` , `'A.B.C'`    |\n * | `'foo'`     | `'foo'`             | `'FOO'` , `'foo.bar'`|\n * \n * ### Single star (`*`)\n * \n * A single star (`*`) is a wildcard that matches exactly one segment.\n * \n * | Glob        |Matches states named  |Does not match state named |\n * |:------------|:---------------------|:--------------------------|\n * | `'*'`       | `'A'` , `'Z'`        | `'A.B'` , `'Z.Y.X'`       |\n * | `'A.*'`     | `'A.B'` , `'A.C'`    | `'A'` , `'A.B.C'`         |\n * | `'A.*.*'`   | `'A.B.C'` , `'A.X.Y'`| `'A'`, `'A.B'` , `'Z.Y.X'`|\n * \n * ### Double star (`**`)\n * \n * A double star (`'**'`) is a wildcard that matches *zero or more segments*\n * \n * | Glob        |Matches states named                           |Does not match state named         |\n * |:------------|:----------------------------------------------|:----------------------------------|\n * | `'**'`      | `'A'` , `'A.B'`, `'Z.Y.X'`                    | (matches all states)              |\n * | `'A.**'`    | `'A'` , `'A.B'` , `'A.C.X'`                   | `'Z.Y.X'`                         |\n * | `'**.X'`    | `'X'` , `'A.X'` , `'Z.Y.X'`                   | `'A'` , `'A.login.Z'`             |\n * | `'A.**.X'`  | `'A.X'` , `'A.B.X'` , `'A.B.C.X'`             | `'A'` , `'A.B.C'`                 |\n * \n */\nexport class Glob {\n  text: string;\n  glob: Array<string>;\n  regexp: RegExp;\n/**\n * @param {?} text\n */\nconstructor(text: string) {\n    this.text = text;\n    this.glob = text.split('.');\n\n    let regexpString = this.text.split('.')\n        .map(seg => {\n          if (seg === '**') return '(?:|(?:\\\\.[^.]*)*)';\n          if (seg === '*')  return '\\\\.[^.]*';\n          return                   '\\\\.' + seg;\n        }).join('');\n\n    this.regexp = new RegExp(\"^\" + regexpString + \"$\");\n  }\n/**\n * @param {?} name\n * @return {?}\n */\nmatches(name: string) {\n    return this.regexp.test('.' + name);\n  }\n/**\n * Returns true if the string has glob-like characters in it\n * @param {?} text\n * @return {?}\n */\nstatic is(text: string) {\n    return !!/[!,*]+/.exec(text);\n  }\n/**\n * Returns a glob from the string, or null if the string isn't Glob-like\n * @param {?} text\n * @return {?}\n */\nstatic fromString(text: string) {\n    return Glob.is(text) ? new Glob(text) : null;\n  }\n}\n\nfunction Glob_tsickle_Closure_declarations() {\n/** @type {?} */\nGlob.prototype.text;\n/** @type {?} */\nGlob.prototype.glob;\n/** @type {?} */\nGlob.prototype.regexp;\n}\n\n","/**\n * Higher order functions\n *\n * These utility functions are exported, but are subject to change without notice.\n *\n * @module common_hof\n */ /** */\n\n\nimport {Predicate} from './common';\n/**\n * Returns a new function for [Partial Application](https://en.wikipedia.org/wiki/Partial_application) of the original function.\n * \n * Given a function with N parameters, returns a new function that supports partial application.\n * The new function accepts anywhere from 1 to N parameters.  When that function is called with M parameters,\n * where M is less than N, it returns a new function that accepts the remaining parameters.  It continues to\n * accept more parameters until all N parameters have been supplied.\n * \n * \n * This contrived example uses a partially applied function as an predicate, which returns true\n * if an object is found in both arrays.\n * \\@example \n * ```\n * // returns true if an object is in both of the two arrays\n * function inBoth(array1, array2, object) {\n *   return array1.indexOf(object) !== -1 &&\n *          array2.indexOf(object) !== 1;\n * }\n * let obj1, obj2, obj3, obj4, obj5, obj6, obj7\n * let foos = [obj1, obj3]\n * let bars = [obj3, obj4, obj5]\n * \n * // A curried \"copy\" of inBoth\n * let curriedInBoth = curry(inBoth);\n * // Partially apply both the array1 and array2\n * let inFoosAndBars = curriedInBoth(foos, bars);\n * \n * // Supply the final argument; since all arguments are\n * // supplied, the original inBoth function is then called.\n * let obj1InBoth = inFoosAndBars(obj1); // false\n * \n * // Use the inFoosAndBars as a predicate.\n * // Filter, on each iteration, supplies the final argument\n * let allObjs = [ obj1, obj2, obj3, obj4, obj5, obj6, obj7 ];\n * let foundInBoth = allObjs.filter(inFoosAndBars); // [ obj3 ]\n * \n * ```\n * \n * Stolen from: http://stackoverflow.com/questions/4394747/javascript-curry-function\n * \n * @param {?} fn\n * @return {?}\n */\nexport function curry(fn: Function): Function {\n  let /** @type {?} */ initial_args = [].slice.apply(arguments, [1]);\n  let /** @type {?} */ func_args_length = fn.length;\n/**\n * @param {?} args\n * @return {?}\n */\nfunction curried(args: any[]) {\n    if (args.length >= func_args_length)\n      return fn.apply(null, args);\n    return function () {\n      return curried(args.concat([].slice.apply(arguments)));\n    };\n  }\n  return curried(initial_args);\n}\n/**\n * Given a varargs list of functions, returns a function that composes the argument functions, right-to-left\n * given: f(x), g(x), h(x)\n * let composed = compose(f,g,h)\n * then, composed is: f(g(h(x)))\n * @return {?}\n */\nexport function compose() {\n  let /** @type {?} */ args = arguments;\n  let /** @type {?} */ start = args.length - 1;\n  return function() {\n    let /** @type {?} */ i = start, /** @type {?} */ result = args[start].apply(this, arguments);\n    while (i--) result = args[i].call(this, result);\n    return result;\n  };\n}\n/**\n * Given a varargs list of functions, returns a function that is composes the argument functions, left-to-right\n * given: f(x), g(x), h(x)\n * let piped = pipe(f,g,h);\n * then, piped is: h(g(f(x)))\n * @param {...?} funcs\n * @return {?}\n */\nexport function pipe(...funcs: Function[]): (obj: any) => any {\n  return compose.apply(null, [].slice.call(arguments).reverse());\n}\n/**\n * Given a property name, returns a function that returns that property from an object\n * let obj = { foo: 1, name: \"blarg\" };\n * let getName = prop(\"name\");\n * getName(obj) === \"blarg\"\n */\nexport const prop = (name: string) =>\n    (obj: any) => obj && obj[name];\n/**\n * Given a property name and a value, returns a function that returns a boolean based on whether\n * the passed object has a property that matches the value\n * let obj = { foo: 1, name: \"blarg\" };\n * let getName = propEq(\"name\", \"blarg\");\n * getName(obj) === true\n */\nexport const propEq = curry((name: string, val: any, obj: any) => obj && obj[name] === val);\n/**\n * Given a dotted property name, returns a function that returns a nested property from an object, or undefined\n * let obj = { id: 1, nestedObj: { foo: 1, name: \"blarg\" }, };\n * let getName = prop(\"nestedObj.name\");\n * getName(obj) === \"blarg\"\n * let propNotFound = prop(\"this.property.doesnt.exist\");\n * propNotFound(obj) === undefined\n */\nexport const parse = (name: string) =>\n    pipe.apply(null, name.split(\".\").map(prop));\n/**\n * Given a function that returns a truthy or falsey value, returns a\n * function that returns the opposite (falsey or truthy) value given the same inputs\n */\nexport const not: (fn: Predicate<any>) => Predicate<any> = (fn: Predicate<any>) =>\n    (...args: any[]) => !fn.apply(null, args);\n/**\n * Given two functions that return truthy or falsey values, returns a function that returns truthy\n * if both functions return truthy for the given arguments\n * @param {?} fn1\n * @param {?} fn2\n * @return {?}\n */\nexport function and(fn1: Predicate<any>, fn2: Predicate<any>): Predicate<any> {\n  return (...args: any[]) => fn1.apply(null, args) && fn2.apply(null, args);\n}\n/**\n * Given two functions that return truthy or falsey values, returns a function that returns truthy\n * if at least one of the functions returns truthy for the given arguments\n * @param {?} fn1\n * @param {?} fn2\n * @return {?}\n */\nexport function or(fn1: Predicate<any>, fn2: Predicate<any>): Predicate<any> {\n  return (...args: any[]) => fn1.apply(null, args) || fn2.apply(null, args);\n}\n/**\n * Check if all the elements of an array match a predicate function\n * \n * @param fn1 a predicate function `fn1`\n * @return a function which takes an array and returns true if `fn1` is true for all elements of the array\n */\nexport const all = (fn1: Predicate<any>) =>\n    (arr: any[]) => arr.reduce((b, x) => b && !!fn1(x), true) as boolean;\nexport const /** @type {?} */ any = (fn1: Predicate<any>) =>\n    (arr: any[]) => /** @type {?} */(( arr.reduce((b, x) => b || !!fn1(x), false) as boolean));\n/**\n * Given a class, returns a Predicate function that returns true if the object is of that class\n */\nexport const is = <T> (ctor: { new(...args): T }) =>\n    (obj: any): obj is T =>\n        (obj != null && obj.constructor === ctor || obj instanceof ctor);\n/**\n * Given a value, returns a Predicate function that returns true if another value is === equal to the original value\n */\nexport const eq: (comp: any) => Predicate<any> = (val: any) => (other: any) =>\n    val === other;\n/**\n * Given a value, returns a function which returns the value\n */\nexport const val = <T> (v: T) => () => v;\n\n\n\nexport function invoke(fnName: string): Function;\nexport function invoke(fnName: string, args: any[]): Function;\n/**\n * @param {?} fnName\n * @param {?=} args\n * @return {?}\n */\nexport function invoke(fnName: string, args?: any[]): Function {\n  return (obj: any) =>\n      obj[fnName].apply(obj, args);\n}\n/**\n * Sorta like Pattern Matching (a functional programming conditional construct)\n * \n * See http://c2.com/cgi/wiki?PatternMatching\n * \n * This is a conditional construct which allows a series of predicates and output functions\n * to be checked and then applied.  Each predicate receives the input.  If the predicate\n * returns truthy, then its matching output function (mapping function) is provided with\n * the input and, then the result is returned.\n * \n * Each combination (2-tuple) of predicate + output function should be placed in an array\n * of size 2: [ predicate, mapFn ]\n * \n * These 2-tuples should be put in an outer array.\n * \n * \\@example \n * ```\n * \n * // Here's a 2-tuple where the first element is the isString predicate\n * // and the second element is a function that returns a description of the input\n * let firstTuple = [ angular.isString, (input) => `Heres your string ${input}` ];\n * \n * // Second tuple: predicate \"isNumber\", mapfn returns a description\n * let secondTuple = [ angular.isNumber, (input) => `(${input}) That's a number!` ];\n * \n * let third = [ (input) => input === null,  (input) => `Oh, null...` ];\n * \n * let fourth = [ (input) => input === undefined,  (input) => `notdefined` ];\n * \n * let descriptionOf = pattern([ firstTuple, secondTuple, third, fourth ]);\n * \n * console.log(descriptionOf(undefined)); // 'notdefined'\n * console.log(descriptionOf(55)); // '(55) That's a number!'\n * console.log(descriptionOf(\"foo\")); // 'Here's your string foo'\n * ```\n * \n * @param {?} struct A 2D array.  Each element of the array should be an array, a 2-tuple,\n * with a Predicate and a mapping/output function\n * @return {?}\n */\nexport function pattern(struct: Function[][]): Function {\n  return function(x: any) {\n    for (var /** @type {?} */ i = 0; i < struct.length; i++) {\n      if (struct[i][0](x)) return struct[i][1](x);\n    }\n  };\n}\n\n"],"names":["UIRouterGlobals","UIRouter","StateRegistry","ViewService","UrlService","UrlRouter","UrlMatcherFactory","TransitionService","StateService","LocationStrategy","Injector","Resolvable","NATIVE_INJECTOR_TOKEN","locationStrategy","isPlatformBrowser","PLATFORM_ID","services","servicesPlugin","UIRouterRx","BrowserLocationConfig","is","PathLocationStrategy","BaseLocationServices","val","inArray","uniqR","unnestR","Compiler","NgModuleFactoryLoader","isString","CommonModule","NgModule","HashLocationStrategy","ANALYZE_FOR_ENTRY_COMPONENTS","APP_INITIALIZER","isPlatformServer","OpaqueToken","Input","ElementRef","Host","Renderer","Directive","ContentChildren","Output","map","switchMap","combineLatest","BehaviorSubject","concat","fromPromise","of","EventEmitter","anyTrueR","PathUtils","Param","tail","Inject","Optional","extend","ReplaySubject","Renderer2","isDefined","isFunction","ViewChild","ViewContainerRef","Component","prop","ReflectiveInjector","ComponentFactoryResolver","ResolveContext","trace","parse","id","forEach","pick","deregAll","removeFrom","buildUrl","getParams","parseUrl","isArray","identity","splitEqual","keyValsToObjectR","beforeAfterSubstr","splitQuery","splitHash","defaults","Glob","silenceUncaughtInPromise","RejectType","TargetState","Rejection","silentRejection","defaultTransOpts","PathNode","isObject","Queue","noop","createProxyFunctions","not","makeEvent","TransitionEventType","TransitionHook","TransitionHookPhase","Transition","values","copy","$q","notImplemented","StateParams","equals","pairs","curry","applyPairs","UrlRuleFactory","pattern","composeSort","sortBy","pipe","UrlMatcher","BaseUrlRule","isState","DefType","ParamTypes","arrayTuples","joinNeighborsR","allTrueR","unnest","inherit","find","propEq","splitOnDelim","all","StateQueueManager","StateBuilder","StateMatcher","StateObject","resolvablesBuilder","stringify","$injector","resolvePolicies","mapObj","omit","ancestors","fromJson","toJson","isNullOrUndefined","ParamType","pushR","isInjectable","functionToString","invoke","isPromise","isNull","fnToString","mergeR","isUndefined","matchState","HookBuilder","defaultResolvePolicy","filter","assertPredicate","TransitionHookScope","RegisteredHook","maxLength","Trace","Category","padString","isNumber","any","isDate","isRegExp","assertFn","pushTo","_pushTo","_removeFrom","_inArray","_extend","and","or","compose"],"mappings":"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"}