{"version":3,"file":"angular.js","sources":["~/@uirouter/angular/angular.ts","~/@uirouter/angular/index.ts","~/@uirouter/angular/providers.ts","~/@uirouter/angular/location/locationConfig.ts","~/@uirouter/angular/location/locationService.ts","~/@uirouter/angular/statebuilders/lazyLoad.ts","~/@uirouter/angular/lazyLoad/lazyLoadNgModule.ts","~/@uirouter/angular/uiRouterNgModule.ts","~/@uirouter/angular/directives/directives.ts","~/@uirouter/angular/directives/uiSrefActive.ts","~/@uirouter/angular/directives/uiSrefStatus.ts","~/@uirouter/angular/directives/uiSref.ts","~/@uirouter/angular/uiRouterConfig.ts","~/@uirouter/angular/directives/uiView.ts","~/@uirouter/angular/mergeInjector.ts","~/@uirouter/angular/statebuilders/views.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {Ng2StateDeclaration,Ng2ViewDeclaration,Ng2Component,uiRouterFactory,parentUIViewInjectFactory,_UIROUTER_INSTANCE_PROVIDERS,fnStateService,fnTransitionService,fnUrlMatcherFactory,fnUrlRouter,fnUrlService,fnViewService,fnStateRegistry,fnGlobals,_UIROUTER_SERVICE_PROVIDERS,UIROUTER_PROVIDERS,UIROUTER_ROOT_MODULE,UIROUTER_MODULE_TOKEN,UIROUTER_STATES,onTransitionReady,makeRootProviders,makeChildProviders,locationStrategy,UIRouterModule,RootModule,StatesModule,applyModuleConfig,applyRootModuleConfig,_UIROUTER_DIRECTIVES,UIROUTER_DIRECTIVES,ParentUIViewInject,UIView,AnchorUISref,UISref,SrefStatus,UISrefStatus,UISrefActive,ng2ViewsBuilder,Ng2ViewConfig,ng2LazyLoadBuilder,ModuleTypeCallback,NgModuleToLoad,loadNgModule,loadModuleFactory,applyNgModule,multiProviderParentChildDelta,fromJson,toJson,copy,forEach,extend,equals,identity,noop,Mapper,TypedMap,Predicate,IInjectable,Obj,createProxyFunctions,inherit,inArray,_inArray,removeFrom,_removeFrom,pushTo,_pushTo,deregAll,defaults,mergeR,ancestors,pick,omit,pluck,filter,find,mapObj,map,values,allTrueR,anyTrueR,unnestR,flattenR,pushR,uniqR,unnest,flatten,assertPredicate,assertMap,assertFn,pairs,arrayTuples,applyPairs,tail,_extend,sortfn,sortBy,composeSort,silenceUncaughtInPromise,silentRejection,notImplemented,$QLikeDeferred,$QLike,$InjectorLike,CoreServices,LocationServices,LocationConfig,services,Glob,curry,compose,pipe,prop,propEq,parse,not,and,or,all,any,is,eq,val,invoke,pattern,isUndefined,isDefined,isNull,isNullOrUndefined,isFunction,isNumber,isString,isObject,isArray,isDate,isRegExp,isState,isInjectable,isPromise,Queue,maxLength,padString,kebobString,functionToString,fnToString,stringify,beforeAfterSubstr,splitOnDelim,joinNeighborsR,Category,Trace,trace,RawParams,ParamsOrArray,ParamDeclaration,Replace,ParamTypeDefinition,DefType,Param,ParamTypes,StateParams,ParamType,PathNode,GetParamsFn,PathUtils,ProviderLike,ResolvableLiteral,ResolvePolicy,PolicyWhen,PolicyAsync,resolvePolicies,defaultResolvePolicy,Resolvable,NATIVE_INJECTOR_TOKEN,ResolveContext,StateOrName,TransitionPromise,TargetStateDef,ResolveTypes,_ViewDeclaration,RedirectToResult,StateDeclaration,LazyLoadResult,HrefOptions,_StateDeclaration,BuilderFunction,resolvablesBuilder,StateBuilder,StateObject,StateMatcher,StateQueueManager,StateRegistryListener,StateRegistry,OnInvalidCallback,StateService,TargetState,TransitionOptions,TransitionHookOptions,TreeChanges,IHookRegistration,TransitionHookFn,TransitionStateHookFn,TransitionCreateHookFn,HookFn,HookResult,HookRegOptions,IHookRegistry,IStateMatch,HookMatchCriteria,IMatchingNodes,RegisteredHooks,PathTypes,PathType,HookMatchCriterion,TransitionHookPhase,TransitionHookScope,HookBuilder,matchState,RegisteredHook,makeEvent,RejectType,Rejection,Transition,GetResultHandler,GetErrorHandler,ResultHandler,ErrorHandler,TransitionHook,TransitionEventType,defaultTransOpts,TransitionServicePluginAPI,TransitionService,ParamFactory,UrlConfigApi,UrlMatcherConfig,UrlSyncApi,UrlRulesApi,UrlParts,MatchResult,UrlRuleMatchFn,UrlRuleHandlerFn,UrlRuleType,UrlRule,MatcherUrlRule,StateRule,RegExpRule,UrlMatcher,UrlMatcherFactory,UrlRouter,UrlRuleFactory,BaseUrlRule,UrlService,ViewContext,ActiveUIView,ViewConfig,ViewConfigFactory,ViewServicePluginAPI,ViewService,UIRouterGlobals,UIRouter,PluginFactory,LocationPlugin,ServicesPlugin,LocationLike,HistoryLike,$q,$injector,BaseLocationServices,HashLocationService,MemoryLocationService,PushStateLocationService,MemoryLocationConfig,BrowserLocationConfig,splitHash,splitQuery,splitEqual,trimHashVal,keyValsToObjectR,getParams,parseUrl,buildUrl,locationPluginFactory,servicesPlugin,hashLocationPlugin,pushStateLocationPlugin,memoryLocationPlugin,UIInjector,UIRouterPlugin,UIRouterPluginBase,Disposable} from './public_api';\n","/** @ng2api @module ng2 */ /** for typedoc */\n\nexport {Ng2StateDeclaration,Ng2ViewDeclaration,Ng2Component} from './interface';\nexport {uiRouterFactory,parentUIViewInjectFactory,_UIROUTER_INSTANCE_PROVIDERS,fnStateService,fnTransitionService,fnUrlMatcherFactory,fnUrlRouter,fnUrlService,fnViewService,fnStateRegistry,fnGlobals,_UIROUTER_SERVICE_PROVIDERS,UIROUTER_PROVIDERS} from './providers';\nexport {UIROUTER_ROOT_MODULE,UIROUTER_MODULE_TOKEN,UIROUTER_STATES,onTransitionReady,makeRootProviders,makeChildProviders,locationStrategy,UIRouterModule,RootModule,StatesModule} from './uiRouterNgModule';\nexport {applyModuleConfig,applyRootModuleConfig} from './uiRouterConfig';\nexport {_UIROUTER_DIRECTIVES,UIROUTER_DIRECTIVES,ParentUIViewInject,UIView,AnchorUISref,UISref,SrefStatus,UISrefStatus,UISrefActive} from './directives/directives';\nexport {ng2ViewsBuilder,Ng2ViewConfig} from './statebuilders/views';\nexport {ng2LazyLoadBuilder} from './statebuilders/lazyLoad';\nexport {ModuleTypeCallback,NgModuleToLoad,loadNgModule,loadModuleFactory,applyNgModule,multiProviderParentChildDelta} from './lazyLoad/lazyLoadNgModule';\n\nexport {fromJson,toJson,copy,forEach,extend,equals,identity,noop,Mapper,TypedMap,Predicate,IInjectable,Obj,createProxyFunctions,inherit,inArray,_inArray,removeFrom,_removeFrom,pushTo,_pushTo,deregAll,defaults,mergeR,ancestors,pick,omit,pluck,filter,find,mapObj,map,values,allTrueR,anyTrueR,unnestR,flattenR,pushR,uniqR,unnest,flatten,assertPredicate,assertMap,assertFn,pairs,arrayTuples,applyPairs,tail,_extend,sortfn,sortBy,composeSort,silenceUncaughtInPromise,silentRejection,notImplemented,$QLikeDeferred,$QLike,$InjectorLike,CoreServices,LocationServices,LocationConfig,services,Glob,curry,compose,pipe,prop,propEq,parse,not,and,or,all,any,is,eq,val,invoke,pattern,isUndefined,isDefined,isNull,isNullOrUndefined,isFunction,isNumber,isString,isObject,isArray,isDate,isRegExp,isState,isInjectable,isPromise,Queue,maxLength,padString,kebobString,functionToString,fnToString,stringify,beforeAfterSubstr,splitOnDelim,joinNeighborsR,Category,Trace,trace,RawParams,ParamsOrArray,ParamDeclaration,Replace,ParamTypeDefinition,DefType,Param,ParamTypes,StateParams,ParamType,PathNode,GetParamsFn,PathUtils,ProviderLike,ResolvableLiteral,ResolvePolicy,PolicyWhen,PolicyAsync,resolvePolicies,defaultResolvePolicy,Resolvable,NATIVE_INJECTOR_TOKEN,ResolveContext,StateOrName,TransitionPromise,TargetStateDef,ResolveTypes,_ViewDeclaration,RedirectToResult,StateDeclaration,LazyLoadResult,HrefOptions,_StateDeclaration,BuilderFunction,resolvablesBuilder,StateBuilder,StateObject,StateMatcher,StateQueueManager,StateRegistryListener,StateRegistry,OnInvalidCallback,StateService,TargetState,TransitionOptions,TransitionHookOptions,TreeChanges,IHookRegistration,TransitionHookFn,TransitionStateHookFn,TransitionCreateHookFn,HookFn,HookResult,HookRegOptions,IHookRegistry,IStateMatch,HookMatchCriteria,IMatchingNodes,RegisteredHooks,PathTypes,PathType,HookMatchCriterion,TransitionHookPhase,TransitionHookScope,HookBuilder,matchState,RegisteredHook,makeEvent,RejectType,Rejection,Transition,GetResultHandler,GetErrorHandler,ResultHandler,ErrorHandler,TransitionHook,TransitionEventType,defaultTransOpts,TransitionServicePluginAPI,TransitionService,ParamFactory,UrlConfigApi,UrlMatcherConfig,UrlSyncApi,UrlRulesApi,UrlParts,MatchResult,UrlRuleMatchFn,UrlRuleHandlerFn,UrlRuleType,UrlRule,MatcherUrlRule,StateRule,RegExpRule,UrlMatcher,UrlMatcherFactory,UrlRouter,UrlRuleFactory,BaseUrlRule,UrlService,ViewContext,ActiveUIView,ViewConfig,ViewConfigFactory,ViewServicePluginAPI,ViewService,UIRouterGlobals,UIRouter,PluginFactory,LocationPlugin,ServicesPlugin,LocationLike,HistoryLike,$q,$injector,BaseLocationServices,HashLocationService,MemoryLocationService,PushStateLocationService,MemoryLocationConfig,BrowserLocationConfig,splitHash,splitQuery,splitEqual,trimHashVal,keyValsToObjectR,getParams,parseUrl,buildUrl,locationPluginFactory,servicesPlugin,hashLocationPlugin,pushStateLocationPlugin,memoryLocationPlugin,UIInjector,UIRouterPlugin,UIRouterPluginBase,Disposable} from '@uirouter/core/index';\n","/**\n * # UI-Router for Angular (v2+)\n *\n * - [@uirouter/angular home page](https://ui-router.github.io/ng2)\n * - [tutorials](https://ui-router.github.io/tutorial/ng2/helloworld)\n * - [quick start repository](http://github.com/ui-router/quickstart-ng2)\n *\n * Getting started:\n *\n * - Use npm. Add a dependency on latest `@uirouter/angular`\n * - Import UI-Router classes directly from `\"@uirouter/angular\"`\n *\n * ```js\n * import {StateRegistry} from \"@uirouter/angular\";\n * ```\n *\n * - Create application states (as defined by [[Ng2StateDeclaration]]).\n *\n * ```js\n * export let state1: Ng2StateDeclaration = {\n *   name: 'state1',\n *   component: State1Component,\n *   url: '/one'\n * }\n *\n * export let state2: Ng2StateDeclaration = {\n *   name: 'state2',\n *   component: State2Component,\n *   url: '/two'\n * }\n * ```\n *\n * - Import a [[UIRouterModule.forChild]] module into your feature `NgModule`s.\n *\n * ```js\n * @ NgModule({\n *   imports: [\n *     SharedModule,\n *     UIRouterModule.forChild({ states: [state1, state2 ] })\n *   ],\n *   declarations: [\n *     State1Component,\n *     State2Component,\n *   ]\n * })\n * export class MyFeatureModule {}\n * ```\n *\n * - Import a [[UIRouterModule.forRoot]] module into your application root `NgModule`\n * - Either bootstrap a [[UIView]] component, or add a `<ui-view></ui-view>` viewport to your root component.\n *\n * ```js\n * @ NgModule({\n *   imports: [\n *     BrowserModule,\n *     UIRouterModule.forRoot({ states: [ homeState ] }),\n *     MyFeatureModule,\n *   ],\n *   declarations: [\n *     HomeComponent\n *   ]\n *   bootstrap: [ UIView ]\n * })\n * class RootAppModule {}\n *\n * browserPlatformDynamic.bootstrapModule(RootAppModule);\n * ```\n *\n * - Optionally specify a configuration class [[ChildModule.configClass]] for any module\n * to perform any router configuration during bootstrap or lazyload.\n * Pass the class to [[UIRouterModule.forRoot]] or [[UIRouterModule.forChild]].\n *\n * ```js\n * import {UIRouter} from \"@uirouter/angular\";\n *\n * @ Injectable()\n * export class MyUIRouterConfig {\n *   // Constructor is injectable\n *   constructor(uiRouter: UIRouter) {\n *     uiRouter.urlMatcherFactory.type('datetime', myDateTimeParamType);\n *   }\n * }\n * ```\n *\n * @preferred @module ng2\n */\n/** */\n\nimport { Injector, Provider, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport {\n  UIRouter, PathNode, StateRegistry, StateService, TransitionService, UrlMatcherFactory, UrlRouter, ViewService,\n  UrlService, UIRouterGlobals, services, Resolvable, NATIVE_INJECTOR_TOKEN,\n} from '@uirouter/core/index';\nimport { UIView, ParentUIViewInject } from './directives/uiView';\nimport { ng2ViewsBuilder, Ng2ViewConfig } from './statebuilders/views';\nimport { Ng2ViewDeclaration } from './interface';\nimport { applyRootModuleConfig, applyModuleConfig } from './uiRouterConfig';\nimport { RootModule, StatesModule, UIROUTER_ROOT_MODULE, UIROUTER_MODULE_TOKEN } from './uiRouterNgModule';\nimport { servicesPlugin, ServicesPlugin } from '@uirouter/core/index';\nimport { ng2LazyLoadBuilder } from './statebuilders/lazyLoad';\nimport { UIRouterRx } from '@uirouter/rx/index';\nimport { LocationStrategy } from '@angular/common';\nimport { Ng2LocationServices } from './location/locationService';\nimport { Ng2LocationConfig } from './location/locationConfig';\n/**\n * This is a factory function for a UIRouter instance\n * \n * Creates a UIRouter instance and configures it for Angular, then invokes router bootstrap.\n * This function is used as an Angular `useFactory` Provider.\n * @param {?} locationStrategy\n * @param {?} rootModules\n * @param {?} modules\n * @param {?} injector\n * @return {?}\n */\nexport function uiRouterFactory(locationStrategy: LocationStrategy, rootModules: RootModule[], modules: StatesModule[], injector: Injector) {\n  if (rootModules.length !== 1) {\n    throw new Error(\"Exactly one UIRouterModule.forRoot() should be in the bootstrapped app module's imports: []\");\n  }\n\n  // ----------------- Create router -----------------\n  // Create a new ng2 UIRouter and configure it for ng2\n  let /** @type {?} */ router = new UIRouter();\n\n  // Add RxJS plugin\n  router.plugin(UIRouterRx);\n\n  // Add $q-like and $injector-like service APIs\n  router.plugin<ServicesPlugin>(servicesPlugin);\n\n\n  // ----------------- Monkey Patches ----------------\n  // Monkey patch the services.$injector to use the root ng2 Injector\n  services.$injector.get = injector.get.bind(injector);\n\n\n  // ----------------- Configure for ng2 -------------\n  router.locationService = new Ng2LocationServices(router, locationStrategy, isPlatformBrowser(injector.get(PLATFORM_ID)));\n  router.locationConfig = new Ng2LocationConfig(router, locationStrategy);\n\n  // Apply ng2 ui-view handling code\n  let /** @type {?} */ viewConfigFactory = (path: PathNode[], config: Ng2ViewDeclaration) => new Ng2ViewConfig(path, config);\n  router.viewService._pluginapi._viewConfigFactory(\"ng2\", viewConfigFactory);\n\n  // Apply statebuilder decorator for ng2 NgModule registration\n  let /** @type {?} */ registry = router.stateRegistry;\n  registry.decorator('views', ng2ViewsBuilder);\n  registry.decorator('lazyLoad', ng2LazyLoadBuilder);\n\n  // Prep the tree of NgModule by placing the root NgModule's Injector on the root state.\n  let /** @type {?} */ ng2InjectorResolvable = Resolvable.fromData(NATIVE_INJECTOR_TOKEN, injector);\n  registry.root().resolvables.push(ng2InjectorResolvable);\n\n  // Auto-flush the parameter type queue\n  router.urlMatcherFactory.$get();\n\n  // ----------------- Initialize router -------------\n  rootModules.forEach(moduleConfig => applyRootModuleConfig(router, injector, moduleConfig));\n  modules.forEach(moduleConfig => applyModuleConfig(router, injector, moduleConfig));\n\n  // Start monitoring the URL\n  if (!router.urlRouter.interceptDeferred) {\n    router.urlService.listen();\n    router.urlService.sync();\n  }\n\n  return router;\n}\n/**\n * @param {?} r\n * @return {?}\n */\nexport function parentUIViewInjectFactory(r: StateRegistry) { return /** @type {?} */(( { fqn: null, context: r.root() } as ParentUIViewInject)); }\n\nexport const /** @type {?} */ _UIROUTER_INSTANCE_PROVIDERS: Provider[] =  [\n  { provide: UIRouter, useFactory: uiRouterFactory, deps: [LocationStrategy, UIROUTER_ROOT_MODULE, UIROUTER_MODULE_TOKEN, Injector] },\n  { provide: UIView.PARENT_INJECT, useFactory: parentUIViewInjectFactory, deps: [StateRegistry]},\n];\n/**\n * @param {?} r\n * @return {?}\n */\nexport function fnStateService(r: UIRouter) { return r.stateService; }\n/**\n * @param {?} r\n * @return {?}\n */\nexport function fnTransitionService(r: UIRouter) { return r.transitionService; }\n/**\n * @param {?} r\n * @return {?}\n */\nexport function fnUrlMatcherFactory(r: UIRouter) { return r.urlMatcherFactory; }\n/**\n * @param {?} r\n * @return {?}\n */\nexport function fnUrlRouter(r: UIRouter) { return r.urlRouter; }\n/**\n * @param {?} r\n * @return {?}\n */\nexport function fnUrlService(r: UIRouter) { return r.urlService; }\n/**\n * @param {?} r\n * @return {?}\n */\nexport function fnViewService(r: UIRouter) { return r.viewService; }\n/**\n * @param {?} r\n * @return {?}\n */\nexport function fnStateRegistry(r: UIRouter) { return r.stateRegistry; }\n/**\n * @param {?} r\n * @return {?}\n */\nexport function fnGlobals(r: any) { return r.globals; }\n\nexport const /** @type {?} */ _UIROUTER_SERVICE_PROVIDERS: Provider[] = [\n  { provide: StateService,      useFactory: fnStateService,       deps: [UIRouter]},\n  { provide: TransitionService, useFactory: fnTransitionService,  deps: [UIRouter]},\n  { provide: UrlMatcherFactory, useFactory: fnUrlMatcherFactory,  deps: [UIRouter]},\n  { provide: UrlRouter,         useFactory: fnUrlRouter,          deps: [UIRouter]},\n  { provide: UrlService,        useFactory: fnUrlService,         deps: [UIRouter]},\n  { provide: ViewService,       useFactory: fnViewService,        deps: [UIRouter]},\n  { provide: StateRegistry,     useFactory: fnStateRegistry,      deps: [UIRouter]},\n  { provide: UIRouterGlobals,   useFactory: fnGlobals,            deps: [UIRouter]},\n];\n/**\n * The UI-Router providers, for use in your application bootstrap\n * \n * @deprecated use [[UIRouterModule.forRoot]]\n */\nexport const UIROUTER_PROVIDERS: Provider[] = _UIROUTER_INSTANCE_PROVIDERS.concat(_UIROUTER_SERVICE_PROVIDERS);\n","/** @module ng2 */\n/** */\n\n\nimport { UIRouter, is, BrowserLocationConfig } from '@uirouter/core/index';\nimport { LocationStrategy, PathLocationStrategy } from '@angular/common';\nexport class Ng2LocationConfig extends BrowserLocationConfig {\n/**\n * @param {?} router\n * @param {?} _locationStrategy\n */\nconstructor(router: UIRouter,\nprivate _locationStrategy: LocationStrategy) {\n    super(router, is(PathLocationStrategy)(_locationStrategy))\n  }\n/**\n * @param {?=} href\n * @return {?}\n */\nbaseHref(href?: string): string {\n    return this._locationStrategy.getBaseHref();\n  }\n}\n\nfunction Ng2LocationConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nNg2LocationConfig.prototype._locationStrategy;\n}\n\n","/** @module ng2 */\n/** */\n\nimport { BaseLocationServices, parseUrl, UIRouter } from '@uirouter/core/index';\nimport { LocationStrategy } from '@angular/common';\n/**\n * A `LocationServices` that delegates to the Angular LocationStrategy\n */\nexport class Ng2LocationServices extends BaseLocationServices {\n/**\n * @param {?} router\n * @param {?} _locationStrategy\n * @param {?} isBrowser\n */\nconstructor(router: UIRouter,\nprivate _locationStrategy: LocationStrategy, isBrowser: boolean) {\n    super(router, isBrowser);\n\n    this._locationStrategy.onPopState((evt) => {\n      if (evt.type !== 'hashchange') {\n        this._listener(evt);\n      }\n    });\n  }\n/**\n * @return {?}\n */\n_get() {\n    return this._locationStrategy.path(true)\n      .replace(this._locationStrategy.getBaseHref().replace(/\\/$/, ''), '');\n  }\n/**\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @param {?} replace\n * @return {?}\n */\n_set(state: any, title: string, url: string, replace: boolean): any {\n    let { path, search, hash } = parseUrl(url);\n    let /** @type {?} */ urlWithHash = path + (hash ? \"#\" + hash : \"\");\n\n    if (replace) {\n      this._locationStrategy.replaceState(state, title, urlWithHash, search);\n    } else {\n      this._locationStrategy.pushState(state, title, urlWithHash, search);\n    }\n  }\n/**\n * @param {?} router\n * @return {?}\n */\ndispose(router: UIRouter) {\n    super.dispose(router);\n  }\n}\n\nfunction Ng2LocationServices_tsickle_Closure_declarations() {\n/** @type {?} */\nNg2LocationServices.prototype._locationStrategy;\n}\n\n","/** @module ng2 */\n/** */\n\nimport { LazyLoadResult, Transition, StateDeclaration } from '@uirouter/core/index'; // has or is using\n\nimport { BuilderFunction, StateObject } from '@uirouter/core/index';\nimport { loadNgModule } from '../lazyLoad/lazyLoadNgModule';\n/**\n * This is a [[StateBuilder.builder]] function for ngModule lazy loading in Angular.\n * \n * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n * decorates the `lazyLoad` property for states that have a [[Ng2StateDeclaration.ngModule]] declaration.\n * \n * If the state has a [[Ng2StateDeclaration.ngModule]], it will create a `lazyLoad` function\n * that in turn calls `loadNgModule(loadNgModuleFn)`.\n * \n * #### Example:\n * A state that has a `ngModule`\n * ```js\n * var decl = {\n *   ngModule: () => System.import('./childModule.ts')\n * }\n * ```\n * would build a state with a `lazyLoad` function like:\n * ```js\n * import { loadNgModule } from \"\\@uirouter/angular\";\n * var decl = {\n *   lazyLoad: loadNgModule(() => System.import('./childModule.ts')\n * }\n * ```\n * \n * If the state has both a `ngModule:` *and* a `lazyLoad`, then the `lazyLoad` is run first.\n * \n * #### Example:\n * ```js\n * var decl = {\n *   lazyLoad: () => System.import('third-party-library'),\n *   ngModule: () => System.import('./childModule.ts')\n * }\n * ```\n * would build a state with a `lazyLoad` function like:\n * ```js\n * import { loadNgModule } from \"\\@uirouter/angular\";\n * var decl = {\n *   lazyLoad: () => System.import('third-party-library')\n *       .then(() => loadNgModule(() => System.import('./childModule.ts'))\n * }\n * ```\n * \n * @param {?} state\n * @param {?} parent\n * @return {?}\n */\nexport function ng2LazyLoadBuilder(state: StateObject, parent: BuilderFunction) {\n  let /** @type {?} */ loadNgModuleFn = state['loadChildren'];\n  return loadNgModuleFn ? loadNgModule(loadNgModuleFn) : state.lazyLoad;\n}\n","/** @ng2api @module core */\n/** */\n\nimport { NgModuleRef, Injector, NgModuleFactory, Type, Compiler, NgModuleFactoryLoader } from '@angular/core';\nimport {\n  Transition, LazyLoadResult, UIRouter, Resolvable, NATIVE_INJECTOR_TOKEN, isString, unnestR, inArray, StateObject,\n  uniqR\n} from '@uirouter/core/index';\nimport { RootModule, UIROUTER_ROOT_MODULE, UIROUTER_MODULE_TOKEN, StatesModule } from '../uiRouterNgModule';\nimport { applyModuleConfig } from '../uiRouterConfig';\n\n/**\n * A function that returns an NgModule, or a promise for an NgModule\n *\n * #### Example:\n * ```js\n * export function loadFooModule() {\n *   return System.import('../foo/foo.module').then(result => result.FooModule);\n * }\n * ```\n */\nexport type ModuleTypeCallback = () => Type<any> | Promise<Type<any>>;\n/**\n * A string or a function which lazy loads a module\n *\n * If a string, should conform to the Angular Router `loadChildren` string.\n * #### Example:\n * ```\n * var ngModuleToLoad = './foo/foo.module#FooModule'\n * ```\n *\n * For functions, see: [[ModuleTypeCallback]]\n */\nexport type NgModuleToLoad = string | ModuleTypeCallback;\n/**\n * Returns a function which lazy loads a nested module\n * \n * This is primarily used by the [[ng2LazyLoadBuilder]] when processing [[Ng2StateDeclaration.loadChildren]].\n * \n * It could also be used manually as a [[StateDeclaration.lazyLoad]] property to lazy load an `NgModule` and its state(s).\n * \n * #### Example:\n * Using `System.import()` and named export of `HomeModule`\n * ```js\n * declare var System;\n * var futureState = {\n *   name: 'home.**',\n *   url: '/home',\n *   lazyLoad: loadNgModule(() => System.import('./home/home.module').then(result => result.HomeModule))\n * }\n * ```\n * \n * #### Example:\n * Using a path (string) to the module\n * ```js\n * var futureState = {\n *   name: 'home.**',\n *   url: '/home',\n *   lazyLoad: loadNgModule('./home/home.module#HomeModule')\n * }\n * ```\n * \n * \n * @param {?} moduleToLoad a path (string) to the NgModule to load.\n *    Or a function which loads the NgModule code which should\n *    return a reference to  the `NgModule` class being loaded (or a `Promise` for it).\n * \n * @return {?} A function which takes a transition, which:\n * - Gets the Injector (scoped properly for the destination state)\n * - Loads and creates the NgModule\n * - Finds the \"replacement state\" for the target state, and adds the new NgModule Injector to it (as a resolve)\n * - Returns the new states array\n */\nexport function loadNgModule(moduleToLoad: NgModuleToLoad): (transition: Transition) => Promise<LazyLoadResult> {\n  return (transition: Transition) => {\n    const /** @type {?} */ ng2Injector = transition.injector().get(NATIVE_INJECTOR_TOKEN);\n\n    const /** @type {?} */ createModule = (factory: NgModuleFactory<any>) =>\n        factory.create(ng2Injector);\n\n    const /** @type {?} */ applyModule = (moduleRef: NgModuleRef<any>) =>\n        applyNgModule(transition, moduleRef);\n\n    return loadModuleFactory(moduleToLoad, ng2Injector)\n        .then(createModule)\n        .then(applyModule);\n  };\n}\n/**\n * Returns the module factory that can be used to instantiate a module\n * \n * For strings this:\n * - Finds the correct NgModuleFactoryLoader\n * - Loads the new NgModuleFactory from the path string (async)\n * \n * For a Type<any> or Promise<Type<any>> this:\n * - Compiles the component type (if not running with AOT)\n * - Returns the NgModuleFactory resulting from compilation (or direct loading if using AOT) as a Promise\n * \n * \\@internalapi\n * @param {?} moduleToLoad\n * @param {?} ng2Injector\n * @return {?}\n */\nexport function loadModuleFactory(moduleToLoad: NgModuleToLoad, ng2Injector: Injector): Promise<NgModuleFactory<any>> {\n  if (isString(moduleToLoad)) {\n    return ng2Injector.get(NgModuleFactoryLoader).load(moduleToLoad);\n  }\n\n  const /** @type {?} */ compiler: Compiler = ng2Injector.get(Compiler);\n  const /** @type {?} */ offlineMode = compiler instanceof Compiler;\n\n  const /** @type {?} */ unwrapEsModuleDefault = x =>\n      x && x.__esModule && x['default'] ? x['default'] : x;\n  const /** @type {?} */ compileAsync = (moduleType: Type<any>) =>\n      compiler.compileModuleAsync(moduleType);\n\n  const /** @type {?} */ loadChildrenPromise = Promise.resolve(moduleToLoad()).then(unwrapEsModuleDefault);\n  return offlineMode ? loadChildrenPromise : loadChildrenPromise.then(compileAsync);\n}\n/**\n * Apply the UI-Router Modules found in the lazy loaded module.\n * \n * Apply the Lazy Loaded NgModule's newly created Injector to the right state in the state tree.\n * \n * Lazy loading uses a placeholder state which is removed (and replaced) after the module is loaded.\n * The NgModule should include a state with the same name as the placeholder.\n * \n * Find the *newly loaded state* with the same name as the *placeholder state*.\n * The NgModule's Injector (and ComponentFactoryResolver) will be added to that state.\n * The Injector/Factory are used when creating Components for the `replacement` state and all its children.\n * \n * \\@internalapi\n * @param {?} transition\n * @param {?} ng2Module\n * @return {?}\n */\nexport function applyNgModule(transition: Transition, ng2Module: NgModuleRef<any>): LazyLoadResult {\n  let /** @type {?} */ injector = ng2Module.injector;\n  let /** @type {?} */ parentInjector = /** @type {?} */(( <Injector> ng2Module.injector['parent'])) || ng2Module.injector['_parent'];\n  let /** @type {?} */ uiRouter: UIRouter = injector.get(UIRouter);\n  let /** @type {?} */ registry = uiRouter.stateRegistry;\n\n  let /** @type {?} */ originalName = transition.to().name;\n  let /** @type {?} */ originalState = registry.get(originalName);\n  // Check if it's a future state (ends with .**)\n  let /** @type {?} */ isFuture = /^(.*)\\.\\*\\*$/.exec(originalName);\n  // Final name (without the .**)\n  let /** @type {?} */ replacementName = isFuture && isFuture[1];\n\n  let /** @type {?} */ newRootModules = /** @type {?} */(( multiProviderParentChildDelta(parentInjector, injector, UIROUTER_ROOT_MODULE)\n      .reduce(uniqR, []) as RootModule[]));\n  let /** @type {?} */ newChildModules= /** @type {?} */(( multiProviderParentChildDelta(parentInjector, injector, UIROUTER_MODULE_TOKEN)\n      .reduce(uniqR, []) as StatesModule[]));\n\n  if (newRootModules.length) {\n    console.log(newRootModules);\n    throw new Error('Lazy loaded modules should not contain a UIRouterModule.forRoot() module');\n  }\n\n  let /** @type {?} */ newStateObjects: StateObject[] = newChildModules\n      .map(module => applyModuleConfig(uiRouter, injector, module))\n      .reduce(unnestR, [])\n      .reduce(uniqR, []);\n\n  let /** @type {?} */ replacementState = registry.get(replacementName);\n  if (!replacementState || replacementState === originalState) {\n    throw new Error(`The Future State named '${originalName}' lazy loaded an NgModule. ` +\n        `The lazy loaded NgModule must have a state named '${replacementName}' ` +\n        `which replaces the (placeholder) '${originalName}' Future State. ` +\n        `Add a '${replacementName}' state to the lazy loaded NgModule ` +\n        `using UIRouterModule.forChild({ states: CHILD_STATES }).`);\n  }\n\n  // Supply the newly loaded states with the Injector from the lazy loaded NgModule.\n  // If a tree of states is lazy loaded, only add the injector to the root of the lazy loaded tree.\n  // The children will get the injector by resolve inheritance.\n  let /** @type {?} */ newParentStates = newStateObjects.filter(state => !inArray(newStateObjects, state.parent));\n\n  // Add the Injector to the top of the lazy loaded state tree as a resolve\n  newParentStates.forEach(state => state.resolvables.push(Resolvable.fromData(NATIVE_INJECTOR_TOKEN, injector)));\n\n  return {};\n}\n/**\n * Returns the new dependency injection values from the Child Injector\n * \n * When a DI token is defined as multi: true, the child injector\n * can add new values for the token.\n * \n * This function returns the values added by the child injector,  and excludes all values from the parent injector.\n * \n * \\@internalapi\n * @param {?} parent\n * @param {?} child\n * @param {?} token\n * @return {?}\n */\nexport function multiProviderParentChildDelta(parent: Injector, child: Injector, token: any) {\n  let /** @type {?} */ childVals: RootModule[] = child.get(token, []);\n  let /** @type {?} */ parentVals: RootModule[] = parent.get(token, []);\n  return childVals.filter(val => parentVals.indexOf(val) === -1);\n}\n","/** @ng2api @module core */\n/** */\n\nimport { Ng2StateDeclaration } from './interface';\nimport {\n  NgModule, OpaqueToken, ModuleWithProviders, ANALYZE_FOR_ENTRY_COMPONENTS, Provider, Injector, APP_INITIALIZER, PLATFORM_ID,\n} from '@angular/core';\nimport { CommonModule, LocationStrategy, HashLocationStrategy, PathLocationStrategy, isPlatformServer } from '@angular/common';\nimport { _UIROUTER_DIRECTIVES } from './directives/directives';\nimport { UIView } from './directives/uiView';\nimport { UrlRuleHandlerFn, TargetState, TargetStateDef, UIRouter, TransitionService } from '@uirouter/core/index';\nimport { _UIROUTER_INSTANCE_PROVIDERS, _UIROUTER_SERVICE_PROVIDERS } from './providers';\n/**\n * @hidden\n */\nexport const UIROUTER_ROOT_MODULE  = new OpaqueToken(\"UIRouter Root Module\");\n/**\n * @hidden\n */\nexport const UIROUTER_MODULE_TOKEN = new OpaqueToken(\"UIRouter Module\");\n/**\n * @hidden\n */\nexport const UIROUTER_STATES       = new OpaqueToken(\"UIRouter States\");\n/**\n * @param {?} transitionService\n * @param {?} plateformId\n * @return {?}\n */\nexport function onTransitionReady(transitionService: TransitionService, plateformId) {\n    if (isPlatformServer(plateformId)) {\n       return () => Promise.resolve();\n    }\n\n    return () => new Promise(resolve => {\n        let /** @type {?} */ eventHooks = [];\n        ['onSuccess', 'onError'].map(hook => {\n            const /** @type {?} */ unsubscriberEventHook = transitionService[hook]({}, (transition) => {\n                eventHooks.map(unsubscriber => unsubscriber());\n                resolve();\n            });\n            eventHooks.push(unsubscriberEventHook);\n        });\n    });\n}\n/**\n * @param {?} module\n * @return {?}\n */\nexport function makeRootProviders(module: StatesModule): Provider[] {\n    return [\n        { provide: UIROUTER_ROOT_MODULE,         useValue: module,              multi: true},\n        { provide: UIROUTER_MODULE_TOKEN,        useValue: module,              multi: true },\n        // { provide: ROUTES,                       useValue: module.states || [], multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: module.states || [], multi: true },\n        { provide: APP_INITIALIZER, useFactory: onTransitionReady, deps: [TransitionService, PLATFORM_ID], multi: true },\n    ];\n}\n/**\n * @param {?} module\n * @return {?}\n */\nexport function makeChildProviders(module: StatesModule): Provider[] {\n    return [\n        { provide: UIROUTER_MODULE_TOKEN,        useValue: module,              multi: true },\n        // { provide: ROUTES,                       useValue: module.states || [], multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: module.states || [], multi: true },\n    ];\n}\n/**\n * @param {?} useHash\n * @return {?}\n */\nexport function locationStrategy(useHash) {\n    return { provide: LocationStrategy, useClass: useHash ? HashLocationStrategy : PathLocationStrategy };\n}\n/**\n * Creates UI-Router Modules\n * \n * This class has two static factory methods which create UIRouter Modules.\n * A UI-Router Module is an [Angular NgModule](https://angular.io/docs/ts/latest/guide/ngmodule.html)\n * with support for UI-Router.\n * \n * ### UIRouter Directives\n * \n * When a UI-Router Module is imported into a `NgModule`, that module's components\n * can use the UIRouter Directives such as [[UIView]], [[UISref]], [[UISrefActive]].\n * \n * ### State Definitions\n * \n * State definitions found in the `states:` property are provided to the Dependency Injector.\n * This enables UI-Router to automatically register the states with the [[StateRegistry]] at bootstrap (and during lazy load).\n * \n * ### Entry Components\n * \n * Any routed components are added as `entryComponents:` so they will get compiled.\n */\nexport class UIRouterModule {\n/**\n * Creates a UI-Router Module for the root (bootstrapped) application module to import\n * \n * This factory function creates an [Angular NgModule](https://angular.io/docs/ts/latest/guide/ngmodule.html)\n * with UI-Router support.\n * \n * The `forRoot` module should be added to the `imports:` of the `NgModule` being bootstrapped.\n * An application should only create and import a single `NgModule` using `forRoot()`.\n * All other modules should be created using [[UIRouterModule.forChild]].\n * \n * Unlike `forChild`, an `NgModule` returned by this factory provides the [[UIRouter]] singleton object.\n * This factory also accepts root-level router configuration.\n * These are the only differences between `forRoot` and `forChild`.\n * \n * Example:\n * ```js\n * let routerConfig = {\n *   otherwise: '/home',\n *   states: [homeState, aboutState]\n * };\n * \n * \\@ NgModule({\n *   imports: [\n *     BrowserModule,\n *     UIRouterModule.forRoot(routerConfig),\n *     FeatureModule1\n *   ]\n * })\n * class MyRootAppModule {}\n * \n * browserPlatformDynamic.bootstrapModule(MyRootAppModule);\n * ```\n * \n * @param {?=} config declarative UI-Router configuration\n * @return {?} an `NgModule` which provides the [[UIRouter]] singleton instance\n */\nstatic forRoot(config: RootModule = {}): ModuleWithProviders {\n    return {\n      ngModule: UIRouterModule,\n      providers: [\n        _UIROUTER_INSTANCE_PROVIDERS,\n        _UIROUTER_SERVICE_PROVIDERS,\n        locationStrategy(config.useHash),\n        ...makeRootProviders(config),\n      ]\n    };\n  }\n/**\n * Creates an `NgModule` for a UIRouter module\n * \n * This function creates an [Angular NgModule](https://angular.io/docs/ts/latest/guide/ngmodule.html)\n * with UI-Router support.\n * \n * #### Example:\n * ```js\n * var homeState = { name: 'home', url: '/home', component: Home };\n * var aboutState = { name: 'about', url: '/about', component: About };\n * \n * \\@ NgModule({\n *   imports: [\n *     UIRouterModule.forChild({ states: [ homeState, aboutState ] }),\n *     SharedModule,\n *   ],\n *   declarations: [ Home, About ],\n * })\n * export class AppModule {};\n * ```\n * \n * @param {?=} module UI-Router module options\n * @return {?} an `NgModule`\n */\nstatic forChild(module: StatesModule = {}): ModuleWithProviders {\n    return {\n      ngModule: UIRouterModule,\n      providers: makeChildProviders(module),\n    };\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule],\n  declarations: [_UIROUTER_DIRECTIVES],\n  exports: [_UIROUTER_DIRECTIVES],\n  entryComponents: [UIView],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction UIRouterModule_tsickle_Closure_declarations() {\n/** @type {?} */\nUIRouterModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUIRouterModule.ctorParameters;\n}\n\n\n/**\n * UI-Router declarative configuration which can be provided to [[UIRouterModule.forRoot]]\n */\nexport interface RootModule extends StatesModule {\n  /**\n   * Chooses a `LocationStrategy`.\n   *\n   * The location strategy enables either HTML5 Push State\n   * (Requires server-side support) or \"HashBang\" URLs.\n   *\n   * When `false`, uses [`PathLocationStrategy`](https://angular.io/docs/ts/latest/api/common/index/PathLocationStrategy-class.html)\n   * When `true`, uses [`HashLocationStrategy`](https://angular.io/docs/ts/latest/api/common/index/HashLocationStrategy-class.html)\n   *\n   * Defaults to `false`\n   */\n  useHash?: boolean;\n\n  /**\n   * Sets [[UrlRouterProvider.otherwise]].\n   */\n  otherwise?: (string | UrlRuleHandlerFn | TargetState | TargetStateDef);\n\n  /**\n   * Sets [[UrlRouterProvider.deferIntercept]]\n   */\n  deferIntercept?: boolean;\n}\n\n/**\n * UI-Router Module declarative configuration which can be passed to [[UIRouterModule.forChild]]\n */\nexport interface StatesModule {\n  /**\n   * The module's UI-Router states\n   *\n   * This list of [[Ng2StateDeclaration]] objects will be registered with the [[StateRegistry]].\n   * Also, the components that the states route to will be added to `entryComponents` so they will be compiled.\n   */\n  states?: Ng2StateDeclaration[];\n\n  /**\n   * A UI-Router Module's imperative configuration\n   *\n   * If a UI-Router Module needs to perform some configuration (such as registering\n   * parameter types or Transition Hooks) a `configFn` should be supplied.\n   * The function will be passed the `UIRouter` instance, the module's `Injector`,\n   * and the module object.\n   *\n   * #### Example:\n   * ```js\n   * import { Injector } from \"@angular/core\";\n   * import { UIRouter } from \"@uirouter/angular\";\n   * import { requireAuthHook } from \"./requireAuthHook\";\n   * import { MyService } from \"./myService\";\n   *\n   * export function configureMyModule(uiRouter: UIRouter, injector: Injector, module: StatesModule) {\n   *   // Get UIRouter services off the UIRouter object\n   *   let urlConfig = uiRouter.urlService.config;\n   *   let transitionService = uiRouter.transitionService;\n   *   uiRouter.trace.enable(\"TRANSITION\");\n   *\n   *   transitionService.onBefore({ to: (state) => state.requiresAuth }, requireAuthHook);\n   *\n   *   // Create a slug type based on the string type\n   *   let builtInStringType = urlConfig.type('string');\n   *   let slugType = Object.assign({}, builtInStringType, { encode: (str) => str, decode: (str) => str });\n   *   urlConfig.type('slug', slugType);\n   *\n   *   // Inject arbitrary services from DI using the Injector argument\n   *   let myService: MyService = injector.get(MyService)\n   *   myService.useFastMode();\n   * }\n   * ```\n   *\n   * ```js\n   * @NgModule({\n   *   imports: [\n   *     UIRouterModule.forChild({ states: STATES, config: configureMyModule });\n   *   ]\n   * })\n   * class MyModule {}\n   * ```\n   */\n  config?: (uiRouterInstance: UIRouter, injector: Injector, module: StatesModule) => any;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * The UI-Router for Angular directives:\n *\n * - [[UIView]]: A viewport for routed components\n * - [[UISref]]: A state ref to a target state; navigates when clicked\n * - [[UISrefActive]]: (and `UISrefActiveEq`) Adds a css class when a UISref's target state (or a child state) is active\n *\n * @ng2api\n * @preferred\n * @module directives\n */ /** */\n\nimport {UISref, AnchorUISref} from './uiSref';\nimport {UISrefActive} from './uiSrefActive';\nimport {UIView} from './uiView';\nimport {UISrefStatus} from './uiSrefStatus';\n\nexport {ParentUIViewInject,UIView} from './uiView';\nexport {AnchorUISref,UISref} from './uiSref';\nexport {SrefStatus,UISrefStatus} from './uiSrefStatus';\nexport {UISrefActive} from './uiSrefActive';\n/**\n * \\@internalapi\n */\nexport const _UIROUTER_DIRECTIVES = [UISref, AnchorUISref, UIView, UISrefActive, UISrefStatus];\n/**\n * References to the UI-Router directive classes, for use within a \\@Component's `directives:` property\n * @deprecated use [[UIRouterModule]]\n * \\@internalapi\n */\nexport const UIROUTER_DIRECTIVES = _UIROUTER_DIRECTIVES;\n","/** @ng2api @module directives */ /** */\n\nimport {Directive, Input, ElementRef, Host, Renderer} from '@angular/core';\nimport {UISrefStatus, SrefStatus} from './uiSrefStatus';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * A directive that adds a CSS class when its associated `uiSref` link is active.\n * \n * ### Purpose\n * \n * This directive should be paired with one (or more) [[UISref]] directives.\n * It will apply a CSS class to its element when the state the `uiSref` targets is activated.\n * \n * This can be used to create navigation UI where the active link is highlighted.\n * \n * ### Selectors\n * \n * - `[uiSrefActive]`: When this selector is used, the class is added when the target state or any\n * child of the target state is active\n * - `[uiSrefActiveEq]`: When this selector is used, the class is added when the target state is\n * exactly active (the class is not added if a child of the target state is active).\n * \n * ### Inputs\n * \n * - `uiSrefActive`/`uiSrefActiveEq`: one or more CSS classes to add to the element, when the `uiSref` is active\n * \n * #### Example:\n * The anchor tag has the `active` class added when the `foo` state is active.\n * ```html\n * <a uiSref=\"foo\" uiSrefActive=\"active\">Foo</a>\n * ```\n * \n * ### Matching parameters\n * \n * If the `uiSref` includes parameters, the current state must be active, *and* the parameter values must match.\n * \n * #### Example:\n * The first anchor tag has the `active` class added when the `foo.bar` state is active and the `id` parameter\n * equals 25.\n * The second anchor tag has the `active` class added when the `foo.bar` state is active and the `id` parameter\n * equals 32.\n * ```html\n * <a uiSref=\"foo.bar\" [uiParams]=\"{ id: 25 }\" uiSrefActive=\"active\">Bar #25</a>\n * <a uiSref=\"foo.bar\" [uiParams]=\"{ id: 32 }\" uiSrefActive=\"active\">Bar #32</a>\n * ```\n * \n * #### Example:\n * A list of anchor tags are created for a list of `bar` objects.\n * An anchor tag will have the `active` class when `foo.bar` state is active and the `id` parameter matches\n * that object's `id`.\n * ```html\n * <li *ngFor=\"let bar of bars\">\n *   <a uiSref=\"foo.bar\" [uiParams]=\"{ id: bar.id }\" uiSrefActive=\"active\">Bar #{{ bar.id }}</a>\n * </li>\n * ```\n * \n * ### Multiple uiSrefs\n * \n * A single `uiSrefActive` can be used for multiple `uiSref` links.\n * This can be used to create (for example) a drop down navigation menu, where the menui is highlighted\n * if *any* of its inner links are active.\n * \n * The `uiSrefActive` should be placed on an ancestor element of the `uiSref` list.\n * If anyof the `uiSref` links are activated, the class will be added to the ancestor element.\n * \n * #### Example:\n * This is a dropdown nagivation menu for \"Admin\" states.\n * When any of `admin.users`, `admin.groups`, `admin.settings` are active, the `<li>` for the dropdown\n * has the `dropdown-child-active` class applied.\n * Additionally, the active anchor tag has the `active` class applied.\n * ```html\n * <ul class=\"dropdown-menu\">\n *   <li uiSrefActive=\"dropdown-child-active\" class=\"dropdown admin\">\n *     Admin\n *     <ul>\n *       <li><a uiSref=\"admin.users\" uiSrefActive=\"active\">Users</a></li>\n *       <li><a uiSref=\"admin.groups\" uiSrefActive=\"active\">Groups</a></li>\n *       <li><a uiSref=\"admin.settings\" uiSrefActive=\"active\">Settings</a></li>\n *     </ul>\n *   </li>\n * </ul>\n * ```\n */\nexport class UISrefActive {\nprivate _classes: string[] = [];\n/**\n * @param {?} val\n * @return {?}\n */\nset active(val: string) { this._classes = val.split(\"\\s+\")};\nprivate _classesEq: string[] = [];\n/**\n * @param {?} val\n * @return {?}\n */\nset activeEq(val: string) { this._classesEq = val.split(\"\\s+\")};\nprivate _subscription: Subscription;\n/**\n * @param {?} uiSrefStatus\n * @param {?} rnd\n * @param {?} host\n */\nconstructor(uiSrefStatus: UISrefStatus, rnd: Renderer,  host: ElementRef) {\n    this._subscription = uiSrefStatus.uiSrefStatus.subscribe((next: SrefStatus) => {\n      this._classes.forEach(cls => rnd.setElementClass(host.nativeElement, cls, next.active));\n      this._classesEq.forEach(cls => rnd.setElementClass(host.nativeElement, cls, next.exact));\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._subscription.unsubscribe();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[uiSrefActive],[uiSrefActiveEq]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: UISrefStatus, },\n{type: Renderer, },\n{type: ElementRef, decorators: [{ type: Host }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'active': [{ type: Input, args: ['uiSrefActive', ] },],\n'activeEq': [{ type: Input, args: ['uiSrefActiveEq', ] },],\n};\n}\n\nfunction UISrefActive_tsickle_Closure_declarations() {\n/** @type {?} */\nUISrefActive.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUISrefActive.ctorParameters;\n/** @type {?} */\nUISrefActive.propDecorators;\n/** @type {?} */\nUISrefActive.prototype._classes;\n/** @type {?} */\nUISrefActive.prototype._classesEq;\n/** @type {?} */\nUISrefActive.prototype._subscription;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/** @ng2api @module directives */\n/** */\n\nimport { Directive, Output, EventEmitter, ContentChildren, QueryList } from '@angular/core';\nimport { UISref } from './uiSref';\nimport {\n  PathNode, Transition, TargetState, StateObject, anyTrueR, tail, unnestR, Predicate, UIRouterGlobals, Param, PathUtils\n} from '@uirouter/core/index';\n\nimport { Subscription } from 'rxjs/Subscription';\nimport { Observable } from 'rxjs/Observable';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nimport {of} from 'rxjs/observable/of';\nimport {fromPromise} from 'rxjs/observable/fromPromise';\nimport {combineLatest} from 'rxjs/observable/combineLatest';\nimport {switchMap} from 'rxjs/operator/switchMap';\nimport {map} from 'rxjs/operator/map';\nimport {concat} from 'rxjs/operator/concat';\n\n/** @internalapi */\ninterface TransEvt { evt: string; trans: Transition; }\n\n/**\n * UISref status emitted from [[UISrefStatus]]\n */\nexport interface SrefStatus {\n  /** The sref's target state (or one of its children) is currently active */\n  active: boolean;\n  /** The sref's target state is currently active */\n  exact: boolean;\n  /** A transition is entering the sref's target state */\n  entering: boolean;\n  /** A transition is exiting the sref's target state */\n  exiting: boolean;\n}\n/**\n * \\@internalapi\n */\nconst inactiveStatus: SrefStatus = {\n  active: false,\n  exact: false,\n  entering: false,\n  exiting: false\n};\n/**\n * Returns a Predicate<PathNode[]>\n * \n * The predicate returns true when the target state (and param values)\n * match the (tail of) the path, and the path's param values\n * \n * \\@internalapi\n */\nconst pathMatches = (target: TargetState): Predicate<PathNode[]> => {\n  if (!target.exists()) return () => false;\n  let state: StateObject = target.$state();\n  let targetParamVals = target.params();\n  let targetPath: PathNode[] = PathUtils.buildPath(target);\n  let paramSchema: Param[] = targetPath.map(node => node.paramSchema)\n      .reduce(unnestR, [])\n      .filter((param: Param) => targetParamVals.hasOwnProperty(param.id));\n\n  return (path: PathNode[]) => {\n    let tailNode = tail(path);\n    if (!tailNode || tailNode.state !== state) return false;\n    let paramValues = PathUtils.paramValues(path);\n    return Param.equals(paramSchema, paramValues, targetParamVals);\n  };\n};\n/**\n * Given basePath: [a, b], appendPath: [c, d]),\n * Expands the path to [c], [c, d]\n * Then appends each to [a,b,] and returns: [a, b, c], [a, b, c, d]\n * \n * \\@internalapi\n * @param {?} basePath\n * @param {?} appendPath\n * @return {?}\n */\nfunction spreadToSubPaths(basePath: PathNode[], appendPath: PathNode[]): PathNode[][] {\n  return appendPath.map(node => basePath.concat(PathUtils.subPath(appendPath, n => n.state === node.state)));\n}\n/**\n * Given a TransEvt (Transition event: started, success, error)\n * and a UISref Target State, return a SrefStatus object\n * which represents the current status of that Sref:\n * active, activeEq (exact match), entering, exiting\n * \n * \\@internalapi\n * @param {?} event\n * @param {?} srefTarget\n * @return {?}\n */\nfunction getSrefStatus(event: TransEvt, srefTarget: TargetState): SrefStatus {\n  const /** @type {?} */ pathMatchesTarget = pathMatches(srefTarget);\n  const /** @type {?} */ tc = event.trans.treeChanges();\n\n  let /** @type {?} */ isStartEvent = event.evt === 'start';\n  let /** @type {?} */ isSuccessEvent = event.evt === 'success';\n  let /** @type {?} */ activePath: PathNode[] = isSuccessEvent ? tc.to : tc.from;\n\n  const /** @type {?} */ isActive = () =>\n      spreadToSubPaths([], activePath)\n          .map(pathMatchesTarget)\n          .reduce(anyTrueR, false);\n\n  const /** @type {?} */ isExact = () =>\n      pathMatchesTarget(activePath);\n\n  const /** @type {?} */ isEntering = () =>\n      spreadToSubPaths(tc.retained, tc.entering)\n          .map(pathMatchesTarget)\n          .reduce(anyTrueR, false);\n\n  const /** @type {?} */ isExiting = () =>\n      spreadToSubPaths(tc.retained, tc.exiting)\n          .map(pathMatchesTarget)\n          .reduce(anyTrueR, false);\n\n  return /** @type {?} */(( {\n    active: isActive(),\n    exact: isExact(),\n    entering: isStartEvent ? isEntering() : false,\n    exiting: isStartEvent ? isExiting() : false,\n  } as SrefStatus));\n}\n/**\n * \\@internalapi\n * @param {?} left\n * @param {?} right\n * @return {?}\n */\nfunction mergeSrefStatus(left: SrefStatus, right: SrefStatus) {\n  return {\n    active:   left.active   || right.active,\n    exact:    left.exact    || right.exact,\n    entering: left.entering || right.entering,\n    exiting:  left.exiting  || right.exiting,\n  };\n}\n/**\n * A directive which emits events when a paired [[UISref]] status changes.\n * \n * This directive is primarily used by the [[UISrefActive]] directives to monitor `UISref`(s).\n * \n * This directive shares two attribute selectors with `UISrefActive`:\n * \n * - `[uiSrefActive]`\n * - `[uiSrefActiveEq]`.\n * \n * Thus, whenever a `UISrefActive` directive is created, a `UISrefStatus` directive is also created.\n * \n * Most apps should simply use `UISrefActive`, but some advanced components may want to process the\n * [[SrefStatus]] events directly.\n * \n * ```js\n * <li (uiSrefStatus)=\"onSrefStatusChanged($event)\">\n *   <a uiSref=\"book\" [uiParams]=\"{ bookId: book.id }\">Book {{ book.name }}</a>\n * </li>\n * ```\n * \n * The `uiSrefStatus` event is emitted whenever an enclosed `uiSref`'s status changes.\n * The event emitted is of type [[SrefStatus]], and has boolean values for `active`, `exact`, `entering`, and `exiting`.\n * \n * The values from this event can be captured and stored on a component (then applied, e.g., using ngClass).\n * \n * ---\n * \n * A single `uiSrefStatus` can enclose multiple `uiSref`.\n * Each status boolean (`active`, `exact`, `entering`, `exiting`) will be true if *any of the enclosed `uiSref` status is true*.\n * In other words, all enclosed `uiSref` statuses  are merged to a single status using `||` (logical or).\n * \n * ```js\n * <li (uiSrefStatus)=\"onSrefStatus($event)\" uiSref=\"admin\">\n *   Home\n *   <ul>\n *     <li> <a uiSref=\"admin.users\">Users</a> </li>\n *     <li> <a uiSref=\"admin.groups\">Groups</a> </li>\n *   </ul>\n * </li>\n * ```\n * \n * In the above example, `$event.active === true` when either `admin.users` or `admin.groups` is active.\n * \n * ---\n * \n * This API is subject to change.\n */\nexport class UISrefStatus {\n/**\n * current statuses of the state/params the uiSref directive is linking to\n */\nuiSrefStatus = new EventEmitter<SrefStatus>(false);\n/**\n * Monitor all child components for UISref(s)\n */\nsrefs: QueryList<UISref>;\n/**\n * The current status\n */\nstatus: SrefStatus;\n/**\n * \\@internalapi\n */\nprivate _subscription: Subscription;\n/**\n * \\@internalapi\n */\nprivate _srefChangesSub: Subscription;\n/**\n * \\@internalapi\n */\nprivate _srefs$: BehaviorSubject<UISref[]>;\n/**\n * \\@internalapi\n */\nprivate _globals: UIRouterGlobals;\n/**\n * @param {?} _globals\n */\nconstructor(_globals: UIRouterGlobals) {\n    this._globals = _globals;\n    this.status = Object.assign({}, inactiveStatus);\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    // Map each transition start event to a stream of:\n    // start -> (success|error)\n    let /** @type {?} */ transEvents$: Observable<TransEvt> = switchMap.call(this._globals.start$, (trans: Transition) => {\n      const /** @type {?} */ event = (evt: string) => ( /** @type {?} */(({evt, trans} as TransEvt)));\n\n      let /** @type {?} */ transStart$ = of(event(\"start\"));\n      let /** @type {?} */ transResult = trans.promise.then(() => event(\"success\"), () => event(\"error\"));\n      let /** @type {?} */ transFinish$ = fromPromise(transResult);\n\n      return concat.call(transStart$, transFinish$);\n    });\n\n    // Watch the @ContentChildren UISref[] components and get their target states\n\n    // let srefs$: Observable<UISref[]> = of(this.srefs.toArray()).concat(this.srefs.changes);\n    this._srefs$ = new BehaviorSubject(this.srefs.toArray());\n    this._srefChangesSub = this.srefs.changes.subscribe(srefs => this._srefs$.next(srefs));\n\n    let /** @type {?} */ targetStates$: Observable<TargetState[]> =\n        switchMap.call(this._srefs$, (srefs: UISref[]) =>\n            combineLatest<TargetState[]>(srefs.map(sref => sref.targetState$)));\n\n    // Calculate the status of each UISref based on the transition event.\n    // Reduce the statuses (if multiple) by or-ing each flag.\n    this._subscription = switchMap.call(transEvents$, (evt: TransEvt) => {\n      return map.call(targetStates$, (targets: TargetState[]) => {\n        let /** @type {?} */ statuses: SrefStatus[] = targets.map(target => getSrefStatus(evt, target));\n        return statuses.reduce(mergeSrefStatus);\n      });\n    }).subscribe(this._setStatus.bind(this));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._subscription) this._subscription.unsubscribe();\n    if (this._srefChangesSub) this._srefChangesSub.unsubscribe();\n    if (this._srefs$) this._srefs$.unsubscribe();\n    this._subscription = this._srefChangesSub = this._srefs$ = undefined;\n  }\n/**\n * @param {?} status\n * @return {?}\n */\nprivate _setStatus(status: SrefStatus) {\n    this.status = status;\n    this.uiSrefStatus.emit(status);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{ selector: '[uiSrefStatus],[uiSrefActive],[uiSrefActiveEq]' }, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: UIRouterGlobals, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'uiSrefStatus': [{ type: Output, args: [\"uiSrefStatus\", ] },],\n'srefs': [{ type: ContentChildren, args: [UISref, {descendants: true}, ] },],\n};\n}\n\nfunction UISrefStatus_tsickle_Closure_declarations() {\n/** @type {?} */\nUISrefStatus.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUISrefStatus.ctorParameters;\n/** @type {?} */\nUISrefStatus.propDecorators;\n/**\n * current statuses of the state/params the uiSref directive is linking to\n * @type {?}\n */\nUISrefStatus.prototype.uiSrefStatus;\n/**\n * Monitor all child components for UISref(s)\n * @type {?}\n */\nUISrefStatus.prototype.srefs;\n/**\n * The current status\n * @type {?}\n */\nUISrefStatus.prototype.status;\n/**\n * \\@internalapi\n * @type {?}\n */\nUISrefStatus.prototype._subscription;\n/**\n * \\@internalapi\n * @type {?}\n */\nUISrefStatus.prototype._srefChangesSub;\n/**\n * \\@internalapi\n * @type {?}\n */\nUISrefStatus.prototype._srefs$;\n/**\n * \\@internalapi\n * @type {?}\n */\nUISrefStatus.prototype._globals;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/** @ng2api @module directives */\n/** */\n\nimport { UIRouter, extend, Obj, TransitionOptions, TargetState } from '@uirouter/core/index';\nimport { Directive, Inject, Input, Optional, ElementRef, Renderer2 } from '@angular/core';\nimport { UIView, ParentUIViewInject } from './uiView';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\nimport { Subscription } from 'rxjs/Subscription';\n/**\n * \\@internalapi \n * # blah blah blah\n */\nexport class AnchorUISref {\n/**\n * @param {?} _el\n * @param {?} _renderer\n */\nconstructor(public _el: ElementRef,\npublic _renderer: Renderer2) { }\n/**\n * @return {?}\n */\nopenInNewTab() {\n    return this._el.nativeElement.target === '_blank';\n  }\n/**\n * @param {?} href\n * @return {?}\n */\nupdate(href: string) {\n    if (href && href !== '') {\n      this._renderer.setProperty(this._el.nativeElement, 'href', href);\n    } else {\n      this._renderer.removeAttribute(this._el.nativeElement, 'href');\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{ selector: 'a[uiSref]' }, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction AnchorUISref_tsickle_Closure_declarations() {\n/** @type {?} */\nAnchorUISref.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAnchorUISref.ctorParameters;\n/** @type {?} */\nAnchorUISref.prototype._el;\n/** @type {?} */\nAnchorUISref.prototype._renderer;\n}\n\n/**\n * A directive when clicked, initiates a [[Transition]] to a [[TargetState]].\n * \n * ### Purpose\n * \n * This directive is applied to anchor tags (`<a>`) or any other clickable element.  It is a state reference (or sref --\n * similar to an href).  When clicked, the directive will transition to that state by calling [[StateService.go]],\n * and optionally supply state parameter values and transition options.\n * \n * When this directive is on an anchor tag, it will also add an `href` attribute to the anchor.\n * \n * ### Selector\n * \n * - `[uiSref]`: The directive is created as an attribute on an element, e.g., `<a uiSref></a>`\n * \n * ### Inputs\n * \n * - `uiSref`: the target state's name, e.g., `uiSref=\"foostate\"`.  If a component template uses a relative `uiSref`,\n * e.g., `uiSref=\".child\"`, the reference is relative to that component's state.\n * \n * - `uiParams`: any target state parameter values, as an object, e.g., `[uiParams]=\"{ fooId: bar.fooId }\"`\n * \n * - `uiOptions`: [[TransitionOptions]], e.g., `[uiOptions]=\"{ inherit: false }\"`\n * \n * \\@example \n * ```html\n * \n * <!-- Targets bar state' -->\n * <a uiSref=\"bar\">Bar</a>\n * \n * <!-- Assume this component's state is \"foo\".\n *      Relatively targets \"foo.child\" -->\n * <a uiSref=\".child\">Foo Child</a>\n * \n * <!-- Targets \"bar\" state and supplies parameter value -->\n * <a uiSref=\"bar\" [uiParams]=\"{ barId: foo.barId }\">Bar {{foo.barId}}</a>\n * \n * <!-- Targets \"bar\" state and parameter, doesn't inherit existing parameters-->\n * <a uiSref=\"bar\" [uiParams]=\"{ barId: foo.barId }\" [uiOptions]=\"{ inherit: false }\">Bar {{foo.barId}}</a>\n * ```\n */\nexport class UISref {\n/**\n * `\\@Input('uiSref')` The name of the state to link to\n * \n * ```html\n * <a uiSref=\"hoome\">Home</a>\n * ```\n */\nstate: string;\n/**\n * `\\@Input('uiParams')` The parameter values to use (as key/values)\n * \n * ```html\n * <a uiSref=\"book\" [uiParams]=\"{ bookId: book.id }\">Book {{ book.name }}</a>\n * ```\n */\nparams: any;\n/**\n * `\\@Input('uiOptions')` The transition options\n * \n * ```html\n * <a uiSref=\"books\" [uiOptions]=\"{ reload: true }\">Book {{ book.name }}</a>\n * ```\n */\noptions: TransitionOptions;\n/**\n * An observable (ReplaySubject) of the state this UISref is targeting.\n * When the UISref is clicked, it will transition to this [[TargetState]].\n */\npublic targetState$ = new ReplaySubject<TargetState>(1);\n/**\n * \\@internalapi\n */\nprivate _emit: boolean = false;\n/**\n * \\@internalapi\n */\nprivate _statesSub: Subscription;\n/**\n * \\@internalapi\n */\nprivate _router: UIRouter;\n/**\n * \\@internalapi\n */\nprivate _anchorUISref: AnchorUISref;\n/**\n * \\@internalapi\n */\npublic parent: ParentUIViewInject;\n/**\n * @param {?} _router\n * @param {?} _anchorUISref\n * @param {?} parent\n */\nconstructor(\n      _router: UIRouter,\n       _anchorUISref: AnchorUISref,\n       parent: ParentUIViewInject,\n  ) {\n    this._router = _router;\n    this._anchorUISref = _anchorUISref;\n    this.parent = parent;\n\n    this._statesSub = _router.globals.states$.subscribe(() => this.update());\n  }\n/**\n * \\@internalapi\n * @param {?} val\n * @return {?}\n */\nset \"uiSref\"(val: string) { this.state = val; this.update(); }\n/**\n * \\@internalapi\n * @param {?} val\n * @return {?}\n */\nset \"uiParams\"(val: Obj) { this.params = val; this.update(); }\n/**\n * \\@internalapi\n * @param {?} val\n * @return {?}\n */\nset \"uiOptions\"(val: TransitionOptions) { this.options = val; this.update(); }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._emit = true;\n    this.update();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._emit = false;\n    this._statesSub.unsubscribe();\n    this.targetState$.unsubscribe();\n  }\n/**\n * @return {?}\n */\nupdate() {\n    let /** @type {?} */ $state = this._router.stateService;\n    if (this._emit) {\n      let /** @type {?} */ newTarget = $state.target(this.state, this.params, this.getOptions());\n      this.targetState$.next(newTarget);\n    }\n\n    if (this._anchorUISref) {\n      let /** @type {?} */ href = $state.href(this.state, this.params, this.getOptions());\n      this._anchorUISref.update(href);\n    }\n  }\n/**\n * @return {?}\n */\ngetOptions() {\n    let /** @type {?} */ defaultOpts: TransitionOptions = {\n      relative: this.parent && this.parent.context && this.parent.context.name,\n      inherit: true ,\n      source: \"sref\"\n    };\n    return extend(defaultOpts, this.options || {});\n  }\n/**\n * When triggered by a (click) event, this function transitions to the UISref's target state\n * @return {?}\n */\ngo() {\n    if (this._anchorUISref && this._anchorUISref.openInNewTab()) {\n      return ;\n    }\n\n    this._router.stateService.go(this.state, this.params, this.getOptions());\n    return false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[uiSref]',\n  host: { '(click)': 'go()' }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: UIRouter, },\n{type: AnchorUISref, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [UIView.PARENT_INJECT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'state': [{ type: Input, args: ['uiSref', ] },],\n'params': [{ type: Input, args: ['uiParams', ] },],\n'options': [{ type: Input, args: ['uiOptions', ] },],\n};\n}\n\nfunction UISref_tsickle_Closure_declarations() {\n/** @type {?} */\nUISref.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUISref.ctorParameters;\n/** @type {?} */\nUISref.propDecorators;\n/**\n * `\\@Input('uiSref')` The name of the state to link to\n * \n * ```html\n * <a uiSref=\"hoome\">Home</a>\n * ```\n * @type {?}\n */\nUISref.prototype.state;\n/**\n * `\\@Input('uiParams')` The parameter values to use (as key/values)\n * \n * ```html\n * <a uiSref=\"book\" [uiParams]=\"{ bookId: book.id }\">Book {{ book.name }}</a>\n * ```\n * @type {?}\n */\nUISref.prototype.params;\n/**\n * `\\@Input('uiOptions')` The transition options\n * \n * ```html\n * <a uiSref=\"books\" [uiOptions]=\"{ reload: true }\">Book {{ book.name }}</a>\n * ```\n * @type {?}\n */\nUISref.prototype.options;\n/**\n * An observable (ReplaySubject) of the state this UISref is targeting.\n * When the UISref is clicked, it will transition to this [[TargetState]].\n * @type {?}\n */\nUISref.prototype.targetState$;\n/**\n * \\@internalapi\n * @type {?}\n */\nUISref.prototype._emit;\n/**\n * \\@internalapi\n * @type {?}\n */\nUISref.prototype._statesSub;\n/**\n * \\@internalapi\n * @type {?}\n */\nUISref.prototype._router;\n/**\n * \\@internalapi\n * @type {?}\n */\nUISref.prototype._anchorUISref;\n/**\n * \\@internalapi\n * @type {?}\n */\nUISref.prototype.parent;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/** @module ng2 */ /** */\n\nimport { UIRouter, isFunction, StateObject } from '@uirouter/core/index';\nimport {StatesModule, RootModule} from './uiRouterNgModule';\nimport {Injector} from '@angular/core';\nimport {isDefined} from '@uirouter/core/index';\n/**\n * @param {?} uiRouter\n * @param {?} injector\n * @param {?=} module\n * @return {?}\n */\nexport function applyModuleConfig(uiRouter: UIRouter, injector: Injector, module: StatesModule = {}): StateObject[] {\n  if (isFunction(module.config)) {\n    module.config(uiRouter, injector, module);\n  }\n\n  let /** @type {?} */ states = module.states || [];\n  return states.map(state => uiRouter.stateRegistry.register(state));\n}\n/**\n * @param {?} uiRouter\n * @param {?} injector\n * @param {?} module\n * @return {?}\n */\nexport function applyRootModuleConfig(uiRouter: UIRouter, injector: Injector, module: RootModule) {\n  isDefined(module.deferIntercept) && uiRouter.urlService.deferIntercept(module.deferIntercept);\n  isDefined(module.otherwise)      && uiRouter.urlService.rules.otherwise(module.otherwise);\n}\n\n\n","/** @ng2api @module directives */\n/** */\n\nimport {\n  Component, ComponentFactoryResolver, ViewContainerRef, Input, ComponentRef, Type, ReflectiveInjector, ViewChild,\n  Injector, Inject, ComponentFactory\n} from '@angular/core';\n\nimport {\n  UIRouter, isFunction, Transition, parse, TransitionHookFn, StateDeclaration, inArray, trace, ViewContext, ViewConfig,\n  ActiveUIView, ResolveContext, NATIVE_INJECTOR_TOKEN, flattenR\n} from '@uirouter/core/index';\nimport { Ng2ViewConfig } from '../statebuilders/views';\nimport { MergeInjector } from '../mergeInjector';\n/**\n * @hidden\n */\nlet id = 0;\n\n/** @internalapi These are provide()d as the string UIView.PARENT_INJECT */\nexport interface ParentUIViewInject {\n  context: ViewContext;\n  fqn: string;\n}\n\n/** @internalapi */\ninterface InputMapping {\n  token: string;\n  prop: string;\n}\n/**\n * Given a component class, gets the inputs of styles:\n * \n * - \\@Input('foo') _foo\n * - `inputs: ['foo']`\n * \n * \\@internalapi\n */\nconst ng2ComponentInputs = (factory: ComponentFactory<any>): InputMapping[] => {\n  return factory.inputs.map(input => ({ prop: input.propName, token: input.templateName }));\n};\n/**\n * A UI-Router viewport directive, which is filled in by a view (component) on a state.\n * \n * ### Selector\n * \n * A `ui-view` directive can be created as an element: `<ui-view></ui-view>` or as an attribute: `<div ui-view></div>`.\n * \n * ### Purpose\n * \n * This directive is used in a Component template (or as the root component) to create a viewport.  The viewport\n * is filled in by a view (as defined by a [[Ng2ViewDeclaration]] inside a [[Ng2StateDeclaration]]) when the view's\n * state has been activated.\n * \n * #### Example:\n * ```js\n * // This app has two states, 'foo' and 'bar'\n * stateRegistry.register({ name: 'foo', url: '/foo', component: FooComponent });\n * stateRegistry.register({ name: 'bar', url: '/bar', component: BarComponent });\n * ```\n * ```html\n * <!-- This ui-view will be filled in by the foo state's component or\n *      the bar state's component when the foo or bar state is activated -->\n * <ui-view></ui-view>\n * ```\n * \n * ### Named ui-views\n * \n * A `ui-view` may optionally be given a name via the attribute value: `<div ui-view='header'></div>`.  *Note:\n * an unnamed `ui-view` is internally named `$default`*.   When a `ui-view` has a name, it will be filled in\n * by a matching named view.\n * \n * #### Example:\n * ```js\n * stateRegistry.register({\n *   name: 'foo',\n *   url: '/foo',\n *   views: { header: HeaderComponent, $default: FooComponent });\n * ```\n * ```html\n * <!-- When 'foo' state is active, filled by HeaderComponent -->\n * <div ui-view=\"header\"></div>\n * \n * <!-- When 'foo' state is active, filled by FooComponent -->\n * <ui-view></ui-view>\n * ```\n */\nexport class UIView {\n   componentTarget: ViewContainerRef;\n   name: string;\n/**\n * @param {?} val\n * @return {?}\n */\nset _name(val: string) { this.name = val; }\n/**\n * The reference to the component currently inside the viewport\n */\ncomponentRef: ComponentRef<any>;\n/**\n * Deregisters the ui-view from the view service\n */\nderegisterUIView: Function;\n/**\n * Deregisters the master uiCanExit transition hook\n */\nderegisterHook: Function;\n/**\n * Data about the this UIView\n */\nuiViewData: ActiveUIView = <any> {};\n  parent: ParentUIViewInject;\n\n  static PARENT_INJECT = \"UIView.PARENT_INJECT\";\n/**\n * @param {?} router\n * @param {?} parent\n * @param {?} viewContainerRef\n */\nconstructor(\npublic router: UIRouter,\n       parent,\npublic viewContainerRef: ViewContainerRef,\n  ) {\n    this.parent = parent;\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    const /** @type {?} */ router = this.router;\n    const /** @type {?} */ parentFqn = this.parent.fqn;\n    const /** @type {?} */ name = this.name || '$default';\n\n    this.uiViewData = {\n      $type: 'ng2',\n      id: id++,\n      name: name,\n      fqn: parentFqn ? parentFqn + \".\" + name : name,\n      creationContext: this.parent.context,\n      configUpdated: this.viewConfigUpdated.bind(this),\n      config: undefined\n    };\n\n    this.deregisterHook = router.transitionService.onBefore({}, trans => this.applyUiCanExitHook(trans));\n    this.deregisterUIView = router.viewService.registerUIView(this.uiViewData);\n  }\n/**\n * For each transition, checks the component loaded in the ui-view for:\n * \n * - has a uiCanExit() component hook\n * - is being exited\n * \n * If both are true, adds the uiCanExit component function as a hook to that singular Transition.\n * @param {?} trans\n * @return {?}\n */\napplyUiCanExitHook(trans: Transition) {\n    const /** @type {?} */ instance = this.componentRef && this.componentRef.instance;\n    const /** @type {?} */ uiCanExitFn: TransitionHookFn = instance && instance.uiCanExit;\n\n    if (isFunction(uiCanExitFn)) {\n      const /** @type {?} */ state: StateDeclaration = parse(\"uiViewData.config.viewDecl.$context.self\")(this);\n\n      if (trans.exiting().indexOf(state) !== -1) {\n        trans.onStart({}, function() {\n          return uiCanExitFn.call(instance, trans);\n        });\n      }\n    }\n  }\n/**\n * @return {?}\n */\ndisposeLast() {\n    if (this.componentRef) this.componentRef.destroy();\n    this.componentRef = null;\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this.deregisterUIView) this.deregisterUIView();\n    if (this.deregisterHook) this.deregisterHook();\n    this.disposeLast();\n  }\n/**\n * The view service is informing us of an updated ViewConfig\n * (usually because a transition activated some state and its views)\n * @param {?} config\n * @return {?}\n */\nviewConfigUpdated(config: ViewConfig) {\n    // The config may be undefined if there is nothing currently targeting this UIView.\n    // Dispose the current component, if there is one\n    if (!config) return this.disposeLast();\n\n    // Only care about Ng2 configs\n    if (!(config instanceof Ng2ViewConfig)) return;\n\n    // The \"new\" viewconfig is already applied, so exit early\n    if (this.uiViewData.config === config) return;\n\n    // This is a new ViewConfig.  Dispose the previous component\n    this.disposeLast();\n    trace.traceUIViewConfigUpdated(this.uiViewData, config && config.viewDecl.$context);\n\n    this.applyUpdatedConfig(config);\n  }\n/**\n * @param {?} config\n * @return {?}\n */\napplyUpdatedConfig(config: Ng2ViewConfig) {\n    this.uiViewData.config = config;\n    // Create the Injector for the routed component\n    let /** @type {?} */ context = new ResolveContext(config.path);\n    let /** @type {?} */ componentInjector = this.getComponentInjector(context);\n\n    // Get the component class from the view declaration. TODO: allow promises?\n    let /** @type {?} */ componentClass = config.viewDecl.component;\n\n    // Create the component\n    let /** @type {?} */ compFactoryResolver = componentInjector.get(ComponentFactoryResolver);\n    let /** @type {?} */ compFactory = compFactoryResolver.resolveComponentFactory(componentClass);\n    this.componentRef = this.componentTarget.createComponent(compFactory, undefined, componentInjector);\n\n    // Wire resolves to @Input()s\n    this.applyInputBindings(compFactory, this.componentRef, context, componentClass);\n  }\n/**\n * Creates a new Injector for a routed component.\n * \n * Adds resolve values to the Injector\n * Adds providers from the NgModule for the state\n * Adds providers from the parent Component in the component tree\n * Adds a PARENT_INJECT view context object\n * \n * @param {?} context\n * @return {?} an Injector\n */\ngetComponentInjector(context: ResolveContext): Injector {\n    // Map resolves to \"useValue: providers\"\n    let /** @type {?} */ resolvables = context.getTokens().map(token => context.getResolvable(token)).filter(r => r.resolved);\n    let /** @type {?} */ newProviders = resolvables.map(r => ({ provide: r.token, useValue: r.data }));\n\n    let /** @type {?} */ parentInject = { context: this.uiViewData.config.viewDecl.$context, fqn: this.uiViewData.fqn };\n    newProviders.push({ provide: UIView.PARENT_INJECT, useValue: parentInject });\n\n    let /** @type {?} */ parentComponentInjector = this.viewContainerRef.injector;\n    let /** @type {?} */ moduleInjector = context.getResolvable(NATIVE_INJECTOR_TOKEN).data;\n    let /** @type {?} */ mergedParentInjector = new MergeInjector(moduleInjector, parentComponentInjector);\n\n    return ReflectiveInjector.resolveAndCreate(newProviders, mergedParentInjector);\n  }\n/**\n * Supplies component inputs with resolve data\n * \n * Finds component inputs which match resolves (by name) and sets the input value\n * to the resolve data.\n * @param {?} factory\n * @param {?} ref\n * @param {?} context\n * @param {?} componentClass\n * @return {?}\n */\napplyInputBindings(factory: ComponentFactory<any>, ref: ComponentRef<any>, context: ResolveContext, componentClass) {\n    const /** @type {?} */ component = ref.instance;\n    const /** @type {?} */ bindings = this.uiViewData.config.viewDecl['bindings'] || {};\n    const /** @type {?} */ explicitBoundProps = Object.keys(bindings);\n\n    // Returns the actual component property for a renamed an input renamed using `@Input('foo') _foo`.\n    // return the `_foo` property\n    const /** @type {?} */ renamedInputProp = (prop: string) => {\n      const /** @type {?} */ input = factory.inputs.find(i => i.templateName === prop);\n      return input && input.propName || prop;\n    };\n\n    // Supply resolve data to component as specified in the state's `bindings: {}`\n    const /** @type {?} */ explicitInputTuples = explicitBoundProps\n        .reduce((acc, key) => acc.concat([{ prop: renamedInputProp(key), token: bindings[key] }]), []);\n\n    // Supply resolve data to matching @Input('prop') or inputs: ['prop']\n    const /** @type {?} */ implicitInputTuples = ng2ComponentInputs(factory)\n        .filter(tuple => !inArray(explicitBoundProps, tuple.prop));\n\n    const /** @type {?} */ addResolvable = (tuple: InputMapping) => ({\n      prop: tuple.prop,\n      resolvable: context.getResolvable(tuple.token),\n    });\n\n    explicitInputTuples.concat(implicitInputTuples)\n        .map(addResolvable)\n        .map(tuple => {\n          if (tuple.resolvable && !tuple.resolvable.resolved && tuple.resolvable.policy && tuple.resolvable.policy.async === 'NOWAIT') {\n            tuple.resolvable.promise.then(\n              () => ref.instance[tuple.prop] = tuple.resolvable.data\n            );\n          }\n\n          return tuple;\n        })\n        .filter(tuple => tuple.resolvable && tuple.resolvable.resolved)\n        .forEach(tuple => { component[tuple.prop] = tuple.resolvable.data; });\n\n    // Initiate change detection for the newly created component\n    ref.changeDetectorRef.detectChanges();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ui-view, [ui-view]',\n  template: `\n    <ng-template #componentTarget></ng-template>\n    <ng-content *ngIf=\"!componentRef\"></ng-content>\n  `\n  // styles: [`\n  //   .done-true {\n  //     text-decoration: line-through;\n  //     color: grey;\n  //   }`\n  // ],\n  // template: `\n  // <div style=\"padding: 1em; border: 1px solid lightgrey;\">\n  //\n  //   <div #content style=\"color: lightgrey; font-size: smaller;\">\n  //     <div>ui-view #{{uiViewData?.id}} created by '{{ parentContext?.name || \"(root)\" }}' state</div>\n  //     <div>name: (absolute) '{{uiViewData?.fqn}}' (contextual) '{{uiViewData?.name}}@{{parentContext?.name}}' </div>\n  //     <div>currently filled by: '{{(uiViewData?.config && uiViewData?.config?.viewDecl?.$context) || 'empty...'}}'</div>\n  //   </div>\n  //\n  // </div>`\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: UIRouter, },\n{type: undefined, decorators: [{ type: Inject, args: [UIView.PARENT_INJECT, ] }, ]},\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'componentTarget': [{ type: ViewChild, args: ['componentTarget', {read: ViewContainerRef}, ] },],\n'name': [{ type: Input, args: ['name', ] },],\n'_name': [{ type: Input, args: ['ui-view', ] },],\n};\n}\n\nfunction UIView_tsickle_Closure_declarations() {\n/** @type {?} */\nUIView.PARENT_INJECT;\n/** @type {?} */\nUIView.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUIView.ctorParameters;\n/** @type {?} */\nUIView.propDecorators;\n/** @type {?} */\nUIView.prototype.componentTarget;\n/** @type {?} */\nUIView.prototype.name;\n/**\n * The reference to the component currently inside the viewport\n * @type {?}\n */\nUIView.prototype.componentRef;\n/**\n * Deregisters the ui-view from the view service\n * @type {?}\n */\nUIView.prototype.deregisterUIView;\n/**\n * Deregisters the master uiCanExit transition hook\n * @type {?}\n */\nUIView.prototype.deregisterHook;\n/**\n * Data about the this UIView\n * @type {?}\n */\nUIView.prototype.uiViewData;\n/** @type {?} */\nUIView.prototype.parent;\n/** @type {?} */\nUIView.prototype.router;\n/** @type {?} */\nUIView.prototype.viewContainerRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/** @module ng2 */ /** */\n\nimport {Injector} from '@angular/core';\n/**\n * Merge two injectors\n * \n * This class implements the Injector ng2 interface but delegates\n * to the Injectors provided in the constructor.\n */\nexport class MergeInjector implements Injector {\n  static NOT_FOUND = {};\nprivate injectors: Injector[];\n/**\n * @param {...?} injectors\n */\nconstructor(...injectors: Injector[]) {\n    if (injectors.length < 2) throw new Error(\"pass at least two injectors\");\n    this.injectors = injectors;\n  }\n/**\n * Get the token from the first injector which contains it.\n * \n * Delegates to the first Injector.get().\n * If not found, then delegates to the second Injector (and so forth).\n * If no Injector contains the token, return the `notFoundValue`, or throw.\n * \n * @param {?} token the DI token\n * @param {?=} notFoundValue the value to return if none of the Injectors contains the token.\n * @return {?}\n */\nget(token: any, notFoundValue?: any): any {\n    for (let /** @type {?} */ i = 0; i < this.injectors.length; i++) {\n      let /** @type {?} */ val = this.injectors[i].get(token, MergeInjector.NOT_FOUND);\n      if (val !== MergeInjector.NOT_FOUND) return val;\n    }\n\n    if (arguments.length >= 2) return notFoundValue;\n\n    // This will throw the DI Injector error\n    this.injectors[0].get(token);\n  }\n}\n\nfunction MergeInjector_tsickle_Closure_declarations() {\n/** @type {?} */\nMergeInjector.NOT_FOUND;\n/** @type {?} */\nMergeInjector.prototype.injectors;\n}\n","/** @module ng2 */ /** */\n\nimport { isFunction, StateObject } from '@uirouter/core/index';\nimport {PathNode} from '@uirouter/core/index';\nimport {pick, forEach} from '@uirouter/core/index';\nimport {ViewConfig} from '@uirouter/core/index';\nimport {Ng2ViewDeclaration} from '../interface';\nimport {services} from '@uirouter/core/index';\nimport {ViewService} from '@uirouter/core/index';\n/**\n * This is a [[StateBuilder.builder]] function for Angular `views`.\n * \n * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n * handles the `views` property with logic specific to \\@uirouter/angular.\n * \n * If no `views: {}` property exists on the [[StateDeclaration]], then it creates the `views` object and\n * applies the state-level configuration to a view named `$default`.\n * @param {?} state\n * @return {?}\n */\nexport function ng2ViewsBuilder(state: StateObject) {\n  let /** @type {?} */ views: { [key: string]: Ng2ViewDeclaration } = {}, /** @type {?} */\n      viewsObject = state.views || {\"$default\": pick(state, [\"component\", \"bindings\"])};\n\n  forEach(viewsObject, function (config: Ng2ViewDeclaration, name: string) {\n    name = name || \"$default\"; // Account for views: { \"\": { template... } }\n    if (isFunction(config)) config = { component: /** @type {?} */(( config as any)) };\n    if (Object.keys(config).length == 0) return;\n\n    config.$type = \"ng2\";\n    config.$context = state;\n    config.$name = name;\n\n    let /** @type {?} */ normalized = ViewService.normalizeUIViewTarget(config.$context, config.$name);\n    config.$uiViewName = normalized.uiViewName;\n    config.$uiViewContextAnchor = normalized.uiViewContextAnchor;\n\n    views[name] = config;\n  });\n  return views;\n}\n\nlet /** @type {?} */ id = 0;\nexport class Ng2ViewConfig implements ViewConfig {\n  $id: number = id++;\n  loaded: boolean = true;\n/**\n * @param {?} path\n * @param {?} viewDecl\n */\nconstructor(public path: PathNode[],\npublic viewDecl: Ng2ViewDeclaration) { }\n/**\n * @return {?}\n */\nload() {\n    return services.$q.when(this);\n  }\n}\n\nfunction Ng2ViewConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nNg2ViewConfig.prototype.$id;\n/** @type {?} */\nNg2ViewConfig.prototype.loaded;\n/** @type {?} */\nNg2ViewConfig.prototype.path;\n/** @type {?} */\nNg2ViewConfig.prototype.viewDecl;\n}\n\n"],"names":["locationStrategy","val","map","prop","id"],"mappings":"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"}